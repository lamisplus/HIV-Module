[{"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\index.js":"1","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\App.js":"2","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js":"5","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"6","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"7","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\context\\ThemeDemo.js":"8","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js":"9","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Home.js":"10","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"11","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"12","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"13","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\index.js":"14","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\NewSessions.js":"15","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\SessionList.js":"16","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\Index.js":"17","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewUpdateEACSessions.js":"18","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\CervicalCancer\\Index.js":"19","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\Index.js":"20","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\CervicalCancer\\ViewPage.js":"21","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"22","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\EacOutCome.js":"23","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ClientStatusUpdate\\ClientStatusUpdate.js":"24","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\FirstEAC.js":"25","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\index.js":"26","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TransferForm\\Index.js":"27","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\IntensiveFollowUp\\Index.js":"28","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\UpdateLabOrderResult.js":"29","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\index.js":"30","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\api.js":"31","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\IntensiveFollowUp\\ViewUpdate.js":"32","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Index.js":"33","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\Index.js":"34","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientListIit.js":"35","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"36","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\UpdateViewViralLoadOrderResult.js":"37","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\Index.js":"38","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\ViewUpdate.js":"39","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js":"40","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViewLaboratory.js":"41","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\ThirdEac.js":"42","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\FirstEac.js":"43","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\SecondEac.js":"44","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyRefillViewUpdate.js":"45","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ViewArtCommencement.js":"46","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\MentalHealthScreening\\ViewMhs.js":"47","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\LabOrderResultHistory.js":"48","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\ReproductiveIntentions.js":"49","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Eligibilty.js":"50","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\GenderBase.js":"51","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\NutritionalStatus.js":"52","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\PositiveHealthDignity.js":"53","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\ChronicConditions.js":"54","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\TrackingHistory.js":"55","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\Tracking.js":"56","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Index.js":"57","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtBySex.js":"58","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtBySex.js":"59","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtByAge.js":"60","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtByAge.js":"61","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult.js":"62","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult.js":"63","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\LabOrderResult.js":"64","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrderResult.js":"65","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrderResultHistory.js":"66","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ThirdEac.js":"67","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrder.js":"68","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\SecondEac.js":"69","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\EnhancedAdherenceCounseling.js":"70","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViralLoadList.js":"71","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyHistory.js":"72","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"73","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyRefillNew.js":"74","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabHistory.js":"75","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ArtCommencement.js":"76","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\StopEac.js":"77","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"78","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\ClinicHistory.js":"79","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ArtCommencementPage.js":"80","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\MentalHealthScreening\\index.js":"81","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Index.js":"82","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Index.js":"83","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ADR\\Index.js":"84","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\OpportunisticInfection\\Index.js":"85","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\TBScreening\\Index.js":"86","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\History\\ConsultationPage.js":"87","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\PastArv.js":"88","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\MedicalHistory.js":"89","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Appearance.js":"90","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\PhysicalExamination.js":"91","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Plan.js":"92","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\WhoStaging.js":"93","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\MedicalHistory.js":"94","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\PastArv.js":"95","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\AdultRegimenNextAppointment.js":"96","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\PhysicalExamination.js":"97","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Appearance.js":"98","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Plan.js":"99","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\WhoStaging.js":"100","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\ChildRegimenNextAppointment.js":"101","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\ChildRegimenNextAppointment.js":"102","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\AdultRegimenNextAppointment.js":"103","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\ADR\\Index.js":"104","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\TBScreening\\Index.js":"105","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\OpportunisticInfection\\Index.js":"106","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\ArtPatients.js":"107","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Tb.js":"108","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Tpt.js":"109","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\ServiceForm.js":"110","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\PeadiatricDisclosureChecklist.js":"111","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\Register.js":"112","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\Index.js":"113","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\List.js":"114","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\Patient.js":"115"},{"size":753,"mtime":1673287698279,"results":"116","hashOfConfig":"117"},{"size":1596,"mtime":1673287698277,"results":"118","hashOfConfig":"117"},{"size":375,"mtime":1665808866019,"results":"119","hashOfConfig":"117"},{"size":9235,"mtime":1665808862886,"results":"120","hashOfConfig":"117"},{"size":59702,"mtime":1687888312777,"results":"121","hashOfConfig":"117"},{"size":61761,"mtime":1687890685036,"results":"122","hashOfConfig":"117"},{"size":13719,"mtime":1686014927528,"results":"123","hashOfConfig":"117"},{"size":3056,"mtime":1665808862887,"results":"124","hashOfConfig":"117"},{"size":124696,"mtime":1687896213910,"results":"125","hashOfConfig":"117"},{"size":2533,"mtime":1689165046243,"results":"126","hashOfConfig":"117"},{"size":10649,"mtime":1689164504666,"results":"127","hashOfConfig":"117"},{"size":12282,"mtime":1689164548551,"results":"128","hashOfConfig":"117"},{"size":32836,"mtime":1687230272549,"results":"129","hashOfConfig":"117"},{"size":2118,"mtime":1673287698909,"results":"130","hashOfConfig":"117"},{"size":26007,"mtime":1678422886161,"results":"131","hashOfConfig":"117"},{"size":12169,"mtime":1673287698686,"results":"132","hashOfConfig":"117"},{"size":3357,"mtime":1677220219438,"results":"133","hashOfConfig":"117"},{"size":26405,"mtime":1673287698698,"results":"134","hashOfConfig":"117"},{"size":28517,"mtime":1687448230094,"results":"135","hashOfConfig":"117"},{"size":1436,"mtime":1673287698681,"results":"136","hashOfConfig":"117"},{"size":28869,"mtime":1687447881195,"results":"137","hashOfConfig":"117"},{"size":2599,"mtime":1673287698647,"results":"138","hashOfConfig":"117"},{"size":28333,"mtime":1678894031505,"results":"139","hashOfConfig":"117"},{"size":17890,"mtime":1673287698633,"results":"140","hashOfConfig":"117"},{"size":3717,"mtime":1675978830668,"results":"141","hashOfConfig":"117"},{"size":2943,"mtime":1675831904925,"results":"142","hashOfConfig":"117"},{"size":52815,"mtime":1673287698993,"results":"143","hashOfConfig":"117"},{"size":24176,"mtime":1681741024118,"results":"144","hashOfConfig":"117"},{"size":32419,"mtime":1682063774084,"results":"145","hashOfConfig":"117"},{"size":2638,"mtime":1673287698886,"results":"146","hashOfConfig":"117"},{"size":428,"mtime":1689164800265,"results":"147","hashOfConfig":"117"},{"size":24160,"mtime":1675090315973,"results":"148","hashOfConfig":"117"},{"size":27494,"mtime":1687862002735,"results":"149","hashOfConfig":"117"},{"size":2674,"mtime":1673287698980,"results":"150","hashOfConfig":"117"},{"size":16866,"mtime":1673287698936,"results":"151","hashOfConfig":"117"},{"size":13950,"mtime":1684580052505,"results":"152","hashOfConfig":"117"},{"size":47029,"mtime":1676224264711,"results":"153","hashOfConfig":"117"},{"size":6760,"mtime":1673287699028,"results":"154","hashOfConfig":"117"},{"size":57250,"mtime":1688657983708,"results":"155","hashOfConfig":"117"},{"size":40515,"mtime":1673287698917,"results":"156","hashOfConfig":"117"},{"size":22794,"mtime":1673287698893,"results":"157","hashOfConfig":"117"},{"size":6892,"mtime":1673287698695,"results":"158","hashOfConfig":"117"},{"size":10184,"mtime":1673287698692,"results":"159","hashOfConfig":"117"},{"size":6895,"mtime":1673287698694,"results":"160","hashOfConfig":"117"},{"size":71439,"mtime":1687852537742,"results":"161","hashOfConfig":"117"},{"size":63830,"mtime":1688473714220,"results":"162","hashOfConfig":"117"},{"size":16138,"mtime":1683573168112,"results":"163","hashOfConfig":"117"},{"size":9162,"mtime":1675832352194,"results":"164","hashOfConfig":"117"},{"size":5837,"mtime":1687862002925,"results":"165","hashOfConfig":"117"},{"size":14268,"mtime":1687862002612,"results":"166","hashOfConfig":"117"},{"size":5880,"mtime":1687862002673,"results":"167","hashOfConfig":"117"},{"size":13169,"mtime":1687862002802,"results":"168","hashOfConfig":"117"},{"size":14692,"mtime":1687862002864,"results":"169","hashOfConfig":"117"},{"size":12991,"mtime":1687862002553,"results":"170","hashOfConfig":"117"},{"size":8576,"mtime":1681995386671,"results":"171","hashOfConfig":"117"},{"size":71332,"mtime":1688657994732,"results":"172","hashOfConfig":"117"},{"size":2624,"mtime":1677651228161,"results":"173","hashOfConfig":"117"},{"size":1185,"mtime":1673287699017,"results":"174","hashOfConfig":"117"},{"size":1253,"mtime":1673287699023,"results":"175","hashOfConfig":"117"},{"size":1600,"mtime":1673287699022,"results":"176","hashOfConfig":"117"},{"size":1209,"mtime":1673287699015,"results":"177","hashOfConfig":"117"},{"size":25170,"mtime":1673287698875,"results":"178","hashOfConfig":"117"},{"size":45420,"mtime":1673287698896,"results":"179","hashOfConfig":"117"},{"size":37858,"mtime":1687889155740,"results":"180","hashOfConfig":"117"},{"size":49331,"mtime":1682064760233,"results":"181","hashOfConfig":"117"},{"size":9124,"mtime":1675832282030,"results":"182","hashOfConfig":"117"},{"size":17007,"mtime":1673287698689,"results":"183","hashOfConfig":"117"},{"size":20728,"mtime":1673287698900,"results":"184","hashOfConfig":"117"},{"size":17006,"mtime":1673287698684,"results":"185","hashOfConfig":"117"},{"size":17688,"mtime":1673287698677,"results":"186","hashOfConfig":"117"},{"size":10033,"mtime":1673287698699,"results":"187","hashOfConfig":"117"},{"size":9417,"mtime":1677513027857,"results":"188","hashOfConfig":"117"},{"size":87084,"mtime":1687893561680,"results":"189","hashOfConfig":"117"},{"size":102586,"mtime":1688474845676,"results":"190","hashOfConfig":"117"},{"size":11628,"mtime":1673287698873,"results":"191","hashOfConfig":"117"},{"size":47429,"mtime":1686196324159,"results":"192","hashOfConfig":"117"},{"size":8468,"mtime":1673287698688,"results":"193","hashOfConfig":"117"},{"size":24746,"mtime":1687225664059,"results":"194","hashOfConfig":"117"},{"size":698,"mtime":1673287698657,"results":"195","hashOfConfig":"117"},{"size":61403,"mtime":1688472938508,"results":"196","hashOfConfig":"117"},{"size":14566,"mtime":1683573137878,"results":"197","hashOfConfig":"117"},{"size":14237,"mtime":1682061951252,"results":"198","hashOfConfig":"117"},{"size":15109,"mtime":1675045278184,"results":"199","hashOfConfig":"117"},{"size":5675,"mtime":1673287698635,"results":"200","hashOfConfig":"117"},{"size":6051,"mtime":1673287698648,"results":"201","hashOfConfig":"117"},{"size":11941,"mtime":1687897753251,"results":"202","hashOfConfig":"117"},{"size":87069,"mtime":1687893663687,"results":"203","hashOfConfig":"117"},{"size":24452,"mtime":1673287698820,"results":"204","hashOfConfig":"117"},{"size":77413,"mtime":1683572154754,"results":"205","hashOfConfig":"117"},{"size":82624,"mtime":1673287698810,"results":"206","hashOfConfig":"117"},{"size":26219,"mtime":1675089843475,"results":"207","hashOfConfig":"117"},{"size":26399,"mtime":1682326599035,"results":"208","hashOfConfig":"117"},{"size":15939,"mtime":1675089913680,"results":"209","hashOfConfig":"117"},{"size":76810,"mtime":1683572180619,"results":"210","hashOfConfig":"117"},{"size":24674,"mtime":1673287698855,"results":"211","hashOfConfig":"117"},{"size":12418,"mtime":1675672020204,"results":"212","hashOfConfig":"117"},{"size":24968,"mtime":1675090162570,"results":"213","hashOfConfig":"117"},{"size":86572,"mtime":1673287698845,"results":"214","hashOfConfig":"117"},{"size":26610,"mtime":1682332819930,"results":"215","hashOfConfig":"117"},{"size":15787,"mtime":1675090201207,"results":"216","hashOfConfig":"117"},{"size":12141,"mtime":1679758341095,"results":"217","hashOfConfig":"117"},{"size":12989,"mtime":1679448265404,"results":"218","hashOfConfig":"117"},{"size":12491,"mtime":1679448194038,"results":"219","hashOfConfig":"117"},{"size":5854,"mtime":1673287698655,"results":"220","hashOfConfig":"117"},{"size":11970,"mtime":1673287698664,"results":"221","hashOfConfig":"117"},{"size":6119,"mtime":1675523293777,"results":"222","hashOfConfig":"117"},{"size":15819,"mtime":1684754519119,"results":"223","hashOfConfig":"117"},{"size":36399,"mtime":1687864922817,"results":"224","hashOfConfig":"117"},{"size":14360,"mtime":1687862003049,"results":"225","hashOfConfig":"117"},{"size":27000,"mtime":1686015263964,"results":"226","hashOfConfig":"117"},{"size":27055,"mtime":1686015212599,"results":"227","hashOfConfig":"117"},{"size":26996,"mtime":1686015230424,"results":"228","hashOfConfig":"117"},{"size":2849,"mtime":1689164637445,"results":"229","hashOfConfig":"117"},{"size":5845,"mtime":1689164637446,"results":"230","hashOfConfig":"117"},{"size":7227,"mtime":1689164637448,"results":"231","hashOfConfig":"117"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"235"},"fxom1k",{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"235"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"235"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"235"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"235"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"235"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"235"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"273","usedDeprecatedRules":"235"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"276","usedDeprecatedRules":"235"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"279","usedDeprecatedRules":"235"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"282","usedDeprecatedRules":"235"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":5,"source":"285","usedDeprecatedRules":"235"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"235"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"291","usedDeprecatedRules":"235"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"235"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"297","usedDeprecatedRules":"235"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"235"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"303","usedDeprecatedRules":"235"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"235"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":1,"source":"309","usedDeprecatedRules":"235"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"312","usedDeprecatedRules":"235"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"235"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"235"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"323","usedDeprecatedRules":"235"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"235"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"235"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"332","usedDeprecatedRules":"235"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"335","usedDeprecatedRules":"235"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"235"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":17,"source":"345","usedDeprecatedRules":"235"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"235"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"235"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"235"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"235"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"235"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"235"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":3,"source":"366","usedDeprecatedRules":"235"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"369","usedDeprecatedRules":"235"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"372","usedDeprecatedRules":"235"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"235"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"235"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"235"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"235"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"235"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"235"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"393","usedDeprecatedRules":"235"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":17,"source":"396","usedDeprecatedRules":"235"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"342"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"342"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"235"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"235"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"235"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"235"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"423","usedDeprecatedRules":"235"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"426","usedDeprecatedRules":"235"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"430"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"433","usedDeprecatedRules":"235"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"436","usedDeprecatedRules":"235"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"439","usedDeprecatedRules":"235"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"442","usedDeprecatedRules":"235"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"235"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"235"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"451","usedDeprecatedRules":"235"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"235"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"235"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"460","usedDeprecatedRules":"235"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"235"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"466","usedDeprecatedRules":"235"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"469","usedDeprecatedRules":"235"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"235"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"235"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"235"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"235"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"235"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"235"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"235"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"235"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"235"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"235"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"235"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"235"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"235"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"235"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"235"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"235"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"235"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"235"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"235"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"235"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"235"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"235"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"235"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"235"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"235"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"547","usedDeprecatedRules":"235"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":23,"source":"550","usedDeprecatedRules":"235"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"553","usedDeprecatedRules":"235"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"235"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"235"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"235"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"568"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"571"},"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\index.js",["572"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["573","574"],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\App.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js",["575","576","577","578","579","580","581","582","583","584","585"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label, Spinner,Input,Form} from \"reactstrap\";\r\n//import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\n//import {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\n//import {useForm} from \"react-hook-form\";\r\nimport {token, url as baseUrl } from \"../../../api\";\r\n//import PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\n//import { getValue } from \"@syncfusion/ej2-base\";\r\nimport  './patient.css'\r\n// import Form from 'react-bootstrap/Form';\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Label as LabelSui} from 'semantic-ui-react'\r\nimport { Icon} from 'semantic-ui-react'\r\n\r\n\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();  \r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [saving, setSaving] = useState(false);\r\n    const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [errors, setErrors] = useState({})\r\n    //HIV INFORMATION\r\n     const [femaleStatus, setfemaleStatus]= useState(false)\r\n     //const [values, setValues] = useState([]);\r\n     const [objValues, setObjValues] = useState({\r\n            id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",\r\n            dateConfirmedHiv:\"\",sourceOfReferrerId:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",\r\n            dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\",\r\n            householdNumber:\"\", referredToOVCPartner:\"\", dateReferredToOVCPartner:\"\",\r\n            referredFromOVCPartner:\"\", dateReferredFromOVCPartner:\"\",\r\n            careEntryPointOther:\"\",\r\n            personId:\"\",ovcUniqueId:\"\",lipName:\"\"\r\n        });\r\n     const [carePoints, setCarePoints] = useState([]);\r\n     const [sourceReferral, setSourceReferral] = useState([]);\r\n     const [hivStatus, setHivStatus] = useState([]);\r\n     const [enrollSetting, setEnrollSetting] = useState([]);\r\n     const [tbStatus, setTbStatus] = useState([]);\r\n     const [kP, setKP] = useState([]);\r\n     const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n     //set ro show the facility name field if is transfer in \r\n     const [transferIn, setTransferIn] = useState(false);\r\n     // display the OVC number if patient is enrolled into OVC \r\n     const [ovcEnrolled, setOvcEnrolled] = useState(false);\r\n     //Input fields to hidden base on some conditions\r\n     const [hideTargetGroup, setHideTargetGroup]= useState(\"false\");\r\n     const [open, setOpen] = React.useState(false)\r\n     const toggle = () => setOpen(!open);\r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    let patientObj = {};\r\n    patientId = locationState ? locationState.patientId : null;\r\n    patientObj = locationState ? locationState.patientObj : {}; \r\n    const [basicInfo, setBasicInfo]= useState(patientObj)\r\n    //objValues.uniqueId=basicInfo.hospitalNumber\r\n    useEffect(() => {        \r\n        CareEntryPoint();\r\n        SourceReferral();\r\n        HivStatus();\r\n        EnrollmentSetting();\r\n        TBStatus();\r\n        KP();\r\n        PregnancyStatus();\r\n        if(basicInfo.dateOfRegistration < basicInfo.dob){\r\n            alert('Date of registration can not be earlier than date of birth')\r\n        }\r\n        \r\n    }, [patientObj, patientId]);\r\n\r\n    const handleAgeChange = (e) => {\r\n        const ageNumber = e.target.value.replace(/\\D/g, '')\r\n        if (!ageDisabled && ageNumber) {\r\n            if(ageNumber!=='' && ageNumber>=60){\r\n                toggle()\r\n            }\r\n            if(ageNumber <=1){\r\n                setDisabledAgeBaseOnAge(true)\r\n            }else{\r\n                setDisabledAgeBaseOnAge(false)\r\n            }\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add((ageNumber * -1), 'years');\r\n            //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n            basicInfo.dob =moment(dobNew).format(\"YYYY-MM-DD\")\r\n\r\n        }\r\n        setBasicInfo({...basicInfo, age: ageNumber});\r\n    }\r\n    //End of Date of Birth and Age handling \r\n     /*****  Validation  */\r\n     const validate = () => {\r\n        let temp = { ...errors }\r\n\r\n            temp.targetGroupId = objValues.targetGroupId ? \"\" : \"Target group is required.\"\r\n            temp.dateConfirmedHiv = objValues.dateConfirmedHiv ? \"\" : \"date confirm HIV is required.\"\r\n            temp.sourceOfReferrerId = objValues.sourceOfReferrerId ? \"\" : \"Source of referrer is required.\"\r\n            temp.enrollmentSettingId = objValues.enrollmentSettingId ? \"\" : \"Enrollment Setting Number  is required.\"\r\n            temp.tbStatusId = objValues.tbStatusId ? \"\" : \"TB status is required.\"    \r\n            temp.statusAtRegistrationId = objValues.statusAtRegistrationId ? \"\" : \"Status at Registration is required.\"  \r\n            temp.entryPointId = objValues.entryPointId ? \"\" : \"Care Entry Point is required.\" \r\n            temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"Date of Registration is required.\"  \r\n            temp.uniqueId = objValues.uniqueId ? \"\" : \"Unique ID is required.\"\r\n            {(basicInfo.age>9 && basicInfo.sex==='Female') && (temp.pregnancyStatusId = objValues.pregnancyStatusId ? \"\" : \"This field is required.\")}\r\n            \r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Handle Input Change for Basic Infor\r\n    const handleInputChangeBasic = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})        \r\n        setBasicInfo ({...basicInfo,  [e.target.name]: e.target.value}); \r\n        //manupulate inpute fields base on gender/sex \r\n        if(e.target.name==='sexId' && e.target.value==='Female') {\r\n            setfemaleStatus(true)\r\n        }\r\n        if(e.target.name==='firstName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='lastName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='middleName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='ninNumber' && e.target.value!==''){\r\n\r\n            const ninNumberValue = checkNINLimit(e.target.value.replace(/\\D/g, ''))\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: ninNumberValue});\r\n        }\r\n                   \r\n    } \r\n    const checkNINLimit=(e)=>{\r\n        const limit = 11;        \r\n        const acceptedNumber= e.slice(0, limit)\r\n        return  acceptedNumber   \r\n    }\r\n    const alphabetOnly=(value)=>{\r\n        const result = value.replace(/[^a-z]/gi, '');\r\n        return result\r\n    }\r\n   \r\n    const CareEntryPoint =()=>{\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data);\r\n                    setCarePoints(response.data);\r\n                })\r\n                .catch((error) => {\r\n                //console.log(error);\r\n                });            \r\n    }\r\n    //Get list of Source of Referral\r\n    const SourceReferral =()=>{\r\n            axios\r\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setSourceReferral(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const HivStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/HIV_STATUS_ENROL`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setHivStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const EnrollmentSetting =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/ENROLLMENT_SETTING`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setEnrollSetting(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const TBStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setTbStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const KP =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setKP(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const PregnancyStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPregnancyStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const handleInputChange = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})       \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name ===\"entryPointId\" ){\r\n            if(e.target.value===\"21\"){\r\n                setTransferIn(true)\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n                setTransferIn(false)\r\n                objValues.facilityName=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n            if(e.target.value===\"24\"){\r\n                setTransferIn(true)\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n                setTransferIn(false)\r\n                objValues.careEntryPointOther=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n        }                \r\n    }    \r\n    //Handle CheckBox \r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setOvcEnrolled(true)\r\n        }else{\r\n            objValues.ovc_enrolled=\"\"\r\n            objValues.ovcNumber=\"\"\r\n            objValues.householdNumber=\"\"\r\n            objValues.referredToOVCPartner=\"\"\r\n            objValues.dateReferredToOVCPartner=\"\"\r\n            objValues.referredFromOVCPartner=\"\"\r\n            objValues.dateReferredFromOVCPartner=\"\"\r\n            objValues.ovcUniqueId=\"\"\r\n            setOvcEnrolled(false)\r\n        }\r\n    }\r\n    const handleCancel =()=>{\r\n        history.push({ pathname: '/' });\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n       \r\n         if(validate()){\r\n            setSaving(true) \r\n            try {\r\n                objValues.personId = patientId;\r\n                const response = await axios.post(`${baseUrl}hiv/enrollment`, objValues, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                toast.success(\"Patient Register successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                setSaving(false) \r\n                history.push('/');\r\n            } catch (error) { \r\n                setSaving(false)                \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                        toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }else{\r\n                        toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >HIV /</Link> Patient Enrollment</h4></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Link\r\n                        to={{\r\n                            pathname: \"/\",\r\n                            state: 'users'\r\n                        }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-end ms-1\"\r\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            startIcon={<TiArrowBack />}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n                        </Button>\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>{ \"Basic Information\" }</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">Name</Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        value={basicInfo.firstName + \" \"+ basicInfo.surname}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                        //disabled\r\n                                                    />\r\n                                                    {errors.firstName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.firstName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        value={basicInfo.hospitalNumber}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                        //disabled\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            </div>            \r\n\r\n                                            <div className=\"form-group  col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex </Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        name=\"sexId\"\r\n                                                        id=\"sexId\"\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        value={basicInfo.sex}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                            \r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"age\"\r\n                                                        id=\"age\"\r\n                                                        value={basicInfo.age}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={handleAgeChange}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>                                     \r\n                                    </div>\r\n                                </div>\r\n                            {/* </div> */}\r\n\r\n                            </div>\r\n\r\n                            {/* Adding HIV ENROLLEMENT FORM HERE */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder', borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\"  style={{color:'#fff'}}>HIV Enrollment</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"uniqueId\">Unique ID No <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"uniqueId\"\r\n                                        id=\"uniqueId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.uniqueId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.uniqueId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uniqueId}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {(objValues.entryPointId===\"21\" || objValues.statusAtRegistrationId===\"55\") ? (<>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateOfRegistration\"\r\n                                        id=\"dateOfRegistration\"\r\n                                        min=\"01-01-1980\"\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateOfRegistration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.dateOfRegistration !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </>)\r\n                                :\r\n                                (<>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfRegistration\"\r\n                                            id=\"dateOfRegistration\"\r\n                                            min={basicInfo.dateOfRegistration}\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfRegistration}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        />\r\n                                        {errors.dateOfRegistration !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                        ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)\r\n                                }\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"entryPointId\">Care Entry Point <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"entryPointId\"\r\n                                    id=\"entryPointId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.entryPointId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> </option>                  \r\n                                {carePoints.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.entryPointId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.entryPointId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                \r\n                                </div>                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                {objValues.entryPointId===\"21\" ? \r\n                                    (\r\n                                        <FormGroup>\r\n                                        <Label >Facility Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"facilityName\"\r\n                                            id=\"facilityName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.facilityName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    ):\"\"}\r\n                                    {objValues.entryPointId===\"24\" ? \r\n                                    (\r\n                                 \r\n                                        <FormGroup>\r\n                                        <Label >Care Entry Point (Others)</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"careEntryPointOther\"\r\n                                            id=\"careEntryPointOther\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.careEntryPointOther}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                      \r\n                                    ):\"\"}\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >HIV Status at Registration <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"statusAtRegistrationId\"\r\n                                    id=\"statusAtRegistrationId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.statusAtRegistrationId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> Select</option>                  \r\n                                {hivStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Date of Confirmed HIV Test <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateConfirmedHiv\"\r\n                                        id=\"dateConfirmedHiv\"\r\n                                        min={patientObj.dateOfBirth}\r\n                                        max={objValues.dateOfRegistration}\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateConfirmedHiv}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    /> \r\n                                    {errors.dateConfirmedHiv !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                        ) : \"\" } \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Source of Referral <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"sourceOfReferrerId\"\r\n                                        id=\"sourceOfReferrerId\"\r\n                                        value={objValues.sourceOfReferrerId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select </option>                 \r\n                                            {sourceReferral.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.sourceOfReferrerId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.sourceOfReferrerId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {objValues.sourceOfReferrerId===\"870\" || objValues.sourceOfReferrerId===870 ? \r\n                                    (\r\n                                        <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >LIP Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"lipName\"\r\n                                            id=\"lipName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.lipName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    ):\"\"}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Enrollment Setting <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"enrollmentSettingId\"\r\n                                        id=\"enrollmentSettingId\"\r\n                                        value={objValues.enrollmentSettingId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n\r\n                                            {enrollSetting.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.enrollmentSettingId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.enrollmentSettingId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {basicInfo.sex==='Female' && basicInfo.age > 9 && (\r\n                                    <>\r\n                                    <div className = \"form-group mb-3 col-md-6\" >\r\n                                        <FormGroup>\r\n                                        <Label> Pregnancy <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type = \"select\"\r\n                                            name = \"pregnancyStatusId\"\r\n                                            id = \"pregnancyStatusId\"\r\n                                            value = {objValues.pregnancyStatusId}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            onChange = {handleInputChange}                                        \r\n                                        >\r\n                                            <option value = \"\" >Select </option>\r\n                                            {pregnancyStatus.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Input> \r\n                                        {errors.pregnancyStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.pregnancyStatusId}</span>\r\n                                        ) : \"\" }                                                                       \r\n                                    </FormGroup>  \r\n                                    </div>\r\n                                    {objValues.pregnancyStatusId==='73' && (\r\n                                    <>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date of LMP </Label>                                    \r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfLpm\"\r\n                                            id=\"dateOfLpm\"\r\n                                            max={today}\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfLpm}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            required\r\n                                        />  \r\n                                            \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    </>\r\n                                    )}\r\n                                    </>\r\n                                )}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >TB Status <span style={{ color:\"red\"}}> *</span> </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"tbStatusId\"\r\n                                        id=\"tbStatusId\"\r\n                                        value={objValues.tbStatusId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        required\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n                                            {tbStatus.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                    </Input>\r\n                                    {errors.tbStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {hideTargetGroup===\"false\" ? (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Target Group <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"targetGroupId\"\r\n                                        id=\"targetGroupId\"\r\n                                        value={objValues.targetGroupId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>                    \r\n                                        {(basicInfo.sex==='Female' || basicInfo.sex==='female')    && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='MSM').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                            {(basicInfo.sex==='Male' || basicInfo.sex==='male')   && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='FSW').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                    </Input>\r\n                                    {errors.targetGroupId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.targetGroupId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                ) : \"\"}\r\n                                {basicInfo.age <=17 && (\r\n                                <div className=\"form-group mb-3 col-md-3\">\r\n                                    \r\n                                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                                        <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"ovc_enrolled\"\r\n                                        id=\"ovc_enrolled\"                                        \r\n                                        onChange={handleCheckBox}\r\n                                        />\r\n                                        <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"basic_checkbox_1\"\r\n                                        >\r\n                                        Enrolled into OVC?\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                )}\r\n                                {/* <div className=\"form-group mb-3 col-md-3\">\r\n                                    {ovcEnrolled===true ? \r\n                                        (\r\n                                        <FormGroup>\r\n                                        <Label >OVC Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcNumber\"\r\n                                            id=\"ovcNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div> */}\r\n                                \r\n                                {ovcEnrolled===true && \r\n                                (\r\n                                <>        \r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Household Unique Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"householdNumber\"\r\n                                            id=\"householdNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.householdNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >OVC Unique ID</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcUniqueId\"\r\n                                            id=\"ovcUniqueId\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcUniqueId}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                  \r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredToOVCPartner\"\r\n                                            id=\"referredToOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredToOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredToOVCPartner\"\r\n                                            id=\"dateReferredToOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            //max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredToOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredFromOVCPartner\"\r\n                                            id=\"referredFromOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredFromOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                    <h3>OVC Service Provided</h3>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Service Domain</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Avialable Services</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"services\"\r\n                                            id=\"services\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.services}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-2\">\r\n                                    <LabelSui as='a' color='black'  size='tiny'  style={{ marginTop:35}}>\r\n                                        <Icon name='plus' /> Add\r\n                                    </LabelSui> \r\n                                </div>\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </div>\r\n                            {/* END OF HIV ENROLLEMENT FORM */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n\r\n\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                hidden={disabledAgeBaseOnAge}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                )}\r\n                            </MatButton>\r\n    \r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={handleCancel}\r\n                                style={{backgroundColor:'#992E62'}}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\", color:\"#fff\"  }}>Cancel</span>\r\n                            </MatButton>\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n             <Modal.Header >\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Notification!\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure of the Age entered?</h4>\r\n                    \r\n                </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}}>Yes</Button>\r\n            </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["586","587","588","589","590","591","592","593","594","595","596"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label, Spinner,Input,Form} from \"reactstrap\";\r\n//import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\n//import {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\n//import {useForm} from \"react-hook-form\";\r\nimport {token, url as baseUrl } from \"../../../api\";\r\n//import PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\n//import { getValue } from \"@syncfusion/ej2-base\";\r\nimport  './patient.css'\r\n// import Form from 'react-bootstrap/Form';\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Label as LabelSui} from 'semantic-ui-react'\r\nimport { Icon} from 'semantic-ui-react'\r\n\r\n\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();  \r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [saving, setSaving] = useState(false);\r\n    const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [errors, setErrors] = useState({})\r\n    //HIV INFORMATION\r\n     const [femaleStatus, setfemaleStatus]= useState(false)\r\n     //const [values, setValues] = useState([]);\r\n     const [objValues, setObjValues] = useState({\r\n            id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",\r\n            dateConfirmedHiv:\"\",sourceOfReferrerId:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",\r\n            dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\",\r\n            householdNumber:\"\", referredToOVCPartner:\"\", dateReferredToOVCPartner:\"\",\r\n            referredFromOVCPartner:\"\", dateReferredFromOVCPartner:\"\",\r\n            careEntryPointOther:\"\",\r\n            personId:\"\",ovcUniqueId:\"\",lipName:\"\"\r\n        });\r\n     const [carePoints, setCarePoints] = useState([]);\r\n     const [sourceReferral, setSourceReferral] = useState([]);\r\n     const [hivStatus, setHivStatus] = useState([]);\r\n     const [enrollSetting, setEnrollSetting] = useState([]);\r\n     const [tbStatus, setTbStatus] = useState([]);\r\n     const [kP, setKP] = useState([]);\r\n     const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n     //set ro show the facility name field if is transfer in \r\n     const [transferIn, setTransferIn] = useState(false);\r\n     // display the OVC number if patient is enrolled into OVC \r\n     const [ovcEnrolled, setOvcEnrolled] = useState(false);\r\n     //Input fields to hidden base on some conditions\r\n     const [hideTargetGroup, setHideTargetGroup]= useState(\"false\");\r\n     const [open, setOpen] = React.useState(false)\r\n     const toggle = () => setOpen(!open);\r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    let patientObj = {};\r\n    patientId = locationState ? locationState.patientId : null;\r\n    patientObj = locationState ? locationState.patientObj : {}; \r\n    const [basicInfo, setBasicInfo]= useState(patientObj)\r\n    let disabledField =locationState.actionType !=='update' ? true :false\r\n    //objValues.uniqueId=basicInfo.hospitalNumber\r\n    useEffect(() => {        \r\n        CareEntryPoint();\r\n        SourceReferral();\r\n        HivStatus();\r\n        EnrollmentSetting();\r\n        TBStatus();\r\n        KP();\r\n        PatientCurrentObject();\r\n        PregnancyStatus();\r\n        if(basicInfo.dateOfRegistration < basicInfo.dob){\r\n            alert('Date of registration can not be earlier than date of birth')\r\n        }\r\n        \r\n    }, [patientObj, patientId]);\r\n\r\n    //GET  Patients\r\n    async function PatientCurrentObject() {\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data.enrollment)\r\n                setObjValues(response.data.enrollment);\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n\r\n    const handleAgeChange = (e) => {\r\n        const ageNumber = e.target.value.replace(/\\D/g, '')\r\n        if (!ageDisabled && ageNumber) {\r\n            if(ageNumber!=='' && ageNumber>=60){\r\n                toggle()\r\n            }\r\n            if(ageNumber <=1){\r\n                setDisabledAgeBaseOnAge(true)\r\n            }else{\r\n                setDisabledAgeBaseOnAge(false)\r\n            }\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add((ageNumber * -1), 'years');\r\n            //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n            basicInfo.dob =moment(dobNew).format(\"YYYY-MM-DD\")\r\n\r\n        }\r\n        setBasicInfo({...basicInfo, age: ageNumber});\r\n    }\r\n    //End of Date of Birth and Age handling \r\n     /*****  Validation  */\r\n     const validate = () => {\r\n        let temp = { ...errors }\r\n\r\n            temp.targetGroupId = objValues.targetGroupId ? \"\" : \"Target group is required.\"\r\n            temp.dateConfirmedHiv = objValues.dateConfirmedHiv ? \"\" : \"date confirm HIV is required.\"\r\n            temp.sourceOfReferrerId = objValues.sourceOfReferrerId ? \"\" : \"Source of referrer is required.\"\r\n            temp.enrollmentSettingId = objValues.enrollmentSettingId ? \"\" : \"Enrollment Setting Number  is required.\"\r\n            temp.tbStatusId = objValues.tbStatusId ? \"\" : \"TB status is required.\"    \r\n            temp.statusAtRegistrationId = objValues.statusAtRegistrationId ? \"\" : \"Status at Registration is required.\"  \r\n            temp.entryPointId = objValues.entryPointId ? \"\" : \"Care Entry Point is required.\" \r\n            temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"Date of Registration is required.\"  \r\n            temp.uniqueId = objValues.uniqueId ? \"\" : \"Unique ID is required.\"\r\n            {(basicInfo.age>9 && basicInfo.sex==='Female') && (temp.pregnancyStatusId = objValues.pregnancyStatusId ? \"\" : \"This field is required.\")}\r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Handle Input Change for Basic Infor\r\n    const handleInputChangeBasic = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})        \r\n        setBasicInfo ({...basicInfo,  [e.target.name]: e.target.value}); \r\n        //manupulate inpute fields base on gender/sex \r\n        if(e.target.name==='sexId' && e.target.value==='Female') {\r\n            setfemaleStatus(true)\r\n        }\r\n        if(e.target.name==='firstName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='lastName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='middleName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='ninNumber' && e.target.value!==''){\r\n\r\n            const ninNumberValue = checkNINLimit(e.target.value.replace(/\\D/g, ''))\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: ninNumberValue});\r\n        }\r\n                   \r\n    } \r\n    \r\n    const checkNINLimit=(e)=>{\r\n        const limit = 11;        \r\n        const acceptedNumber= e.slice(0, limit)\r\n        return  acceptedNumber   \r\n    }\r\n    const alphabetOnly=(value)=>{\r\n        const result = value.replace(/[^a-z]/gi, '');\r\n        return result\r\n    }\r\n   \r\n    const CareEntryPoint =()=>{\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data);\r\n                    setCarePoints(response.data);\r\n                })\r\n                .catch((error) => {\r\n                //console.log(error);\r\n                });            \r\n    }\r\n    //Get list of Source of Referral\r\n    const SourceReferral =()=>{\r\n            axios\r\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setSourceReferral(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const HivStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/HIV_STATUS_ENROL`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setHivStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const EnrollmentSetting =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/ENROLLMENT_SETTING`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setEnrollSetting(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const TBStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setTbStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const KP =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setKP(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const PregnancyStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPregnancyStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const handleInputChange = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})       \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name ===\"entryPointId\" ){\r\n            if(e.target.value===\"21\"){\r\n                setTransferIn(true)\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n                setTransferIn(false)\r\n                objValues.facilityName=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n            if(e.target.value===\"24\"){\r\n                setTransferIn(true)\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n                setTransferIn(false)\r\n                objValues.careEntryPointOther=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n        }              \r\n    }    \r\n    \r\n\r\n    //Handle CheckBox \r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setOvcEnrolled(true)\r\n        }else{\r\n            objValues.ovc_enrolled=\"\"\r\n            objValues.ovcNumber=\"\"\r\n            objValues.householdNumber=\"\"\r\n            objValues.referredToOVCPartner=\"\"\r\n            objValues.dateReferredToOVCPartner=\"\"\r\n            objValues.referredFromOVCPartner=\"\"\r\n            objValues.dateReferredFromOVCPartner=\"\"\r\n            objValues.ovcUniqueId=\"\"\r\n            setOvcEnrolled(false)\r\n        }\r\n    }\r\n    const handleCancel =()=>{\r\n        history.push({\r\n            pathname: '/patient-history',\r\n            state: { patientObj: patientObj }\r\n        });\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n\r\n         if(validate()){\r\n            setSaving(true)\r\n            try {\r\n\r\n                objValues.personId = patientId;\r\n                const response = await axios.put(`${baseUrl}hiv/enrollment/${patientObj.enrollmentId}`, objValues, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                toast.success(\"Patient Enrollment Updated successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                setSaving(false)\r\n                history.push({\r\n                    pathname: '/patient-history',\r\n                    state: { patientObj: patientObj }\r\n                });\r\n            } catch (error) {   \r\n                setSaving(false)             \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                        toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }else{\r\n                        toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >HIV /</Link> Patient Enrollment</h4></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Link\r\n                        to={{\r\n                            pathname: \"/patient-history\",\r\n                            state: { patientObj: patientObj }\r\n                        }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-end ms-1\"\r\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            startIcon={<TiArrowBack />}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n                        </Button>\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>{ \"Basic Information\" }</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">Name</Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        value={basicInfo.firstName + \" \"+ basicInfo.surname}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                        //disabled\r\n                                                    />\r\n                                                    {errors.firstName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.firstName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        value={basicInfo.hospitalNumber}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                        //disabled\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            </div>            \r\n\r\n                                            <div className=\"form-group  col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex </Label>\r\n                                                    <Input\r\n                                                            className=\"form-control\"\r\n                                                            name=\"sexId\"\r\n                                                            id=\"sexId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.sex}\r\n                                                            style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                            \r\n                                                        />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"age\"\r\n                                                        id=\"age\"\r\n                                                        value={basicInfo.age}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={handleAgeChange}\r\n                                                        style={{border: 'none', backgroundColor: 'transparent', outline:'none'}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>                                     \r\n                                    </div>\r\n                                </div>\r\n                            {/* </div> */}\r\n\r\n                            </div>\r\n\r\n                            {/* Adding HIV ENROLLEMENT FORM HERE */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder', borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\"  style={{color:'#fff'}}>HIV Enrollment</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"uniqueId\">Unique ID No <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"uniqueId\"\r\n                                        id=\"uniqueId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.uniqueId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.uniqueId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uniqueId}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {(objValues.entryPointId===\"21\" || objValues.statusAtRegistrationId===\"55\") ? (<>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateOfRegistration\"\r\n                                        id=\"dateOfRegistration\"\r\n                                        min=\"01-01-1980\"\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateOfRegistration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.dateOfRegistration !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </>)\r\n                                :\r\n                                (<>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfRegistration\"\r\n                                            id=\"dateOfRegistration\"\r\n                                            min={basicInfo.dateOfRegistration}\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfRegistration}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        />\r\n                                        {errors.dateOfRegistration !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                        ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)\r\n                                }\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"entryPointId\">Care Entry Point <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"entryPointId\"\r\n                                    id=\"entryPointId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.entryPointId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    disabled={disabledField}\r\n                                >\r\n                                <option value=\"\"> </option>                  \r\n                                {carePoints.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.entryPointId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.entryPointId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                \r\n                                </div>                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                {objValues.entryPointId===21 ? \r\n                                    (\r\n                                        <FormGroup>\r\n                                        <Label >Facility Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"facilityName\"\r\n                                            id=\"facilityName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.facilityName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    ):\"\"}\r\n                                    {objValues.entryPointId===24 ? \r\n                                    (\r\n                                 \r\n                                        <FormGroup>\r\n                                        <Label >Care Entry Point (Others)</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"careEntryPointOther\"\r\n                                            id=\"careEntryPointOther\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.careEntryPointOther}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                      \r\n                                    ):\"\"}\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >HIV Status at Registration <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"statusAtRegistrationId\"\r\n                                    id=\"statusAtRegistrationId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.statusAtRegistrationId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    disabled={disabledField}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> Select</option>                  \r\n                                {hivStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Date of Confirmed HIV Test <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateConfirmedHiv\"\r\n                                        id=\"dateConfirmedHiv\"\r\n                                        min={basicInfo.dob}\r\n                                        max={objValues.dateOfRegistration}\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateConfirmedHiv}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled={disabledField}\r\n                                        \r\n                                    /> \r\n                                    {errors.dateConfirmedHiv !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                        ) : \"\" } \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Source of Referral <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"sourceOfReferrerId\"\r\n                                        id=\"sourceOfReferrerId\"\r\n                                        value={objValues.sourceOfReferrerId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select </option>                 \r\n                                            {sourceReferral.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.sourceOfReferrerId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.sourceOfReferrerId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {objValues.sourceOfReferrerId===\"870\" || objValues.sourceOfReferrerId===870 ? \r\n                                    (\r\n                                        <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >LIP Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"lipName\"\r\n                                            id=\"lipName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.lipName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    ):\"\"}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Enrollment Setting <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"enrollmentSettingId\"\r\n                                        id=\"enrollmentSettingId\"\r\n                                        value={objValues.enrollmentSettingId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        onChange={handleInputChange}\r\n                                        disabled={disabledField}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n\r\n                                            {enrollSetting.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.enrollmentSettingId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.enrollmentSettingId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {((basicInfo.sexId===377 || basicInfo.sex==='Female' || basicInfo.sex==='FEMALE' || basicInfo.sex==='female') && basicInfo.age > 9) && (\r\n                                    <>\r\n                                   \r\n                                    <div className = \"form-group mb-3 col-md-6\" >\r\n                                        <FormGroup>\r\n                                        <Label> Pregnancy <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type = \"select\"\r\n                                            name = \"pregnancyStatusId\"\r\n                                            id = \"pregnancyStatusId\"\r\n                                            value = {objValues.pregnancyStatusId}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            onChange = {handleInputChange}  \r\n                                            disabled={disabledField}                                      \r\n                                        >\r\n                                            < option value = \"\" >Select </option>\r\n                                            {pregnancyStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.pregnancyStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.pregnancyStatusId}</span>\r\n                                        ) : \"\" }                                                                        \r\n                                    </FormGroup>  \r\n                                    </div>\r\n                                    {objValues.pregnancyStatusId===73 && (\r\n                                    <>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date of LMP </Label>                                    \r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfLpm\"\r\n                                            id=\"dateOfLpm\"\r\n                                            max={today}\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfLpm}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            disabled={disabledField}\r\n                                        />  \r\n                                            \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    </>\r\n                                    )}\r\n                                    </>\r\n                                )}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >TB Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"tbStatusId\"\r\n                                        id=\"tbStatusId\"\r\n                                        value={objValues.tbStatusId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled={disabledField}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n                                            {tbStatus.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                    </Input>\r\n                                    {errors.tbStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {hideTargetGroup===\"false\" ? (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Target Group <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"targetGroupId\"\r\n                                        id=\"targetGroupId\"\r\n                                        value={objValues.targetGroupId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled={disabledField}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>                    \r\n                                        {(basicInfo.sex==='Female' || basicInfo.sex==='female')    && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='FSW').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                            {(basicInfo.sex==='Male' || basicInfo.sex==='male')   && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='MSM').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                    </Input>\r\n                                    {errors.targetGroupId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.targetGroupId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                ) : \"\"}\r\n                                {basicInfo.age <=14 && (\r\n                                <div className=\"form-group mb-3 col-md-3\">\r\n                                    \r\n                                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                                        <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"ovc_enrolled\"\r\n                                        id=\"ovc_enrolled\"                                        \r\n                                        onChange={handleCheckBox}\r\n                                        disabled={disabledField}\r\n                                        />\r\n                                        <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"basic_checkbox_1\"\r\n                                        >\r\n                                        Enrolled into OVC?\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                )}\r\n                                {/* <div className=\"form-group mb-3 col-md-3\">\r\n                                    {ovcEnrolled===true ? \r\n                                        (\r\n                                        <FormGroup>\r\n                                        <Label >OVC Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcNumber\"\r\n                                            id=\"ovcNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div> */}\r\n                                \r\n                                {ovcEnrolled===true && \r\n                                (\r\n                                <>        \r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Household Unique Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"householdNumber\"\r\n                                            id=\"householdNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.householdNumber}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >OVC Unique ID</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcUniqueId\"\r\n                                            id=\"ovcUniqueId\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcUniqueId}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                  \r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredToOVCPartner\"\r\n                                            id=\"referredToOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredToOVCPartner}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredToOVCPartner\"\r\n                                            id=\"dateReferredToOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredToOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            disabled={disabledField}\r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredFromOVCPartner\"\r\n                                            id=\"referredFromOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredFromOVCPartner}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            disabled={disabledField}\r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                    <h3>OVC Service Provided</h3>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Service Domain</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Avialable Services</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"services\"\r\n                                            id=\"services\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.services}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-2\">\r\n                                    <LabelSui as='a' color='black'  size='tiny'  style={{ marginTop:35}}>\r\n                                        <Icon name='plus' /> Add\r\n                                    </LabelSui> \r\n                                </div>\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </div>\r\n                            {/* END OF HIV ENROLLEMENT FORM */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n                            {locationState.actionType ==='update' ?\r\n                            (\r\n                                <>\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        onClick={handleSubmit}\r\n                                        style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        disabled={saving}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n            \r\n                                    \r\n                            </>\r\n                            ):\"\"}\r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={handleCancel}\r\n                                style={{backgroundColor:'#992E62'}}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\r\n                            </MatButton>\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n             <Modal.Header >\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Notification!\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure of the Age entered?</h4>\r\n                    \r\n                </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}}>Yes</Button>\r\n            </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["597"],"import React,{useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Sticky } from \"semantic-ui-react\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './PatientCard'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SubMenu from './SubMenu';\r\nimport RecentHistory from './../History/RecentHistory';\r\nimport ClinicVisit from '../Consultation/Index'\r\nimport Pharmacy from './../Pharmacy/Index';\r\nimport Laboratory from './../Laboratory/index';\r\n\r\nimport EnhancedAdherenceCounseling from '../EnhancedAdherenceCounseling/Index';\r\nimport CervicalCancer from './../CervicalCancer/Index';\r\nimport CervicalCancerUpdate from './../CervicalCancer/ViewPage';\r\nimport ClientStatusUpdate from './../ClientStatusUpdate/ClientStatusUpdate'\r\n//import AdultClinicEvaluationFrom from '../InitailClinicEvaluation/index__'\r\nimport AdultClinicEvaluationForm from '../InitailClinicEvaluation/Adult/Index'\r\nimport ViewAdultClinicEvaluationForm from '../InitailClinicEvaluation/ViewAdultHistory/Index'\r\n//import ChildClinicEvaluationForm from '../InitailClinicEvaluation/ChildClinicEvaluationForm'\r\nimport MentalHealthScreening from '../MentalHealthScreening/index'\r\nimport LabHistory from './../Laboratory/LabHistory'\r\nimport PatientHistory from './../History/PatientHistory'\r\nimport ArtCommencement from './../ArtCommencement/ArtCommencement'\r\nimport ArtCommencementPage from './../ArtCommencement/ArtCommencementPage'\r\n//History of patient\r\nimport ViewMentalHealthScreening from './../MentalHealthScreening/ViewMhs'\r\n//import ViewAdultClinicEvaluationFrom from './../InitailClinicEvaluation/ViewAdultClinicEvaluationFrom'\r\nimport ViewArtCommencement from './../ArtCommencement/ViewArtCommencement'\r\nimport FirstEac from './../EnhancedAdherenceCounseling/ViewEAC/FirstEac'\r\nimport SecondEac from './../EnhancedAdherenceCounseling/ViewEAC/SecondEac'\r\nimport ThirdEac from './../EnhancedAdherenceCounseling/ViewEAC/ThirdEac'\r\nimport ViewLaboratory from './../Laboratory/ViewLaboratory'\r\nimport PharmacyRefillViewUpdate from './../Pharmacy/PharmacyRefillViewUpdate'\r\nimport Biometrics from './Biometric'\r\nimport TrackingForm from './../TrackingForm/Index'\r\nimport TrackingFormUpdate from './../TrackingForm/ViewUpdate'\r\nimport FirstEacPage from './../EnhancedAdherenceCounseling/FirstEAC'\r\nimport EACOUTCOME from '../EnhancedAdherenceCounseling/EacOutCome'\r\nimport EACSESSION from './../EnhancedAdherenceCounseling/SessionList'\r\nimport EACSESSIONUPDATE from './../EnhancedAdherenceCounseling/ViewUpdateEACSessions'\r\nimport NEWEACSESSION from './../EnhancedAdherenceCounseling/NewSessions'\r\nimport ChronicCare from './../ChronicCare/Index'\r\nimport LabOrderResult from './../Laboratory/LabOrderResult/index'\r\nimport ViralLoadOrderResult from './../Laboratory/ViralLoadOrderResult/index'\r\nimport IntensiveFollowUpUpdate from './../IntensiveFollowUp/ViewUpdate'\r\nimport IntensiveFollowUp from './../IntensiveFollowUp/Index'\r\nimport TransferForm from './../TransferForm/Index'\r\nimport ViewUpdateLabOrderResult from './../Laboratory/LabOrderResult/UpdateLabOrderResult'\r\nimport UpdateViewViralLoadOrderResult from './../Laboratory/ViralLoadOrderResult/UpdateViewViralLoadOrderResult'\r\nimport OtzServiceForm from './../Otz/ServiceForm'\r\nimport OtzPeadiatricDisclosureChecklist from './../Otz/PeadiatricDisclosureChecklist'\r\nimport OtzRegister from './../Otz/Register'\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction PatientCard(props) {\r\n    let history = useHistory();\r\n    const [art, setArt] = useState(false);\r\n    const [activeContent, setActiveContent] = useState({route:\"recent-history\", id:\"\", activeTab:\"home\", actionType:\"create\", obj:{}});\r\n    const { classes } = props;\r\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {}\r\n    const [patientObj1, setPatientObj1] = useState(null);\r\n    useEffect(() => {\r\n      PatientCurrentObject();\r\n      //CheckBiometric();\r\n    }, []);\r\n  \r\n      ///GET Patient\r\n      const PatientCurrentObject=() =>{\r\n          axios\r\n              .get(`${baseUrl}hiv/patient/${patientObj.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n              )\r\n              .then((response) => {\r\n                setPatientObj1(response.data);\r\n              })\r\n              .catch((error) => {  \r\n              });        \r\n      }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >HIV /</Link> Patient Dashboard</h4></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n      <Card >\r\n        <CardContent>\r\n            <PatientCardDetail patientObj={patientObj} setArt={setArt} setActiveContent={setActiveContent} patientObj1={patientObj1}/>\r\n            <Sticky>           \r\n            <SubMenu patientObj={patientObj} art={art} setActiveContent={setActiveContent}/>\r\n            </Sticky>\r\n            <br/>\r\n          {activeContent.route==='recent-history' &&(<RecentHistory patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='biometrics' &&(<Biometrics patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='consultation' &&( <ClinicVisit patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          {/* {activeContent==='child-consultation' &&( <ChildConsultation patientObj={patientObj} setActiveContent={setActiveContent}/>)} */}\r\n          {activeContent.route==='pharmacy' &&( <Pharmacy patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          {activeContent.route==='laboratory' &&( <Laboratory patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          \r\n          {activeContent.route==='counseling' &&( <EnhancedAdherenceCounseling patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='cervical-cancer' &&( <CervicalCancer patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='cervical-cancer-update' &&( <CervicalCancerUpdate patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='status-update' &&( <ClientStatusUpdate patientObj={patientObj} setActiveContent={setActiveContent}/>)}\r\n          {activeContent.route==='adult-evaluation' &&( <AdultClinicEvaluationForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {/* {activeContent.route==='child-evaluation' &&( <ChildClinicEvaluationForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)} */}\r\n          {activeContent.route==='mhs' &&( <MentalHealthScreening patientObj={patientObj} setActiveContent={setActiveContent}/>)}\r\n          {activeContent.route==='lab-history' &&( <LabHistory patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} />)}\r\n          {activeContent.route==='patient-history' &&( <PatientHistory patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='art-commencement' &&( <ArtCommencement patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='art-commencementPage' &&( <ArtCommencementPage patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {/* History Pages */}\r\n          {activeContent.route==='mental-health-view' &&( <ViewMentalHealthScreening patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='adult-clinic-eveluation-view' &&( <ViewAdultClinicEvaluationForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='art-commencement-view' &&( <ViewArtCommencement patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='first-eac-history' &&( <FirstEac patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='second-eac-history' &&( <SecondEac patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='completed-eac-history' &&( <ThirdEac patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='lab-view' &&( <ViewLaboratory patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='pharmacy-update' &&( <PharmacyRefillViewUpdate patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          {activeContent.route==='tracking-form' &&( <TrackingForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          {activeContent.route==='client-tracker' &&( <TrackingFormUpdate patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          {activeContent.route==='first-eac' &&( <FirstEacPage patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='eac-outcome' &&( <EACOUTCOME patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='eac-session' &&( <EACSESSION patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='eac-session-update' &&( <EACSESSIONUPDATE patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='new-eac-session' &&( <NEWEACSESSION patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='chronic-care' &&( <ChronicCare patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='laboratoryOrderResult' &&( <LabOrderResult patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='laboratoryViralLoadOrderResult' &&( <ViralLoadOrderResult patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='intensive-followup' &&( <IntensiveFollowUp patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='intensive-follow-up-update' &&( <IntensiveFollowUpUpdate patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='transfer-form' &&( <TransferForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent} PatientCurrentObject={PatientCurrentObject}/>)}\r\n          \r\n          {activeContent.route==='lab-view-viral-load-order-result' &&( <UpdateViewViralLoadOrderResult patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='lab-view-order-result' &&( <ViewUpdateLabOrderResult patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n\r\n          {activeContent.route==='otz-service-form' &&( <OtzServiceForm patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='otz-register' &&( <OtzRegister patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n          {activeContent.route==='otz-peadiatric-disclosure-checklist' &&( <OtzPeadiatricDisclosureChecklist patientObj={patientObj} setActiveContent={setActiveContent} activeContent={activeContent}/>)}\r\n\r\n         </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js",["598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label, Spinner,Input,Form} from \"reactstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport  './patient.css'\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Label as LabelSui} from 'semantic-ui-react'\r\nimport { Icon} from 'semantic-ui-react'\r\n\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        //maxWidth: 752,\r\n        //flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    \r\n}));\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    const [basicInfo, setBasicInfo]= useState(\r\n            {\r\n                active: true,\r\n                streetAddress:\"\",\r\n                address: [],\r\n                contact: [],\r\n                contactPoint: [],\r\n                dateOfBirth: \"\",\r\n                deceased: false,\r\n                deceasedDateTime: null,\r\n                firstName: \"\",\r\n                genderId: \"\",\r\n                identifier: \"\",\r\n                otherName: \"\",\r\n                maritalStatusId: \"\",\r\n                educationId: \"\",\r\n                employmentStatusId:\"\",\r\n                dateOfRegistration: \"\",\r\n                isDateOfBirthEstimated: null,\r\n                age:\"\",\r\n                phoneNumber:\"\",\r\n                altPhonenumber:\"\",\r\n                dob:\"\",\r\n                countryId:1,\r\n                stateId:\"\",\r\n                district:\"\",\r\n                sexId:\"\",\r\n                ninNumber:\"\"\r\n\r\n            }\r\n    )\r\n    const [relatives, setRelatives]= useState(\r\n                { \r\n                    address:\"\",\r\n                    phone:\"\",\r\n                    firstName: \"\",\r\n                    email: \"\",\r\n                    relationshipId: \"\",\r\n                    lastName: \"\",\r\n                    middleName: \"\"\r\n                }\r\n                \r\n        )\r\n\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [contacts, setContacts] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [showRelative, setShowRelative] = useState(false);\r\n    //const [editRelative, setEditRelative] = useState(null);\r\n    const [genders, setGenders]= useState([]);\r\n    const [maritalStatusOptions, setMaritalStatusOptions]= useState([]);\r\n    const [educationOptions, setEducationOptions]= useState([]);\r\n    const [occupationOptions, setOccupationOptions]= useState([]);\r\n    const [relationshipOptions, setRelationshipOptions]= useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [errors, setErrors] = useState({})\r\n    const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions]= useState([]);\r\n    const [patientDTO, setPatientDTO]= useState({\"person\":\"\", \"hivEnrollment\":\"\"})\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n     //HIV INFORMATION\r\n     const [femaleStatus, setfemaleStatus]= useState(false)\r\n     const [dateValidate, setDateValidate]= useState(false)\r\n     //const [values, setValues] = useState([]);\r\n     const [objValues, setObjValues] = useState(\r\n        {id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",\r\n        dateConfirmedHiv:\"\",sourceOfReferrerId:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",dateOfLpm:\"\",\r\n        tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\",\r\n        householdNumber:\"\", referredToOVCPartner:\"\", dateReferredToOVCPartner:\"\",\r\n        referredFromOVCPartner:\"\", dateReferredFromOVCPartner:\"\",\r\n        careEntryPointOther:\"\",\r\n        ovcUniqueId:\"\",lipName:\"\"\r\n        });\r\n     const [carePoints, setCarePoints] = useState([]);\r\n     const [sourceReferral, setSourceReferral] = useState([]);\r\n     const [hivStatus, setHivStatus] = useState([]);\r\n     const [enrollSetting, setEnrollSetting] = useState([]);\r\n     const [tbStatus, setTbStatus] = useState([]);\r\n     const [kP, setKP] = useState([]);\r\n     const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n     //set ro show the facility name field if is transfer in \r\n     const [transferIn, setTransferIn] = useState(false);\r\n     // display the OVC number if patient is enrolled into OVC \r\n     const [ovcEnrolled, setOvcEnrolled] = useState(false);\r\n     //Input fields to hidden base on some conditions\r\n     const [hideTargetGroup, setHideTargetGroup]= useState(\"false\");\r\n     //status for hospital Number \r\n     const [hospitalNumStatus, setHospitalNumStatus]= useState(false);\r\n     const [hospitalNumStatus2, setHospitalNumStatus2]= useState(false);\r\n     const [open, setOpen] = React.useState(false)\r\n     const toggle = () => setOpen(!open);\r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    patientId = locationState ? locationState.patientId : null;\r\n\r\n    useEffect(() => { \r\n        loadGenders();\r\n        loadMaritalStatus();\r\n        loadEducation();\r\n        loadOccupation();\r\n        loadRelationships();\r\n        loadTopLevelCountry();        \r\n        CareEntryPoint();\r\n        SourceReferral();\r\n        HivStatus();\r\n        EnrollmentSetting();\r\n        TBStatus();\r\n        KP();\r\n        PregnancyStatus();\r\n        GetCountry();\r\n        setStateByCountryId()\r\n        if(basicInfo.dateOfRegistration < basicInfo.dob){\r\n            toast.error('Date of registration can not be earlier than date of birth')\r\n        }\r\n          \r\n    }, [basicInfo.dateOfRegistration ]);\r\n\r\n    const loadGenders = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setGenders(response.data.sort());\r\n        } catch (e) {\r\n            \r\n        }\r\n    }, []);\r\n    const loadMaritalStatus = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setMaritalStatusOptions(response.data.sort());\r\n        } catch (e) {\r\n        }\r\n    }, []);\r\n    const loadEducation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/EDUCATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setEducationOptions(response.data.sort());\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const loadOccupation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/OCCUPATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setOccupationOptions(response.data.sort());\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const loadRelationships = useCallback(async () => {\r\n      try {\r\n          const response = await axios.get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n          setRelationshipOptions(response.data.sort());\r\n      } catch (e) {\r\n      }\r\n    }, []);\r\n    const loadTopLevelCountry = useCallback(async () => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/0`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        settopLevelUnitCountryOptions(response.data.sort());\r\n    }, []);\r\n    const loadOrganisationUnitsByParentId = async (parentId) => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/${parentId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        return response.data;\r\n    };\r\n\r\n    //Country List\r\n      const GetCountry =()=>{\r\n        axios\r\n        .get(`${baseUrl}organisation-units/parent-organisation-units/0`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            \r\n            setCountries(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });        \r\n    }\r\n     //Get States from selected country\r\n     const getStates = e => {\r\n        const getCountryId =e.target.value;\r\n            setStateByCountryId(1); \r\n            setBasicInfo({ ...basicInfo, countryId: getCountryId });\r\n    };\r\n    //Get list of State\r\n    function setStateByCountryId() {\r\n        axios\r\n        .get(`${baseUrl}organisation-units/parent-organisation-units/1`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setStates(response.data.sort());\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });  \r\n    }   \r\n     //fetch province\r\n     const getProvinces = e => {\r\n            const stateId = e.target.value;\r\n            setBasicInfo({ ...basicInfo, stateId: e.target.value });\r\n            axios\r\n            .get(`${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setProvinces(response.data.sort());\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });  \r\n    };\r\n    //Date of Birth and Age handle \r\n    const handleDobChange = (e) => {\r\n        if (e.target.value) {\r\n            const today = new Date();\r\n            const birthDate = new Date(e.target.value);\r\n            let age_now = today.getFullYear() - birthDate.getFullYear();\r\n            const m = today.getMonth() - birthDate.getMonth();\r\n                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n                basicInfo.age=age_now\r\n                //setBasicInfo({...basicInfo, age: age_now});        \r\n                } else {\r\n                    setBasicInfo({...basicInfo, age:  \"\"});\r\n                }\r\n                setBasicInfo({...basicInfo, dob: e.target.value});\r\n                if(basicInfo.age!=='' && basicInfo.age>=60){\r\n                    toggle()\r\n                }\r\n           \r\n    }\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value === \"Actual\") {\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value === \"Estimated\") {\r\n            setAgeDisabled(false);\r\n        }\r\n    }\r\n    const handleAgeChange = (e) => {\r\n        const ageNumber = e.target.value.replace(/\\D/g, '')\r\n        if (!ageDisabled && ageNumber) {  \r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add((ageNumber * -1), 'years');\r\n            //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n            basicInfo.dob =moment(dobNew).format(\"YYYY-MM-DD\")\r\n            if(ageNumber!=='' && ageNumber>=60){\r\n                toggle()\r\n            }\r\n\r\n        }\r\n        setBasicInfo({...basicInfo, age: ageNumber});\r\n    }\r\n\r\n    // const handleAgeChange = (e) => {\r\n    //     if (!ageDisabled && e.target.value) {\r\n    //         setValue('age', e.target.value);\r\n    //         const currentDate = new Date();\r\n    //         currentDate.setDate(15);\r\n    //         currentDate.setMonth(5);\r\n    //         const estDob = moment(currentDate.toISOString());\r\n    //         const dob = estDob.add((e.target.value * -1), 'years');\r\n    //         setValue('dob', format(new Date(dob.toDate()), 'yyyy-MM-dd'));\r\n    //         if(calculate_age(format(new Date(dob.toDate()), 'yyyy-MM-dd'))>=60){\r\n    //             toggle()\r\n    //         }\r\n    //     }\r\n    // }\r\n    //End of Date of Birth and Age handling \r\n    //Handle Input Change for Basic Infor\r\n    const handleInputChangeBasic = e => {        \r\n        setBasicInfo ({...basicInfo,  [e.target.name]: e.target.value}); \r\n        //manupulate inpute fields base on gender/sex \r\n        if(e.target.name==='sexId' && e.target.value==='377') {\r\n            setfemaleStatus(true)\r\n\r\n        }else{\r\n            objValues.pregnancyStatusId=\"\"\r\n            objValues.dateOfLpm=\"\"\r\n        } \r\n        if(e.target.name==='firstName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='lastName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='middleName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='ninNumber' && e.target.value!==''){\r\n            const ninNumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, ''))\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: ninNumberValue});\r\n        }\r\n        if(e.target.name==='hospitalNumber' && e.target.value!==''){\r\n        async function getHosiptalNumber() {\r\n            const hosiptalNumber=e.target.value\r\n            const response = await axios.post(`${baseUrl}patient/exist/hospital-number`, hosiptalNumber,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`, 'Content-Type': 'text/plain'} }\r\n                );\r\n            if(response.data!==true){\r\n                setHospitalNumStatus(false)\r\n                errors.hospitalNumber=\"\"\r\n                setObjValues ({...objValues,  uniqueId: e.target.value});\r\n                setHospitalNumStatus2(true)\r\n            }else{\r\n                errors.hospitalNumber=\"\"\r\n                toast.error(\"Error! Hosiptal Number already exist\");\r\n                setHospitalNumStatus(true)\r\n                setHospitalNumStatus2(false)\r\n            }\r\n        }\r\n        getHosiptalNumber();\r\n        } \r\n                \r\n    } \r\n\r\n    //Function to show relatives \r\n    const handleAddRelative = () => {\r\n        setShowRelative(true);\r\n    };\r\n    //Function to cancel the relatives form\r\n    const handleCancelSaveRelationship = () => {\r\n        setShowRelative(false);\r\n    }\r\n    /*****  Validation  Relationship Input*/\r\n    const validateRelatives = () => {\r\n        let temp = { ...errors }\r\n            temp.firstName = relatives.firstName ? \"\" : \"First Name is required\"\r\n            //temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\"\r\n            //temp.phone = relatives.phone ? \"\" : \"Phone Number  is required.\"\r\n            temp.relationshipId = relatives.relationshipId ? \"\" : \"Relationship Type is required.\"  \r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Function to add relatives \r\n    const handleSaveRelationship = (e) => {\r\n        if(validateRelatives()){\r\n            setContacts([...contacts, relatives])\r\n            setRelatives({ \r\n                address:\"\",\r\n                phone:\"\",\r\n                firstName: \"\",\r\n                email: \"\",\r\n                relationshipId: \"\",\r\n                lastName: \"\",\r\n                middleName: \"\"\r\n            })\r\n        }\r\n\r\n    }\r\n    const handleDeleteRelative = (index) => {\r\n        contacts.splice(index, 1);\r\n        setContacts([...contacts]);\r\n    };\r\n    const handleEditRelative = (relative, index) => {\r\n        setRelatives(relative)\r\n        setShowRelative(true);\r\n        contacts.splice(index, 1); \r\n    };   \r\n    const getRelationship = (relationshipId) => {\r\n        const relationship = relationshipOptions.find(obj => obj.id == relationshipId);\r\n        return relationship ? relationship.display : '';\r\n    };\r\n    const handleInputChangeRelatives = e => {        \r\n        setRelatives ({...relatives,  [e.target.name]: e.target.value});               \r\n    }\r\n    /*****  Validation  */\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n            temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\"\r\n            temp.hospitalNumber = basicInfo.hospitalNumber ? \"\" : \"Hospital Number  is required.\"\r\n            //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\r\n            \r\n            temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\"\r\n            temp.sexId = basicInfo.sexId ? \"\" : \"Gender is required.\"\r\n            temp.dateOfRegistration = basicInfo.dateOfRegistration ? \"\" : \"Date of Registration is required.\"\r\n            temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\"\r\n            temp.streetAddress = basicInfo.streetAddress ? \"\" : \"Address is required.\"\r\n            //temp.phoneNumber = basicInfo.phoneNumber ? \"\" : \"Phone Number  is required.\"\r\n            temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\"    \r\n            temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\"  \r\n            temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\" \r\n            //HIV FORM VALIDATION\r\n            temp.targetGroupId = objValues.targetGroupId ? \"\" : \"Target group is required.\"\r\n            {objValues.statusAtRegistrationId!=='55' &&( temp.dateConfirmedHiv = objValues.dateConfirmedHiv ? \"\" : \"date confirm HIV is required.\")}\r\n            temp.sourceOfReferrerId = objValues.sourceOfReferrerId ? \"\" : \"Source of referrer is required.\"\r\n            temp.enrollmentSettingId = objValues.enrollmentSettingId ? \"\" : \"Enrollment Setting Number  is required.\"\r\n            temp.tbStatusId = objValues.tbStatusId ? \"\" : \"TB status is required.\"    \r\n            temp.statusAtRegistrationId = objValues.statusAtRegistrationId ? \"\" : \"Status at Registration is required.\"  \r\n            temp.entryPointId = objValues.entryPointId ? \"\" : \"Care Entry Point is required.\" \r\n            temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"Date of Registration is required.\"  \r\n            temp.uniqueId = objValues.uniqueId ? \"\" : \"Unique ID is required.\"\r\n            {(basicInfo.age>9 && basicInfo.sex==='Female') && (temp.pregnancyStatusId = objValues.pregnancyStatusId ? \"\" : \"This field is required.\")}\r\n            //basicInfo.sexId==='377'\r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n         \r\n         if(validate()){\r\n            setSaving(true)\r\n            let newConatctsInfo=[]\r\n            //Manipulate relatives contact  address:\"\",\r\n            const actualcontacts=contacts && contacts.length>0 && contacts.map((x)=>{\r\n                \r\n                const contactInfo = { \r\n                address: {\r\n                    line: [\r\n                        x.address\r\n                    ],\r\n                },\r\n                contactPoint: {\r\n                    type: \"phone\",\r\n                    value: x.phone\r\n                },\r\n                firstName: x.firstName,\r\n                fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\r\n                relationshipId: x.relationshipId,\r\n                surname: x.lastName,\r\n                otherName: x.middleName\r\n            }\r\n            \r\n            newConatctsInfo.push(contactInfo)\r\n            })\r\n            try {\r\n                const patientForm = {\r\n                    active: true,\r\n                    address: [\r\n                        {\r\n                            \"city\": basicInfo.streetAddress,\r\n                            \"countryId\": basicInfo.countryId,\r\n                            \"district\": basicInfo.district,\r\n                            \"line\": [\r\n                                basicInfo.landmark\r\n                            ],\r\n                            \"organisationUnitId\": 0,\r\n                            \"postalCode\": \"\",\r\n                            \"stateId\": basicInfo.stateId\r\n                        }\r\n                    ],\r\n                    contact: newConatctsInfo,\r\n                    contactPoint: [],\r\n                    dateOfBirth: basicInfo.dob,\r\n                    deceased: false,\r\n                    deceasedDateTime: null,\r\n                    firstName: basicInfo.firstName,\r\n                    genderId: basicInfo.sexId,\r\n                    sexId: basicInfo.sexId,\r\n                    identifier: [\r\n                        {\r\n                            \"assignerId\": 1,\r\n                            \"type\": \"HospitalNumber\",\r\n                            \"value\": basicInfo.hospitalNumber\r\n                        }\r\n                    ],\r\n                    otherName: basicInfo.middleName,\r\n                    maritalStatusId: basicInfo.maritalStatusId,\r\n                    surname: basicInfo.lastName,\r\n                    educationId: basicInfo.educationId,\r\n                    employmentStatusId: basicInfo.employmentStatusId,\r\n                    dateOfRegistration: basicInfo.dateOfRegistration,\r\n                    isDateOfBirthEstimated: basicInfo.dateOfBirth == \"Actual\" ? false : true,\r\n                    ninNumber:basicInfo.ninNumber\r\n                };\r\n                const phone = {\r\n                    \"type\": \"phone\",\r\n                    \"value\": basicInfo.phoneNumber\r\n                };\r\n                if (basicInfo.email) {\r\n                    const email = {\r\n                        \"type\": \"email\",\r\n                        \"value\": basicInfo.email\r\n                    }\r\n                    patientForm.contactPoint.push(email);\r\n                }\r\n                if (basicInfo.altPhonenumber) {\r\n                    const altPhonenumber = {\r\n                        \"type\": \"altphone\",\r\n                        \"value\": basicInfo.altPhonenumber\r\n                    }\r\n                    patientForm.contactPoint.push(altPhonenumber);\r\n                }\r\n                patientForm.contactPoint.push(phone);\r\n                patientForm.id = patientId;\r\n                patientDTO.person=patientForm;\r\n                patientDTO.hivEnrollment=objValues;\r\n                const response = await axios.post(`${baseUrl}hiv/patient`, patientDTO, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                setSaving(false) \r\n                toast.success(\"Patient Register successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                history.push('/');\r\n            } catch (error) { \r\n                setSaving(false)                \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                        toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }else{\r\n                        toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    const alphabetOnly=(value)=>{\r\n        const result = value.replace(/[^a-z]/gi, '');\r\n        return result\r\n    }\r\n   \r\n    const CareEntryPoint =()=>{\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data);\r\n                    setCarePoints(response.data);\r\n                })\r\n                .catch((error) => {\r\n                //console.log(error);\r\n                });            \r\n    }\r\n    //Get list of Source of Referral\r\n    const SourceReferral =()=>{\r\n            axios\r\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setSourceReferral(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const HivStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/HIV_STATUS_ENROL`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setHivStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const EnrollmentSetting =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/ENROLLMENT_SETTING`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setEnrollSetting(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const TBStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setTbStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const KP =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setKP(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const PregnancyStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPregnancyStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const handleInputChange = e => {        \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name ===\"entryPointId\" ){\r\n            if(e.target.value===21){\r\n\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n\r\n                objValues.facilityName=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n            if(e.target.value===24){\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }else{\r\n                objValues.careEntryPointOther=\"\"// make the value empty\r\n                //setObjValues ({...objValues,  ['facilityName']: \"\"});\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            }\r\n        }  \r\n        \r\n    }    \r\n    \r\n    const checkPhoneNumber=(e, inputName)=>{\r\n        const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, ''))\r\n        setRelatives({...relatives, [inputName]: NumberValue})    \r\n    }\r\n    \r\n    const checkNumberLimit=(e)=>{\r\n        const limit = 11;        \r\n        const acceptedNumber= e.slice(0, limit)\r\n        return  acceptedNumber   \r\n    }\r\n    const handleInputChangePhoneNumber=(e, inputName)=>{\r\n        const limit = 11;\r\n        const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, ''))\r\n        setBasicInfo({...basicInfo, [inputName]: NumberValue})\r\n    }\r\n    //Handle CheckBox \r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setOvcEnrolled(true)\r\n        }else{//Clear value\r\n            objValues.ovc_enrolled=\"\"\r\n            objValues.ovcNumber=\"\"\r\n            objValues.householdNumber=\"\"\r\n            objValues.referredToOVCPartner=\"\"\r\n            objValues.dateReferredToOVCPartner=\"\"\r\n            objValues.referredFromOVCPartner=\"\"\r\n            objValues.dateReferredFromOVCPartner=\"\"\r\n            objValues.ovcUniqueId=\"\"\r\n            setOvcEnrolled(false)\r\n        }\r\n    }\r\n    const handleCancel =()=>{\r\n        history.push({ pathname: '/' });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >HIV /</Link> Patient Registration</h4></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n        <Link\r\n                to={{\r\n                    pathname: \"/\",\r\n                    state: 'users'\r\n                }}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className=\" float-end mr-10 pr-10\"\r\n                    style={{backgroundColor:'#014d88',fontWeight:\"bolder\", margingRight:\"-40px\"}}\r\n                    startIcon={<TiArrowBack />}\r\n                >\r\n                    <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n                </Button>\r\n        </Link>\r\n            <br /><br/>\r\n  \r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    \r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>{userDetail===null ? \"Basic Information\" : \"Edit User Information\"}</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"dateOfRegistration\">Date of Registration <span style={{ color:\"red\"}}> *</span> </Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dateOfRegistration\"\r\n                                                        id=\"dateOfRegistration\"\r\n                                                        min=\"1983-12-31\"\r\n                                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                                        value={basicInfo.dateOfRegistration}\r\n                                                        //value={basicInfo.dateOfRegistration===\"\"? moment(new Date()).format(\"YYYY-MM-DD\") : basicInfo.dateOfRegistration}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        \r\n                                                    />\r\n                                                   {errors.dateOfRegistration !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        value={basicInfo.hospitalNumber}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   {errors.hospitalNumber !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.hospitalNumber}</span>\r\n                                                    ) : \"\" }\r\n                                                    {hospitalNumStatus===true ? (\r\n                                                        <span className={classes.error}>{\"Hospital number already exist\"}</span>\r\n                                                    ) : \"\" }\r\n                                                    {/* {hospitalNumStatus2===true ? (\r\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\r\n                                                    ) :\"\"} */}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            {/* <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">EMR Number <span style={{ color:\"red\"}}> *</span> </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"emrNumber\"\r\n                                                        id=\"emrNumber\"\r\n                                                        disabled='true'\r\n                                                        value={1094328}\r\n                                                        //onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div> */}\r\n                                        </div>\r\n                                        \r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">First Names <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        value={basicInfo.firstName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                    {errors.firstName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.firstName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Middle Name</Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"middleName\"\r\n                                                        id=\"middleName\"\r\n                                                        value={basicInfo.middleName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Last Name <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"lastName\"\r\n                                                        id=\"lastName\"\r\n                                                        value={basicInfo.lastName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   {errors.lastName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.lastName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                    <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"sexId\"\r\n                                                            id=\"sexId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.sexId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {genders.map((gender, index) => (\r\n                                                            <option key={gender.id} value={gender.id}>{gender.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {errors.sexId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.sexId}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-2 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date Of Birth</Label>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Actual\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                defaultChecked\r\n                                                                \r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            /> Actual\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Estimated\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                \r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            /> Estimated\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        name=\"dob\"\r\n                                                        min=\"1940-01-01\"\r\n                                                        id=\"dob\"\r\n                                                        max={basicInfo.dateOfRegistration}\r\n                                                        value={basicInfo.dob}\r\n                                                        onChange={handleDobChange}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age</Label>\r\n                                                    <input\r\n                                                        \r\n                                                        type=\"text\"\r\n                                                        name=\"age\"                                                       \r\n                                                        className=\"form-control\"                                                        \r\n                                                        id=\"age\"\r\n                                                        min=\"1\"\r\n                                                        value={basicInfo.age}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={handleAgeChange}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                                {basicInfo.age!=='' && basicInfo.age >=80 ? (\r\n                                                    <span className={classes.error}>Are you sure of the age</span>\r\n                                                ) : \"\" }\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className={\"row\"}>\r\n{/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Marital Status</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"maritalStatusId\"\r\n                                                            id=\"maritalStatusId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.maritalStatusId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {maritalStatusOptions.map((maritalStatusOption, index) => (\r\n                                                                <option key={maritalStatusOption.id} value={maritalStatusOption.id}>{maritalStatusOption.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        \r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Employment Status  <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"employmentStatusId\"\r\n                                                            id=\"employmentStatusId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.employmentStatusId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {occupationOptions.map((occupationOption, index) => (\r\n                                                                <option key={occupationOption.id} value={occupationOption.id}>{occupationOption.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {errors.employmentStatusId !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.employmentStatusId}</span>\r\n                                                        ) : \"\" }\r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Education Level <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"educationId\"\r\n                                                        id=\"educationId\"\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        value={basicInfo.educationId}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select</option>\r\n                                                        {educationOptions.map((educationOption, index) => (\r\n                                                            <option key={educationOption.id} value={educationOption.id}>{educationOption.display}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                    {errors.educationId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.educationId}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"ninNumber\">National Identity Number (NIN)  </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"ninNumber\"\r\n                                                        value={basicInfo.ninNumber}\r\n                                                        id=\"ninNumber\"\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Contact Details</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Phone Number <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                {/* <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    maxLength={5}\r\n                                                    name=\"phoneNumber\"\r\n                                                    id=\"phoneNumber\"\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    value={basicInfo.phoneNumber}\r\n                                                   onChange={(e)=>{checkPhoneNumberBasic(e,'phoneNumber')}}\r\n                                                   \r\n                                                   //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                                                /> */}\r\n                                                <Input\r\n                                                    type=\"text\"\r\n                                                    name=\"phoneNumber\"\r\n                                                    id=\"phoneNumber\"\r\n                                                    onChange={(e)=>{handleInputChangePhoneNumber(e,'phoneNumber')}}\r\n                                                    value={basicInfo.phoneNumber}\r\n                                                    style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    required\r\n                                                />\r\n                                                {errors.phoneNumber !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.phoneNumber}</span>\r\n                                                    ) : \"\" }\r\n                                                {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\r\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\r\n                                                ) : \"\" } */}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Alt. Phone Number</Label>\r\n                                                {/* <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={basicInfo.altPhonenumber}\r\n                                                    masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'altPhonenumber')}}\r\n                                                    \r\n                                                /> */}\r\n                                                 <Input\r\n                                                    type=\"text\"\r\n                                                    name=\"altPhonenumber\"\r\n                                                    id=\"altPhonenumber\"\r\n                                                    onChange={(e)=>{handleInputChangePhoneNumber(e,'altPhonenumber')}}\r\n                                                    value={basicInfo.altPhonenumber}\r\n                                                    style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    required\r\n                                                />\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Email</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    id=\"email\"\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    value={basicInfo.email}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    required\r\n                                                />\r\n                                               \r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Country <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"countryId\"\r\n                                                    id=\"countryId\"\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    value={basicInfo.countryId}\r\n                                                    onChange={getStates}\r\n                                                    disabled\r\n                                                    >\r\n                                                    <option value={\"\"}>Select</option>\r\n                                                    {countries.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.countryId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.countryId}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>State <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"stateId\"\r\n                                                    id=\"stateId\"\r\n                                                    value={basicInfo.stateId}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    onChange={getProvinces}\r\n                                                    >\r\n                                                    <option value=\"\">Select</option>\r\n                                                    {states.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.stateId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.stateId}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Province/District/LGA <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"district\"\r\n                                                    id=\"district\"\r\n                                                    value={basicInfo.district}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    >\r\n                                                    <option value=\"\">Select</option>\r\n                                                    {provinces.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.district !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.district}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Street Address <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"streetAddress\"\r\n                                                    id=\"streetAddress\"\r\n                                                    value={basicInfo.streetAddress}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                   \r\n                                                />\r\n                                               {errors.streetAddress !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.streetAddress}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Landmark</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"landmark\"\r\n                                                    id=\"landmark\"\r\n                                                    value={basicInfo.landmark}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    \r\n                                                />\r\n                                                \r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Relationship / Next Of Kin</h5>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            contacts && contacts.length > 0 && (\r\n                                                <div className=\"col-xl-12 col-lg-12\">\r\n                                                    <table style={{ width: '100%' }} className=\"mb-3\">\r\n                                                        <thead className=\"mb-3\">\r\n                                                        <tr>\r\n                                                            <th>Relationship Type</th>\r\n                                                            <th>Name</th>\r\n                                                            <th>Phone</th>\r\n                                                            <th>Address</th>\r\n                                                            <th>Actions</th>\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody className=\"mb-3\">\r\n                                                        {contacts.map((item, index) => {\r\n                                                            return (\r\n                                                                <tr key={item.index} className=\"mb-3\">\r\n                                                                    <td>{ \r\n                                                                        getRelationship(item.relationshipId) \r\n                                                                    }</td>\r\n                                                                    <td>{ \r\n                                                                        item.firstName + \" \"  + item.middleName + \" \" + item.lastName\r\n                                                                    }</td>\r\n                                                                    <td>{ \r\n                                                                            item.phone\r\n                                                                        }</td>\r\n                                                                    <td>{ \r\n                                                                            item.address\r\n                                                                    }</td>\r\n                                                                    <td>\r\n                                                                        <button type=\"button\"\r\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                                                                onClick={() => handleEditRelative(item, index)}\r\n                                                                                >\r\n                                                                            <FontAwesomeIcon icon=\"edit\" />\r\n                                                                        </button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button\r\n                                                                            type=\"button\"\r\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\r\n                                                                            onClick={(e) => handleDeleteRelative(index)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon=\"trash\" />\r\n                                                                        </button>\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            );\r\n                                                        })}\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        <div className=\"col-xl-12 col-lg-12\">\r\n                                            {\r\n                                                showRelative && (\r\n                                                    <div className=\"card\">\r\n                                                        <div className=\"card-body\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"relationshipType\">Relationship Type <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                                        <select\r\n                                                                            className=\"form-control\"\r\n                                                                            name=\"relationshipId\"\r\n                                                                            id=\"relationshipId\"\r\n                                                                            value={relatives.relationshipId}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            >\r\n                                                                            <option value={\"\"}>Select</option>\r\n                                                                            {relationshipOptions.map((relative, index) => (\r\n                                                                                <option key={relative.id} value={relative.id}>{relative.display}</option>\r\n                                                                            ))}\r\n                                                                        </select>\r\n                                                                        {errors.relationshipId !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.relationshipId}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"cfirstName\">First Name <span style={{ color:\"red\"}}> *</span></Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"firstName\"\r\n                                                                            value={relatives.firstName}\r\n                                                                            id=\"firstName\"\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                        />\r\n                                                                        {errors.firstName !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.firstName}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Middle Name</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"middleName\"\r\n                                                                            id=\"middleName\"\r\n                                                                            value={relatives.middleName}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                        />\r\n                                                                        {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Last Name </Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"lastName\"\r\n                                                                            id=\"lastName\"\r\n                                                                            value={relatives.lastName}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                        />\r\n                                                                        \r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactPhoneNumber\">Phone Number</Label>\r\n                                                                        <Input\r\n                                                                            type=\"text\"\r\n                                                                            name=\"phone\"\r\n                                                                            id=\"phone\"\r\n                                                                            onChange={(e)=>{checkPhoneNumber(e,'phone')}}\r\n                                                                            value={relatives.phone}\r\n                                                                            style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                                            required\r\n                                                                        />\r\n                                                                        {errors.phone !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.phone}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactEmail\">Email</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"email\"\r\n                                                                            name=\"email\"\r\n                                                                            id=\"email\"\r\n                                                                            value={relatives.email}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            required\r\n                                                                        />\r\n                                                                        {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactAddress\">Address</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"address\"\r\n                                                                            id=\"address\"\r\n                                                                            \r\n                                                                            value={relatives.address}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                        />\r\n                                                                        {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-1\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleSaveRelationship}\r\n                                                                    >\r\n                                                                        Add\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"col-1\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleCancelSaveRelationship}\r\n                                                                    >\r\n                                                                        Cancel\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\"></div>\r\n                                        <MatButton\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={handleAddRelative}\r\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        >\r\n                                            Add a Relative/Next Of Kin\r\n                                        </MatButton>\r\n                                    {/* </div> */}\r\n                                </div>\r\n                            </div>\r\n                            {/* Adding HIV ENROLLEMENT FORM HERE */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder', borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\"  style={{color:'#fff'}}>HIV Enrollment</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"uniqueId\">Unique ID No <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"uniqueId\"\r\n                                        id=\"uniqueId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.uniqueId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.uniqueId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uniqueId}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                              \r\n                                {(objValues.entryPointId===\"21\" || objValues.statusAtRegistrationId===\"55\") ? (<>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateOfRegistration\"\r\n                                        id=\"dateOfRegistration\"\r\n                                        min=\"01-01-1980\"\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateOfRegistration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.dateOfRegistration !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </>)\r\n                                :\r\n                                (<>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label for=\"dateOfRegistration\">Date of Enrollment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfRegistration\"\r\n                                            id=\"dateOfRegistration\"\r\n                                            min={basicInfo.dateOfRegistration}\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfRegistration}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        />\r\n                                        {errors.dateOfRegistration !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                        ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)\r\n                                }\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"entryPointId\">Care Entry Point <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"entryPointId\"\r\n                                    id=\"entryPointId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.entryPointId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> </option>                  \r\n                                {carePoints.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.entryPointId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.entryPointId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                \r\n                                </div>\r\n                               \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                {objValues.entryPointId==='21' ? \r\n                                    (\r\n                                        <FormGroup>\r\n                                        <Label >Facility Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"facilityName\"\r\n                                            id=\"facilityName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.facilityName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    ):\"\"}\r\n                                    \r\n                                    {objValues.entryPointId===\"24\" ? \r\n                                    (\r\n                                        <FormGroup>\r\n                                        <Label >Care Entry Point (Others)</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"careEntryPointOther\"\r\n                                            id=\"careEntryPointOther\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.careEntryPointOther}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    ):\"\"}\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >HIV Status at Registration <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"statusAtRegistrationId\"\r\n                                    id=\"statusAtRegistrationId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.statusAtRegistrationId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> Select</option>                  \r\n                                {hivStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n                                {basicInfo.dob!==\"\" && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Date of Confirmed HIV Test <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateConfirmedHiv\"\r\n                                        id=\"dateConfirmedHiv\"\r\n                                        min={basicInfo.dob}\r\n                                        max={objValues.dateOfRegistration }\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateConfirmedHiv}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    /> \r\n                                    {errors.dateConfirmedHiv !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                        ) : \"\" } \r\n                                    </FormGroup>\r\n                                </div>\r\n                                )}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Source of Referral <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"sourceOfReferrerId\"\r\n                                        id=\"sourceOfReferrerId\"\r\n                                        value={objValues.sourceOfReferrerId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select </option>                 \r\n                                            {sourceReferral.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.sourceOfReferrerId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.sourceOfReferrerId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {objValues.sourceOfReferrerId===\"870\"  || objValues.sourceOfReferrerId===870 ? \r\n                                    (\r\n                                        <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >LIP Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"lipName\"\r\n                                            id=\"lipName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.lipName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        </FormGroup>\r\n                                        </div>\r\n                                    ):\"\"}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Enrollment Setting <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"enrollmentSettingId\"\r\n                                        id=\"enrollmentSettingId\"\r\n                                        value={objValues.enrollmentSettingId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n\r\n                                            {enrollSetting.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.enrollmentSettingId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.enrollmentSettingId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >TB Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"tbStatusId\"\r\n                                        id=\"tbStatusId\"\r\n                                        value={objValues.tbStatusId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        required\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n                                            {tbStatus.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                    </Input>\r\n                                    {errors.tbStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {hideTargetGroup===\"false\" ? (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Target Group <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"targetGroupId\"\r\n                                        id=\"targetGroupId\"\r\n                                        value={objValues.targetGroupId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        >\r\n                                        <option value=\"\"> Select</option> \r\n                                            {(basicInfo.sexId===377 || basicInfo.sexId==='377')    && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='MSM').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                            {(basicInfo.sexId===376 || basicInfo.sexId==='376')   && ( <>      \r\n                                                {kP.filter((x)=>x.display!=='FSW').map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </> )}\r\n                                    </Input>\r\n                                    {errors.targetGroupId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.targetGroupId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                ) : \"\"}\r\n                                {(basicInfo.sexId==='377' && basicInfo.age > 9) && (\r\n                                    <>\r\n                                   \r\n                                    <div className = \"form-group mb-3 col-md-6\" >\r\n                                        <FormGroup>\r\n                                        <Label> Pregnancy <span style={{ color:\"red\"}}> *</span></Label>\r\n                                        <Input\r\n                                            type = \"select\"\r\n                                            name = \"pregnancyStatusId\"\r\n                                            id = \"pregnancyStatusId\"\r\n                                            value = {objValues.pregnancyStatusId}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            onChange = {handleInputChange}                                        \r\n                                        >\r\n                                            < option value = \"\" >Select </option>\r\n                                            {pregnancyStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                            ))}\r\n                                        </Input>\r\n                                        {errors.pregnancyStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.pregnancyStatusId}</span>\r\n                                        ) : \"\" }                                                                        \r\n                                    </FormGroup>  \r\n                                    </div>\r\n                                    {objValues.pregnancyStatusId==='73' && (\r\n                                    <>\r\n                                        <div className=\"form-group mb-3 col-md-6\">\r\n                                            <FormGroup>\r\n                                            <Label >Date of LMP </Label>                                    \r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"dateOfLpm\"\r\n                                                id=\"dateOfLpm\"\r\n                                                max={today}\r\n                                                onChange={handleInputChange}\r\n                                                value={objValues.dateOfLpm}\r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                required\r\n                                            />  \r\n                                                \r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </>\r\n                                    )}\r\n                                    </>\r\n                                )}\r\n                                {(basicInfo.age !=='' && basicInfo.age <= 17) && (\r\n                                <div className=\"form-group mb-3 col-md-3\">\r\n                                    \r\n                                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                                        <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"ovc_enrolled\"\r\n                                        id=\"ovc_enrolled\"                                        \r\n                                        onChange={handleCheckBox}\r\n                                        />\r\n                                        <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"basic_checkbox_1\"\r\n                                        >\r\n                                        Enrolled into OVC?\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                )}                                \r\n                                {ovcEnrolled===true && \r\n                                (\r\n                                <>        \r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Household Unique Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"householdNumber\"\r\n                                            id=\"householdNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.householdNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >OVC Unique ID</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcUniqueId\"\r\n                                            id=\"ovcUniqueId\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcUniqueId}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>                                  \r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredToOVCPartner\"\r\n                                            id=\"referredToOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredToOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredToOVCPartner\"\r\n                                            id=\"dateReferredToOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            //max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredToOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredFromOVCPartner\"\r\n                                            id=\"referredFromOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredFromOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                </>\r\n                                )}\r\n                                \r\n                            </div>\r\n                            </div>\r\n                            </div>\r\n                            {/* END OF HIV ENROLLEMENT FORM */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n\r\n\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                onClick={handleSubmit}\r\n                                hidden={disabledAgeBaseOnAge}\r\n                                disabled={saving}\r\n                                style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                )}\r\n                            </MatButton>\r\n    \r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                style={{backgroundColor:'#992E62'}}\r\n                                onClick={handleCancel}\r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\r\n                            </MatButton>\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n             <Modal.Header >\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Notification!\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure of the Age entered?</h4>\r\n                    \r\n                </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}}>Yes</Button>\r\n            </Modal.Footer>\r\n            </Modal> \r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Home.js",["623","624"],"import React, { useState, Fragment } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\r\nimport Dashboard from \"./Patient/PatientList\";\r\n//import VisualisationHome from './Visualisation/Index'\r\nimport LostToFollowUp from \"./Patient/PatientListIit\";\r\nimport ArtPatients from \"./Patient/ArtPatients\";\r\nimport Index from \"./Ovc/Index\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\n//import PageTitle from \"./../layouts/PageTitle\";\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = () => {\r\n  const [key, setKey] = useState(\"home\");\r\n  // tab\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>ART</h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Link to={\"register-patient\"}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\" float-end mb-10\"\r\n          startIcon={<FaUserPlus size=\"10\" />}\r\n          style={{ backgroundColor: \"#014d88\" }}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n        </Button>\r\n      </Link>\r\n      <br />\r\n      <br />\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Tab eventKey=\"home\" title=\"Find Patients\">\r\n                    <Dashboard />\r\n                  </Tab>\r\n                  <Tab eventKey=\"art-patients\" title=\"ART Patients\">\r\n                    <ArtPatients />\r\n                  </Tab>\r\n                  {/* <Tab eventKey=\"list\" title=\"OVC\">\r\n                    <Index />\r\n                  </Tab> */}\r\n                  {/* <Tab eventKey=\"visualization\" title=\"Data Visualisation\">                   \r\n                    <VisualisationHome />\r\n                  </Tab>                     */}\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["625","626","627","628","629","630"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n//import classNames from 'classnames';\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\n//import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\n\r\nimport { Label, Sticky } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\r\n  const patientObject = props.patientObj1;\r\n  //const [patientObject, setPatientObject] = useState(props.patientObj1);\r\n  //console.log(props.patientObj1)\r\n  // useEffect(() => {\r\n  //   PatientCurrentObject();\r\n  //   //CheckBiometric();\r\n  // }, [props.patientObj]);\r\n  //   //GET  Patients\r\n  //   async function PatientCurrentObject() {\r\n  //       axios\r\n  //           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n  //           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n  //           )\r\n  //           .then((response) => {\r\n  //             setPatientObject(response.data);\r\n  //           })\r\n  //           .catch((error) => {\r\n  //           });\r\n  //   }\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n      age_now--;\r\n    }\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //         age_now--;\r\n    //     }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getHospitalNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const hospitalNumber = identifiers.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n  const getPhoneNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const phoneNumber = identifiers.contactPoint.find(obj => obj.type === 'phone');       \r\n    return phoneNumber ? phoneNumber.value : '';\r\n  };\r\n  const getAddress = (identifier) => {\r\n    const identifiers = identifier;\r\n    const address = identifiers.address.find((obj) => obj.city);\r\n    const houseAddress =\r\n      address && address.line[0] !== null ? address.line[0] : \"\";\r\n    const landMark =\r\n      address && address.city && address.city !== null ? address.city : \"\";\r\n    return address ? houseAddress + \" \" + landMark : \"\";\r\n  };\r\n\r\n  return (\r\n    <Sticky>\r\n      <div className={classes.root}>\r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary>\r\n            <Row>\r\n              <Col md={12}>\r\n                <Row className={\"mt-1\"}>\r\n                  {patientObject && patientObject !== null ? (\r\n                    <>\r\n                      <Col md={12} className={classes.root2}>\r\n                        <b\r\n                          style={{\r\n                            fontSize: \"25px\",\r\n                            color: \"rgb(153, 46, 98)\",\r\n                          }}\r\n                        >\r\n                          {patientObject.firstName !== \"\"\r\n                            ? patientObject.firstName\r\n                            : \"\"}{\" \"}\r\n                          {patientObject.surname !== \"\"\r\n                            ? patientObject.surname\r\n                            : \"\"}\r\n                        </b>\r\n                        <Link to={\"/\"}>\r\n                          <ButtonMui\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-end ms-2 mr-2 mt-2\"\r\n                            //startIcon={<FaUserPlus size=\"10\"/>}\r\n                            startIcon={<TiArrowBack />}\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              color: \"#fff\",\r\n                              height: \"35px\",\r\n                            }}\r\n                          >\r\n                            <span style={{ textTransform: \"capitalize\" }}>\r\n                              Back\r\n                            </span>\r\n                          </ButtonMui>\r\n                        </Link>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Patient ID :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {getHospitalNumber(patientObject.identifier)}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          Date Of Birth :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {patientObject.dateOfBirth}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Age :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {calculate_age(\r\n                              moment(patientObject.dateOfBirth).format(\r\n                                \"DD-MM-YYYY\"\r\n                              )\r\n                            )}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Gender :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {patientObject.sex && patientObject.sex !== null\r\n                              ? patientObject.sex\r\n                              : \"\"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Phone Number :\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                          {patientObject.contactPoint!==null ? getPhoneNumber(patientObject.contactPoint) : \"\"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Address :\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {getAddress(patientObject.address)}{\" \"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={12}>\r\n                        <div>\r\n                          <Typography variant=\"caption\">\r\n                            <Label color={\"teal\"} size={\"mini\"}>\r\n                              ART STATUS : {patientObject.currentStatus}\r\n                            </Label>\r\n                          </Typography>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={12}>\r\n                        {/* {biometricStatus===true ? (\r\n                          <> */}\r\n                        <div>\r\n                          <Typography variant=\"caption\">\r\n                            <Label\r\n                              color={\r\n                                patientObject.biometricStatus === true\r\n                                  ? \"green\"\r\n                                  : \"red\"\r\n                              }\r\n                              size={\"mini\"}\r\n                            >\r\n                              Biometric Status\r\n                              <Label.Detail>\r\n                                {patientObject.biometricStatus === true\r\n                                  ? \"Captured\"\r\n                                  : \"Not Captured\"}\r\n                              </Label.Detail>\r\n                            </Label>\r\n                          </Typography>\r\n                        </div>\r\n                        {/* </>\r\n                          )\r\n                          :\r\n                          <>\r\n                              \r\n                          </>\r\n                      } */}\r\n                      </Col>\r\n                    </>\r\n                  ) : (\r\n                    <p>Loading Please wait...</p>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </ExpansionPanelSummary>\r\n        </ExpansionPanel>\r\n      </div>\r\n    </Sticky>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["631","632","633","634","635"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {Dropdown, Menu, Segment, } from \"semantic-ui-react\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n\r\nfunction SubMenu(props) {\r\n    //const classes = useStyles();\r\n    const [activeItem, setActiveItem] = useState('home');\r\n    const patientObj = props.patientObj\r\n    const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\r\n    //const [patientObj, setpatientObj] = useState(patientObjs)\r\n    // let mentalStatus=false\r\n    // let initialEvaluationStatus=false\r\n\r\n    useEffect(() => {\r\n        if(props.patientObj && props.patientObj!==null){\r\n            Observation();\r\n        }\r\n    }, [props.patientObj]);\r\n   \r\n    //Get list \r\n    const Observation =()=>{\r\n        axios\r\n            .get(`${baseUrl}observation/person/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //const observation = response.data\r\n                // const mental= observation.filter((x)=> x.type==='mental health')\r\n                // const evaluation= observation.filter((x)=> x.type==='initial evaluation')\r\n                // if(mental.length > 1){\r\n                //     mentalStatus=true\r\n                // }\r\n                // if(evaluation.length > 1){\r\n                //     initialEvaluationStatus=true\r\n                // }\r\n\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    const loadEAC =(row)=> {\r\n        setActiveItem('eac')\r\n        props.setActiveContent({...props.activeContent, route:'counseling'})\r\n    }\r\n\r\n    const loadPharmacyModal =(row)=> {\r\n        setActiveItem('pharmacy')\r\n        props.setActiveContent({...props.activeContent, route:'pharmacy'})\r\n    }\r\n    const loadLaboratoryOrderResult =(row)=> {\r\n        setActiveItem('lab')\r\n        props.setActiveContent({...props.activeContent, route:'laboratoryOrderResult'})\r\n    }\r\n    const loadLaboratoryViralLoadOrderResult =(row)=> {\r\n        setActiveItem('lab')\r\n        props.setActiveContent({...props.activeContent, route:'laboratoryViralLoadOrderResult'})\r\n    }\r\n    const loadCervicalCancer = (row) =>{\r\n        setActiveItem('cancer')\r\n        props.setActiveContent({...props.activeContent, route:'cervical-cancer'})\r\n    }\r\n   \r\n    const onClickConsultation = (row) =>{ \r\n        setActiveItem('visit')       \r\n        props.setActiveContent({...props.activeContent, route:'consultation'})\r\n    }\r\n    const onClickHome = (row) =>{    \r\n        setActiveItem('home')    \r\n        props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n    }\r\n\r\n    const loadTrackingForm =(row)=> {\r\n        setActiveItem('tracking')\r\n        props.setActiveContent({...props.activeContent, route:'tracking-form'})\r\n    }\r\n    \r\n    const loadMentalHealth = ()=>{\r\n        setActiveItem('health')\r\n        props.setActiveContent({...props.activeContent, route:'mhs'})\r\n    }\r\n    const loadAdultEvaluation =(row)=> {\r\n        setActiveItem('initial')\r\n        props.setActiveContent({...props.activeContent, route:'adult-evaluation'})\r\n\r\n    }\r\n    const loadPatientHistory = ()=>{\r\n        setActiveItem('history')\r\n        props.setActiveContent({...props.activeContent, route:'patient-history'})\r\n    }\r\n    const loadIntensiveForm = ()=>{\r\n        setActiveItem('intensive')\r\n        props.setActiveContent({...props.activeContent, route:'intensive-followup'})\r\n    }\r\n    const loadTransferForm = ()=>{\r\n        setActiveItem('transfer')\r\n        props.setActiveContent({...props.activeContent, route:'transfer-form'})\r\n    }\r\n    const loadArtCommencement = ()=>{\r\n        setActiveItem('art')\r\n        props.setActiveContent({...props.activeContent, route:'art-commencementPage'})\r\n    }\r\n    const loadChronicCare = ()=>{\r\n        setActiveItem('chronic-care')\r\n        props.setActiveContent({...props.activeContent, route:'chronic-care'})\r\n    }\r\n    const loadOtzServiceForm = ()=>{\r\n        setActiveItem('otz-service-form')\r\n        props.setActiveContent({...props.activeContent, route:'otz-service-form'})\r\n    }\r\n    const loadOtzCheckList = ()=>{\r\n        setActiveItem('otz-peadiatric-disclosure-checklist')\r\n        props.setActiveContent({...props.activeContent, route:'otz-peadiatric-disclosure-checklist'})\r\n    }\r\n    const loadOtzRegister = ()=>{\r\n        setActiveItem('otz-register')\r\n        props.setActiveContent({...props.activeContent, route:'otz-register'})\r\n    }\r\n    //\r\n\r\n    return (\r\n         <div>\r\n           {props.patientObj && props.patientObj!==null && (\r\n            <Segment inverted>\r\n         {/*!props.art && patientObj.commenced!==true && patientObj.enrollment.targetGroupId===473) || (!props.art && (patientObj.commenced!==true || patientObj.commenced===true)  && patientObj.mentalHealth!==true) */}\r\n            { (patientObj.commenced===false || patientObj.createBy!==\"Lamis data migration system\" ) && (patientObj.commenced!==true || patientObj.clinicalEvaluation!==true || (patientObj.targetGroupId!==473 ? patientObj.mentalHealth!==true : false ) )\r\n           \r\n                ?\r\n                (\r\n                <Menu size='tiny' color={\"blue\"} inverted pointing >\r\n                    <Menu.Item onClick={() => onClickHome()} name='home' \r\n                    active={activeItem === 'home'} title=\"Home\"> Home</Menu.Item>\r\n                    {!patientObj.clinicalEvaluation  && (<Menu.Item onClick={() => loadAdultEvaluation()} name='initial'\r\n                    active={activeItem === 'initial'} title=\"Initial Evaluation\"> Initial Evaluation</Menu.Item>)}\r\n                    {!patientObj.commenced && (<Menu.Item onClick={() => loadArtCommencement()} name='art'\r\n                    active={activeItem === 'art'}  title=\"Art Commencement\">Art Commencement</Menu.Item>)}\r\n                    { (patientObj.targetGroupId!==null && patientObj.targetGroupId!==\"\" ) && patientObj.targetGroupId!==473 && patientObj.mentalHealth===false  && (<Menu.Item onClick={() => loadMentalHealth(patientObj)} name='health'\r\n                    active={activeItem === 'health'} title=\"Mental Health Screening\">Mental Health Screening</Menu.Item>)}\r\n                    {/* <Menu.Item onClick={() => loadStatusUpdate(patientObj)} disabled>Client Status Update</Menu.Item>                     */}\r\n                    <Menu.Item onClick={() => loadPatientHistory(patientObj)} name='history'\r\n                    active={activeItem === 'history'} title=\"History\">History</Menu.Item>\r\n                </Menu>\r\n                )\r\n               :\r\n               (\r\n                <Menu size='tiny' color={\"black\"} inverted>                    \r\n                    <Menu.Item onClick={() => onClickHome()} disabled={patientCurrentStatus} name='home'\r\n                    active={activeItem === 'home'} title=\"Home\"> Home</Menu.Item>\r\n                     {!patientObj.clinicalEvaluation && patientObj.createBy===\"Lamis data migration system\" && (<Menu.Item onClick={() => loadAdultEvaluation()} name='initial'\r\n                    active={activeItem === 'initial'} title=\"Initial Evaluation\"> Initial Evaluation</Menu.Item>)}\r\n                    <Menu.Item onClick={() => onClickConsultation()} disabled={patientCurrentStatus} name='visit'\r\n                    active={activeItem === 'visit'} title=\"Care Card\">Care Card</Menu.Item>\r\n                    <Menu.Menu position='' name='lab' active={activeItem === 'lab'}>\r\n                    <Dropdown item text='Laboratory'>\r\n                        <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => loadLaboratoryOrderResult()} disabled={patientCurrentStatus} title=\"Laboratory Order & Result\">Laboratory Order & Result</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => loadLaboratoryViralLoadOrderResult()} disabled={patientCurrentStatus} title=\"Viral Load Order & Result\">Viral Load Order & Result</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    </Menu.Menu>\r\n                    <Menu.Item onClick={() => loadPharmacyModal()} disabled={patientCurrentStatus} name='pharmacy'\r\n                    active={activeItem === 'pharmacy'} title=\"Pharmacy\"> Pharmacy</Menu.Item>\r\n                    <Menu.Item onClick={() => loadEAC(patientObj)} disabled={patientCurrentStatus} name='eac'\r\n                    active={activeItem === 'eac'} title=\"EAC\"> EAC</Menu.Item>\r\n                    <Menu.Item onClick={() => loadChronicCare(patientObj)} name='chronic care'\r\n                    active={activeItem === 'chronic-care'}>Chronic Care</Menu.Item>\r\n                    {/* {patientObj.currentStatus && patientObj.currentStatus==='IIT' && (<Menu.Item onClick={() => loadTrackingForm(patientObj)} >Tracking Form</Menu.Item>)} */}\r\n                    {(!patientObj.mentalHealth  && (patientObj.targetGroupId!==null && patientObj.targetGroupId!==473)) && patientObj.createBy===\"Lamis data migration system\" && (<Menu.Item onClick={() => loadMentalHealth(patientObj)} name='health'\r\n                    active={activeItem === 'health'} title=\"Mental Health Screening\">Mental Health Screening</Menu.Item>)}\r\n                   \r\n                    {(props.patientObj.sex==='Female' || props.patientObj.sex==='FEMALE' || props.patientObj.sex==='female') ? \r\n                        (\r\n                            <>\r\n        \r\n                            <Menu.Item onClick={() => loadCervicalCancer(patientObj)} name='cancer'\r\n                            active={activeItem === 'cancer'} title=\"Cervical Cancer\">Cervical Cancer</Menu.Item>\r\n                            </>\r\n                            )\r\n                            :\"\"\r\n                    } \r\n                    <Menu.Menu position='' name='lab' active={activeItem === 'lab'}>\r\n                    <Dropdown item text='Other Forms'>\r\n                        <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => loadTrackingForm(patientObj)} name='tracking'\r\n                            active={activeItem === 'tracking'} title=\"Tracking Form\">Tracking Form\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => loadIntensiveForm(patientObj)} name='intensive'\r\n                            active={activeItem === 'intensive'} title=\"Intensive Follow Up\">Intensive Follow Up\r\n                        </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    {/* <Dropdown item text='OTZ'>\r\n                        <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => loadOtzServiceForm(patientObj)} name='OTZ Service Form'\r\n                            active={activeItem === 'otz-service-form'} title=\"Tracking Form\">OTZ Service Form\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => loadOtzRegister(patientObj)} name='OTZ Register'\r\n                            active={activeItem === 'otz-register'} title=\"OTZ Register\">OTZ Register\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => loadOtzCheckList(patientObj)} name='Peadiatric Disclosure Checklist'\r\n                            active={activeItem === 'otz-peadiatric-disclosure-checklist'} title=\"Peadiatric Disclosure Checklist\">Peadiatric Disclosure Checklist\r\n                        </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown> */}\r\n                    </Menu.Menu> \r\n                    \r\n                    {/* <Menu.Item onClick={() => loadTransferForm(patientObj)} name='transfer'\r\n                    active={activeItem === 'transfer'} title=\"Transfer\">Transfer</Menu.Item> */}\r\n                    <Menu.Item onClick={() => loadPatientHistory(patientObj)} name='history'\r\n                    active={activeItem === 'history'} title=\"History\">History</Menu.Item>\r\n                    \r\n                </Menu>\r\n               )\r\n           }\r\n         </Segment>\r\n         )}              \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default SubMenu;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["636","637","638","639","640","641","642"],"import React, { Fragment, useState, useEffect } from \"react\";\r\n// BS\r\nimport { Dropdown,} from \"react-bootstrap\";\r\n/// Scroll\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n//import { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport {  Card,Accordion } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Button } from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: '100%',\r\n  },\r\n  heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: 'bolder',\r\n  },\r\n}));\r\nconst RecentHistory = (props) => {\r\n  const classes = useStyles();\r\n  const [vitaLoad, setViralLoad]=useState([])\r\n  const [refillList, setRefillList] = useState([])\r\n  const [clinicVisitList, setClinicVisitList] = useState([])\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [loadingRecent, setLoadingRecent] = useState(true)\r\n  const [loadingLab, setLoadingLab] = useState(true)\r\n  const [loadingPharmacy, setLoadingPharmacy] = useState(true)\r\n  const [notToBeUpdated, setNotToBeUpdated] = useState(['eac', 'eac-session', 'client-tracker']);\r\n  let history = useHistory();\r\n  const [open, setOpen] = React.useState(false)\r\n    const [saving, setSaving] = useState(false)\r\n    const [record, setRecord] = useState(null)\r\n     const toggle = () => setOpen(!open);\r\n  const [\r\n    activeAccordionHeaderShadow,\r\n    setActiveAccordionHeaderShadow,\r\n  ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if(props.patientObj && props.patientObj!==null){\r\n      LaboratoryHistory();\r\n      PharmacyList();\r\n      ClinicVisitList();\r\n      RecentActivities();\r\n    }\r\n  }, [props.patientObj]);\r\n\r\n  //Get list of LaboratoryHistory\r\n  const RecentActivities =()=>{\r\n    axios\r\n       .get(`${baseUrl}hiv/patients/${props.patientObj.id}/activities?full=false`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n       )\r\n       .then((response) => {\r\n        setLoadingRecent(false)\r\n          setRecentActivities(response.data)\r\n       })\r\n       .catch((error) => {\r\n        setLoadingRecent(false)\r\n       //console.log(error);\r\n       });\r\n   \r\n  }\r\n  //Get list of LaboratoryHistory\r\n  const LaboratoryHistory =()=>{\r\n    axios\r\n       .get(`${baseUrl}laboratory/rde-all-orders/patients/${props.patientObj.id}`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n       )\r\n       .then((response) => {\r\n        //console.log(response.data)\r\n        setLoadingLab(false)\r\n          //  let LabObject= []\r\n          //       response.data.forEach(function(value, index, array) {\r\n          //           const dataOrders = value.labOrder.tests                    \r\n          //           if(dataOrders[index]) {\r\n          //               dataOrders.forEach(function(value, index, array) {\r\n          //                   LabObject.push(value)\r\n          //               })                       \r\n          //           }                   \r\n          //       });\r\n              setViralLoad(response.data)\r\n       })\r\n       .catch((error) => {\r\n        setLoadingLab(false)\r\n       //console.log(error);\r\n       });\r\n   \r\n  }\r\n   //GET LIST Drug Refill\r\n   const PharmacyList =()=> {\r\n    setLoading(true)\r\n    axios\r\n        .get(`${baseUrl}hiv/art/pharmacy/patient?pageNo=0&pageSize=10&personId=${props.patientObj.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n          //console.log(response.data)\r\n            setLoading(false)\r\n            setLoadingPharmacy(false)\r\n            setRefillList(response.data);                \r\n        })\r\n        .catch((error) => {  \r\n            setLoading(false)  \r\n        });        \r\n  }\r\n   //GET LIST Drug Refill\r\n   const  ClinicVisitList=()=> {\r\n    setLoading(true)\r\n    axios\r\n        .get(`${baseUrl}hiv/art/clinic-visit/person?pageNo=0&pageSize=10&personId=${props.patientObj.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setLoading(false)\r\n            setClinicVisitList(response.data);                \r\n        })\r\n        .catch((error) => {  \r\n            setLoading(false)  \r\n        });        \r\n  }\r\n  const labStatus =(status)=> {\r\n    const orderStatus= parseInt(status)\r\n      if(orderStatus===0){\r\n        return \"timeline-badge info\"\r\n      }else if(orderStatus===1){\r\n        return \"timeline-badge warning\"\r\n      }else if(orderStatus===2){\r\n        return \"timeline-badge success\"\r\n      }else if(orderStatus===3){\r\n        return \"timeline-badge danger\"\r\n      }else if(orderStatus===4){\r\n        return \"timeline-badge primary\"\r\n      }else if(orderStatus===5){\r\n        return \"timeline-badge info\"\r\n      }else {\r\n        return \"timeline-badge secondary\"\r\n        //return \"timeline-badge info\"\r\n      }\r\n  }\r\n  const ActivityName =(name)=> {\r\n      if(name==='HIV Enrollment'){\r\n        return \"HE\"\r\n      }else if(name==='Pharmacy refill'){\r\n        return \"PR\"\r\n      }else if(name==='Clinical evaluation'){\r\n        return \"CE\"\r\n      }else if(name==='Clinic visit follow up'){\r\n        return \"CV\"\r\n      }else if(name==='ART Commencement'){\r\n        return \"AC\"\r\n      }else {\r\n        return \"RA\"\r\n      }\r\n  }\r\n  const regimenName =(regimenObj)=> {\r\n    //console.log(regimenObj)\r\n    let regimenArr = []\r\n    regimenObj && regimenObj.forEach(function (value, index, array) {\r\n      //console.log(value)\r\n        regimenArr.push(value['name'])\r\n    })\r\n    return regimenArr.toString();\r\n  }\r\n  const LoadViewPage =(row,action)=>{\r\n        \r\n    if(row.path==='Mental-health'){        \r\n        props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id, actionType:action})\r\n\r\n    }else if(row.path==='Art-commence'){\r\n        props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id, actionType:action})\r\n\r\n    }else if(row.path==='Clinical-evaluation'){\r\n        props.setActiveContent({...props.activeContent, route:'adult-clinic-eveluation-view', id:row.id, actionType:action})\r\n\r\n    }else if(row.path==='eac1'){\r\n        props.setActiveContent({...props.activeContent, route:'first-eac-history', id:row.id, actionType:action})\r\n    }\r\n    else if(row.path==='eac2'){\r\n        props.setActiveContent({...props.activeContent, route:'second-eac-history', id:row.id, actionType:action})\r\n    }\r\n    else if(row.path==='eac3'){\r\n        props.setActiveContent({...props.activeContent, route:'completed-eac-history', id:row.id, actionType:action})\r\n    }else if(row.path==='hiv-enrollment'){\r\n        history.push({\r\n            pathname: '/update-patient',\r\n            state: { id: row.id, patientObj:props.patientObj, actionType:action }\r\n        });\r\n        //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n    }else if(row.path==='pharmacy'){\r\n        //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n        props.setActiveContent({...props.activeContent, route:'pharmacy-update', id:row.id, activeTab:\"history\", actionType:action, obj:row})\r\n\r\n    }else if(row.path==='Laboratory'){\r\n        props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id, actionType:action})\r\n\r\n    }else if(row.path==='clinic-visit'){\r\n      props.setActiveContent({...props.activeContent, route:'consultation', id:row.id, activeTab:\"history\",actionType:action, })\r\n\r\n  }else if(row.path==='Intensive-follow-up'){\r\n    props.setActiveContent({...props.activeContent, route:'intensive-follow-up-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n\r\n  }else if(row.path==='client-tracker'){\r\n    props.setActiveContent({...props.activeContent, route:'client-tracker', id:row.id, activeTab:\"history\", actionType:action, })\r\n\r\n  }else if(row.path==='eac-session'){\r\n    props.setActiveContent({...props.activeContent, route:'eac-session-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n\r\n  }else if(row.path==='Cervical-cancer'){\r\n    props.setActiveContent({...props.activeContent, route:'cervical-cancer-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n\r\n }else if(row.path==='Chronic-Care'){\r\n  props.setActiveContent({...props.activeContent, route:'chronic-care', id:row.id, activeTab:\"home\", actionType:action, })\r\n\r\n  }else{\r\n\r\n  }\r\n    \r\n}\r\nconst LoadDeletePage =(row)=>{\r\n        \r\n  if(row.path==='Mental-health'){  \r\n    setSaving(true)        \r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}observation/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false) \r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });  \r\n  }else if(row.path==='Art-commence'){\r\n    setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}hiv/art/commencement/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });\r\n\r\n  }else if(row.path==='Clinical-evaluation'){\r\n      setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'adult-clinic-eveluation-view', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}observation/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });\r\n\r\n  }else if(row.path==='eac1'){\r\n      setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'first-eac-history', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}observation/eac/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });  \r\n  }\r\n  else if(row.path==='eac2'){\r\n      setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'second-eac-history', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}observation/eac/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });  \r\n  }\r\n  else if(row.path==='eac3'){\r\n      setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'completed-eac-history', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}observation/eac/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });  \r\n  }else if(row.path==='hiv-enrollment'){\r\n    setSaving(true)  \r\n      axios\r\n      .delete(`${baseUrl}hiv/enrollment/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      });  \r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n  }else if(row.path==='pharmacy'){\r\n    setSaving(true) \r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n    //props.setActiveContent({...props.activeContent, route:'pharmacy', id:row.id, activeTab:\"home\", actionType:\"update\", obj:row})\r\n    axios\r\n    .delete(`${baseUrl}hiv/art/pharmacy/${row.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        RecentActivities()\r\n        toggle()\r\n        setSaving(false) \r\n    })\r\n    .catch((error) => {\r\n        setSaving(false) \r\n        if(error.response && error.response.data){\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else{\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n    }); \r\n\r\n  }else if(row.path==='clinic-visit'){\r\n      setSaving(true)  \r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n      axios\r\n      .delete(`${baseUrl}hiv/art/clinic-visit/${row.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n          setSaving(false)\r\n      })\r\n      .catch((error) => {\r\n          setSaving(false)\r\n          if(error.response && error.response.data){\r\n              let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n              toast.error(errorMessage);\r\n            }\r\n            else{\r\n              toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n      }); \r\n  }else if(row.path==='Chronic-Care'){\r\n    setSaving(true) \r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n    axios\r\n    .delete(`${baseUrl}observation/${row.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        RecentActivities()\r\n        toggle()\r\n        setSaving(false) \r\n    })\r\n    .catch((error) => {\r\n      setSaving(false)\r\n        if(error.response && error.response.data){\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else{\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n    }); \r\n  }else if(row.path==='Cervical-cancer'){\r\n    setSaving(true) \r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n    axios\r\n    .delete(`${baseUrl}observation/${row.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        RecentActivities()\r\n        toggle()\r\n        setSaving(false) \r\n    })\r\n    .catch((error) => {\r\n        setSaving(false) \r\n        if(error.response && error.response.data){\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else{\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n    }); \r\n}else{\r\n\r\n  }\r\n  \r\n}\r\nconst redirectLink=()=>{\r\n  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n}\r\nconst LoadModal =(row)=>{\r\n  toggle()\r\n  setRecord(row)\r\n} \r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n     \r\n      <div className=\"row\">\r\n      <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\">\r\n              <h4 className=\"card-title\"><b>Recent Activities</b> </h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              {loadingRecent===false ? (<>\r\n                <PerfectScrollbar\r\n                  style={{ height: \"370px\" }}\r\n                  id=\"DZ_W_Todo1\"\r\n                  className=\"widget-media dz-scroll ps ps--active-y\"\r\n                >\r\n                  <Accordion\r\n                      className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                      defaultActiveKey=\"0\"\r\n                    >\r\n                      <>\r\n                      {recentActivities.map((data, i)=>\r\n                      <div className=\"accordion-item\" key={i}>\r\n                        <Accordion.Toggle\r\n                            as={Card.Text}\r\n                            eventKey={`${i}`}\r\n                            className={`accordion-header ${\r\n                              activeAccordionHeaderShadow === 1 ? \"\" : \"collapsed\"\r\n                            } accordion-header-info`}\r\n                            onClick={() =>\r\n                              setActiveAccordionHeaderShadow(\r\n                                activeAccordionHeaderShadow === 1 ? -1 : i\r\n                              )\r\n                            }\r\n                        >\r\n                        <span className=\"accordion-header-icon\"></span>\r\n                        <span className=\"accordion-header-text\">Visit Date : <span className=\"\">{data.date}</span> </span>\r\n                        <span className=\"accordion-header-indicator\"></span>\r\n                      </Accordion.Toggle>\r\n                      <Accordion.Collapse\r\n                        eventKey={`${i}`}\r\n                        className=\"accordion__body\"\r\n                      >\r\n                        <div className=\"accordion-body-text\">\r\n                        <ul className=\"timeline\">\r\n                          {data.activities && data.activities.map((activity,index) => ( \r\n                          \r\n                            <>\r\n                              <li>\r\n                                <div className=\"timeline-panel\">\r\n                                <div className={index % 2 == 0 ? \"media me-2 media-info\" : \"media me-2 media-success\"}>{ActivityName(activity.name)}</div>\r\n                                <div className=\"media-body\">\r\n                                  <h5 className=\"mb-1\">{activity.name}</h5>\r\n                                  <small className=\"d-block\">\r\n                                  {activity.date}\r\n                                  </small>\r\n                                </div>\r\n                                {!notToBeUpdated.includes(activity.path) ? (\r\n                                  <Dropdown className=\"dropdown\">\r\n                                    <Dropdown.Toggle\r\n                                    variant=\" light\"\r\n                                    className=\"i-false p-0 btn-info sharp\"\r\n                                    >\r\n                                    <svg\r\n                                      width=\"18px\"\r\n                                      height=\"18px\"\r\n                                      viewBox=\"0 0 24 24\"\r\n                                      version=\"1.1\"\r\n                                    >\r\n                                      <g\r\n                                      stroke=\"none\"\r\n                                      strokeWidth=\"1\"\r\n                                      fill=\"none\"\r\n                                      fillRule=\"evenodd\"\r\n                                      >\r\n                                      <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                      <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                                      <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                      <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                                      </g>\r\n                                    </svg>\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu className=\"dropdown-menu\">\r\n                                    {activity.viewable && ( <Dropdown.Item\r\n                                      className=\"dropdown-item\"\r\n                                      onClick={()=>LoadViewPage(activity,'view')}\r\n                                      >\r\n                                      View\r\n                                      </Dropdown.Item>\r\n                                    )}\r\n                                    {activity.viewable && ( <Dropdown.Item\r\n                                      className=\"dropdown-item\"\r\n                                      onClick={()=>LoadViewPage(activity,'update')}\r\n                                      >\r\n                                      Update\r\n                                      </Dropdown.Item>\r\n                                    )}\r\n                                      {activity.deletable && (<Dropdown.Item\r\n                                      className=\"dropdown-item\"\r\n                                      to=\"/widget-basic\"\r\n                                      onClick={()=>LoadModal(activity, 'delete')}\r\n                                      >\r\n                                      Delete\r\n                                      </Dropdown.Item>\r\n                                      )}\r\n                                    </Dropdown.Menu>\r\n                                  </Dropdown>\r\n                                ):\"\"}\r\n                                </div>\r\n                              </li>\r\n                            </>\r\n                          ))}                          \r\n                        </ul>\r\n                        </div>\r\n                      </Accordion.Collapse>\r\n                    </div>\r\n                      )}\r\n                      </>\r\n                  </Accordion>\r\n                  \r\n                </PerfectScrollbar>\r\n                </>)\r\n                :\r\n                <>\r\n                <p>Loading please wait...</p>\r\n                </>\r\n              }\r\n            </div>\r\n          </div>\r\n      </div>\r\n      <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header border-0 pb-0\">\r\n            <h4 className=\"card-title\"><b>Laboratory Orders</b></h4>\r\n          </div>\r\n          <div className=\"card-body\">\r\n          {loadingLab===false ? (<>\r\n            <PerfectScrollbar\r\n              style={{ height: \"370px\" }}\r\n              id=\"DZ_W_TimeLine\"\r\n              className=\"widget-timeline dz-scroll height370 ps ps--active-y\"\r\n            >\r\n              <ul className=\"timeline\">\r\n                {vitaLoad.length >0 ? (\r\n                  <>\r\n                    {vitaLoad.map((test,index) => ( \r\n                    <>\r\n                      <li key={index}>\r\n                      <div className={labStatus(test.labTestOrderStatus)}></div>\r\n                      <span\r\n                        className=\"timeline-panel text-muted\"\r\n                        onClick={()=>redirectLink()}\r\n                        //to=\"\"\r\n                      >\r\n                        <h6 className=\"mb-0\">\r\n                          Test Order Date{\" \"}<br/>\r\n                          <strong className=\"text-primary\">{test.dateOrderBy}</strong>\r\n                        </h6>\r\n                        {test.labTestGroupName!=='others' &&(<h6 className=\"mb-0\">\r\n                          Test Order{\" \"}<br/>\r\n                          <strong className=\"text-primary\">{test.labTestGroupName + \" - \" + test.labTestName}</strong>.\r\n                        </h6>\r\n                          )}\r\n                          {test.labTestGroupName==='others' &&(<h6 className=\"mb-0\">\r\n                          Test Order{\" \"}<br/>\r\n                          <strong className=\"text-primary\">{test.labTestName + \" - \" + test.viralLoadIndicationName}</strong>.\r\n                        </h6>\r\n                          )}\r\n                        \r\n                        <h6 className=\"mb-0\">\r\n                          Status{\" \"}<br/>\r\n                          <strong className=\"text-primary\">{test.labTestOrderStatusName}</strong>.\r\n                        </h6>\r\n                        {test.labTestOrderStatusName==='Result Reported'  && (\r\n                          <>\r\n                            <h6 className=\"mb-0\">\r\n                              Date Result Reported{\" \"}<br/>\r\n                              <strong className=\"text-primary\">{test.dateResultReported}</strong>.\r\n                            </h6>\r\n                            <h6 className=\"mb-0\">\r\n                              Result{\" \"}<br/>\r\n                              <strong className=\"text-primary\">{test.result}</strong>.\r\n                            </h6>\r\n                          </>\r\n                        )}\r\n\r\n                      </span>\r\n                      </li>\r\n                    </>\r\n\r\n                    ))}\r\n                  \r\n                  </>\r\n                  ) \r\n                  :\r\n                  <Alert\r\n                    variant=\"info\"\r\n                    className=\"alert-dismissible solid fade show\"\r\n                  >\r\n                    <p>No Laboratory Test Order Yet</p>\r\n                  </Alert>\r\n                }\r\n              </ul>\r\n            </PerfectScrollbar>\r\n            </>)\r\n                :\r\n                <>\r\n                <p>Loading please wait...</p>\r\n                </>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header border-0 pb-0\">\r\n            <h3 className=\"card-title\"><b >Refill Summary</b></h3>\r\n          </div>\r\n          <div className=\"card-body\">\r\n          {loadingPharmacy===false ? (<>\r\n            <PerfectScrollbar\r\n              style={{ height: \"370px\" }}\r\n              id=\"DZ_W_TimeLine1\"\r\n              className=\"widget-timeline dz-scroll style-1 height370 ps ps--active-y\"\r\n            >\r\n              <ul className=\"timeline\">\r\n              {refillList && refillList.length >0 ? (\r\n                  <>\r\n                    {refillList.map((regimen,index) => ( \r\n                    <>\r\n                      <li key={index}>\r\n                        <div className={index % 2 == 0 ? \"timeline-badge info\" : \"timeline-badge success\"}></div>\r\n                        <span\r\n                          className=\"timeline-panel text-muted\"\r\n                          onClick={()=>redirectLink()}\r\n                          //to=\"\"\r\n                        >\r\n                          <h6 className=\"mb-0\">\r\n                            Regimen\r\n                            {regimenName(regimen && regimen.extra ? regimen.extra.regimens : null)}\r\n                            \r\n                          </h6>\r\n                          <strong className=\"text-teal\">\r\n                            Refill Duration<br/>\r\n                              {regimen.refillPeriod}\r\n                          </strong><br/>\r\n                          <strong className=\"text-black\">\r\n                              Visit Date<br/>\r\n                              {regimen.visitDate}\r\n                          </strong><br/> \r\n                          <strong className=\"text-warning\">\r\n                              Next Appointment<br/>\r\n                              {regimen.nextAppointment}\r\n                          </strong>                    \r\n\r\n                        </span>\r\n                      </li>\r\n                    </>\r\n\r\n                    ))}\r\n                  \r\n                  </>\r\n                  ) \r\n                  :\r\n                  <Alert\r\n                    variant=\"info\"\r\n                    className=\"alert-dismissible solid fade show\"\r\n                  >\r\n                    <p>No Pharmacy Drug Refill</p>\r\n                  </Alert>\r\n                }\r\n\r\n              </ul>\r\n            </PerfectScrollbar>\r\n            </>)\r\n              :\r\n              <>\r\n              <p>Loading please wait...</p>\r\n              </>\r\n          }\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n       \r\n\r\n  </div>\r\n  <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered backdrop=\"static\">\r\n            <Modal.Header >\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n                \r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n            \r\n        </Modal.Footer>\r\n        </Modal>\r\n  </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentHistory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\index.js",["643"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport LabOrderResult from './LabOrderResult';\r\nimport ViralLoadOrderResult from './ViralLoadOrderResult';\r\nimport LabHistory from \"./LabHistory\";\r\n//import LaboratoryRDE from \"./LaboratoryRDE\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst LaboratoryModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const patientObj = props.patientObj\r\n    useEffect ( () => {\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id]);\r\n\r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                  {/* <Tab eventKey=\"checked-in\" title=\"Checked In Patients\">                   \r\n                    <CheckedInPatients />\r\n                  </Tab> */}\r\n                  <Tab eventKey=\"home\" title=\"LAB ORDER & RESULT\">                   \r\n                    <LabOrderResult patientObj={patientObj} setActiveContent={props.setActiveContent}/>\r\n                  </Tab>\r\n                  <Tab eventKey=\"viralLoad\" title=\"VIRAL LOAD ORDER & RESULT\">                   \r\n                    <ViralLoadOrderResult patientObj={patientObj} setActiveContent={props.setActiveContent}/>\r\n                  </Tab>\r\n                  <Tab eventKey=\"history\" title=\" HISTORY\">                   \r\n                    <LabHistory patientObj={patientObj} setActiveContent={props.setActiveContent}/>\r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LaboratoryModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\NewSessions.js",["644","645","646","647"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n//import CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n// import { Icon,Button, } from 'semantic-ui-react'\r\n// import Select from \"react-select\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst NEWEACSESSION = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [lastEACDate, setLastEACDate] = useState(null);\r\n    // const [errors, setErrors] = useState({});\r\n    // const [loading, setLoading] = useState(true)\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [selectedBarriers,setSelectedBarriers] = useState([]);\r\n    const [selectedInterventions,setSelectedInterventions] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(props.activeContent.obj.dateOfLastViralLoad);\r\n    const [objValues, setObjValues]=useState({\r\n                                                barriers: null,\r\n                                                barriersOthers:\"\",\r\n                                                intervention: null,\r\n                                                interventionOthers:\"\",\r\n                                                comment: null,\r\n                                                followUpDate: \"\",\r\n                                                referral:\"\",\r\n                                                adherence: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\",\r\n                                                eacId:\"\",\r\n                                                sessionDate:\"\"\r\n                                            })\r\n        const optionsForBarriers = [\r\n            { value: 'Forgot', label: 'Forgot' },\r\n            { value: 'Knowledge/beliefs', label: 'Knowledge/beliefs' },\r\n            { value: 'Side effects', label: 'Side effects' },\r\n            { value: 'Physical illness', label: 'Physical illness' },\r\n            { value: 'Substance use', label: 'Substance use' },\r\n            { value: 'Depression', label: 'Depression' },\r\n            { value: 'Pill burden', label: 'Pill burden' },\r\n            { value: 'Lost/ran out', label: 'Lost/ran out' },\r\n            { value: 'Transport', label: 'Transport' },\r\n            { value: 'Child behavior/refusing Scheduling', label: 'Child behavior/refusing Scheduling' },\r\n            { value: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma', label: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma' },\r\n            { value: 'Others', label: 'Others' },\r\n        ];\r\n        const optionsForInterventions = [\r\n            { value: 'Education', label: 'Education' },\r\n            { value: 'Counseling (ind)', label: 'Counseling (ind)' },\r\n            { value: 'Counseling (grp)', label: 'Counseling (grp)' },\r\n            { value: 'Peer support', label: 'Peer support' },\r\n            { value: 'Treatment buddy', label: 'Treatment buddy' },\r\n            { value: 'Extended Drug pick-up', label: 'Extended Drug pick-up' },\r\n            { value: 'Community ART Group', label: 'Community ART Group' },\r\n            { value: 'Directly Observed Therapy', label: 'Directly Observed Therapy' },\r\n            { value: 'Transport', label: 'Transport' },\r\n            { value: 'Child behavior/refusing Scheduling', label: 'Child behavior/refusing Scheduling' },\r\n            { value: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma', label: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma' },\r\n            { value: 'Tools Pill box Calendar', label: 'Tools Pill box Calendar' },\r\n            { value: 'Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS', label: 'Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS' },\r\n            { value: 'Others', label: 'Others' },\r\n        ];\r\n\r\n    useEffect(() => {\r\n        GetPatientDTOObj();\r\n        CheckEACStatus();\r\n    }, [props.activeContent]);\r\n    console.log(props.activeContent.obj)\r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n               const newEacDate= response.data && response.data.eacsession && response.data.eacsession!=='Default' ? moment(response.data.eacsessionDate, \"YYYY-MM-DD\").add(30, 'days').calendar() : null\r\n               //console.log(moment(response.data.eacsessionDate, \"YYYY-MM-DD\").add(30, 'days').toDate())\r\n               console.log(newEacDate)\r\n               setLastEACDate(newEacDate) \r\n               setEnrollDate(props.activeContent.obj.dateOfLastViralLoad)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               //setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n      }\r\n    ///GET LIST OF EAC\r\n    // const EACHistory =()=>{\r\n    //     setLoading(true)\r\n    //     axios\r\n    //         .get(`${baseUrl}hiv/eac/session`, objValues,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //         setLoading(false)\r\n    //         setObjValues(response.data)\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });    \r\n    // }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const onBarriersSelect = (selectedValues) => {\r\n        setSelectedBarriers(selectedValues);\r\n    };\r\n    const onInterventionsSelect = (selectedValues) => {\r\n        setSelectedInterventions(selectedValues);\r\n    };\r\n    const BackToSession = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        \r\n        props.setActiveContent({...props.activeContent, route:'eac-session', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }         \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.barriers=Object.assign({}, selectedBarriers); // {0:\"a\", 1:\"b\", 2:\"c\"}\r\n          objValues.intervention=Object.assign({}, selectedInterventions)\r\n          objValues.eacId=props.activeContent.obj.id\r\n          axios.post(`${baseUrl}hiv/eac/session`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"EAC session successful\");\r\n                  props.setActiveContent({...props.activeContent, route:'eac-session'})\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n\r\n  return (      \r\n        <div>                    \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>New EAC Session \r\n                    <ButtonMui\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-end ms-2 mr-2 mt-2 \"\r\n                        //startIcon={<FaUserPlus size=\"10\"/>}\r\n                        //startIcon={<TiArrowBack  />}\r\n                        onClick={()=>BackToSession(props.activeContent.obj, 'view')}\r\n                        style={{backgroundColor:\"#014D88\", color:'#fff', height:'35px'}}\r\n\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back To EAC Session</span>\r\n                    </ButtonMui>\r\n                    </h2>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">Viral Load : <b>{props.activeContent.obj.lastViralLoad}</b></div>\r\n                    <div className=\"form-group mb-3 col-md-4\">Date of Viral Load : <b>{props.activeContent.obj.dateOfLastViralLoad}</b></div>\r\n                    <div className=\"form-group mb-3 col-md-4\">EAC Status: <b>{props.activeContent.obj.status}</b></div>\r\n                    <hr/>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Session Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"sessionDate\"\r\n                                    id=\"sessionDate\"\r\n                                    min={lastEACDate !==null ? moment(lastEACDate).format(\"YYYY-MM-DD\") : enrollDate}\r\n                                    value={objValues.sessionDate}\r\n                                    max= { moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                 \r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"adherence\"\r\n                                    id=\"adherence\"\r\n                                    value={objValues.adherence}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Good\">Good</option> \r\n                                 <option value=\"Fair\">Fair</option> \r\n                                 <option value=\"Poor\">Poor</option> \r\n                                 \r\n                                </Input>\r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Any missed pharmacy drug pick-ups?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"missedDrug\"\r\n                                    id=\"missedDrug\"\r\n                                    value={objValues.missedDrug}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Yes\">Yes</option> \r\n                                 <option value=\"No\">No</option> \r\n                                 \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Barriers</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"barriers\"\r\n                                    id=\"barriers\"\r\n                                    value={objValues.barriers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Forgot\">  Forgot</option> \r\n                                 <option value=\"Knowledge/beliefs\">Knowledge/beliefs</option> \r\n                                 <option value=\"Side effects\">Side effects</option> \r\n                                 <option value=\"Physical illness\">Physical illness</option>\r\n                                 <option value=\"Substance use\">Substance use</option> \r\n                                 <option value=\"Depression\">Depression</option> \r\n                                 <option value=\"Pill burden\">Pill burden</option> \r\n                                 <option value=\"Lost/ran out\">Lost/ran out</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div> */}\r\n                        <div className=\"form-group mb-12 col-md-12\">\r\n                        <FormGroup>\r\n                            <Label for=\"permissions\" style={{color:'#014d88',fontWeight:'bolder'}}>Barriers</Label>\r\n                            <DualListBox\r\n                                //canFilter\r\n                                options={optionsForBarriers}\r\n                                onChange={onBarriersSelect}\r\n                                selected={selectedBarriers}\r\n                            />\r\n                        </FormGroup>\r\n                        </div>\r\n                        {selectedBarriers.includes('Others') && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Barriers - Others</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"barriersOthers\"\r\n                                    id=\"barriersOthers\"\r\n                                    value={objValues.barriersOthers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                               \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>)}\r\n                        <div className=\"form-group mb-12 col-md-12\">\r\n                        <FormGroup>\r\n                            <Label for=\"permissions\" style={{color:'#014d88',fontWeight:'bolder'}}>Intervention</Label>\r\n                            <DualListBox\r\n                                //canFilter\r\n                                options={optionsForInterventions}\r\n                                onChange={onInterventionsSelect}\r\n                                selected={selectedInterventions}\r\n                            />\r\n                        </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"intervention\"\r\n                                    id=\"intervention\"\r\n                                    value={objValues.intervention}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Education\">  Education</option> \r\n                                 <option value=\"Counseling (ind)\">Counseling (ind)</option> \r\n                                 <option value=\"Counseling (grp)\">Counseling (grp)</option> \r\n                                 <option value=\"Peer support\">Peer support</option>\r\n                                 <option value=\"Treatment buddy\"> Treatment buddy</option> \r\n                                 <option value=\"Extended Drug pick-up\">Extended Drug pick-up</option> \r\n                                 <option value=\"Community ART Group\">Community ART Group</option> \r\n                                 <option value=\"Directly Observed Therapy\">Directly Observed Therapy</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Tools Pill box Calendar\">Tools Pill box Calendar</option>\r\n                                 <option value=\"Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS\">Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div> */}\r\n                        {selectedInterventions.includes('Others') && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention - Others</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"interventionOthers\"\r\n                                    id=\"interventionOthers\"\r\n                                    value={objValues.interventionOthers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                               \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\"></div>\r\n                        </>)}\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referrals</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"referral\"\r\n                                id=\"referral\"\r\n                                value={objValues.referral}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Follow Up Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"followUpDate\"\r\n                                id=\"followUpDate\"\r\n                                value={objValues.followUpDate}\r\n                                onChange={handleInputChange}\r\n                                min={objValues.sessionDate}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                           \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"comment\"\r\n                                id=\"comment\"\r\n                                value={objValues.comment}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={saving}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default NEWEACSESSION;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\SessionList.js",["648","649","650","651","652","653","654"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport StopEac from './StopEac'\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\nconst LabHistory = (props) => {    \r\n    //console.log(props.activeContent)\r\n    const [sessionList, setSessionList] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [artModal, setArtModal] = useState(false);\r\n    const [showOutComeButton, setShowOutComeButton] = useState(false);\r\n    const Arttoggle = () => setArtModal(!artModal);\r\n    useEffect(() => {\r\n        LabOrders()\r\n      }, [props.activeContent]);\r\n    //GET LIST OF Patients\r\n    async function LabOrders() {\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}hiv/eac/session/eac/${props.activeContent.obj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setSessionList(response.data);  \r\n                if(sessionList.length>=3){\r\n                    setShowOutComeButton(true)\r\n                }\r\n                //console.log(ThirdEac)             \r\n            })\r\n            .catch((error) => {  \r\n                setLoading(false)  \r\n            });        \r\n    }\r\n\r\n    const AddNewSession = () =>{  \r\n        const row= props.activeContent.obj\r\n        const actionType =\"history\"\r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'new-eac-session', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n     const LoadEacOutCome = () =>{  \r\n         const row= props.activeContent.obj\r\n         const actionType =\"history\"\r\n         props.setActiveContent({...props.activeContent, route:'eac-outcome', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n     const loadEacStop =()=> {\r\n            setArtModal(!artModal)\r\n    }\r\n   //const LabObj = [{\"id\":16,\"orderId\":13,\"patientId\":9,\"visitId\":0,\"labTestGroupId\":4,\"labTestGroupName\":\"Others\",\"labTestId\":16,\"labTestName\":\"Viral Load\",\"labNumber\":\"788\",\"sampleCollectionDate\":\"2022-09-08\",\"dateAssayed\":\"2022-09-09\",\"result\":\"78\",\"dateResultReceived\":\"2022-09-09\",\"comments\":\"good\",\"viralLoadIndication\":297,\"viralLoadIndicationName\":\"Targeted Monitoring\"}]\r\n   const LoadViewPage =(row,action)=>{\r\n        props.setActiveContent({...props.activeContent, route:'eac-session-update', id:row.id, actionType:action, obj:row})\r\n    }\r\n    const LoadDeletePage =(row)=>{\r\n\r\n            axios\r\n            .delete(`${baseUrl}hiv/eac/delete/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                LabOrders()\r\n                toast.success(\"Record Deleted Successfully\");\r\n                \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n            }); \r\n\r\n    }\r\n\r\n  return (\r\n    <div>\r\n            {props.activeContent.obj.status!=='COMPLETED' && props.activeContent.obj.status!=='STOPPED' && sessionList.length >0 && (\r\n        \r\n            <ButtonMui\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2 mr-2 mt-2\"\r\n                //startIcon={<FaUserPlus size=\"10\"/>}\r\n                //startIcon={<TiArrowBack  />}\r\n                onClick={() => loadEacStop()}\r\n                style={{backgroundColor:\"#000\", color:'#fff', height:'35px'}}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>Stop EAC</span>\r\n            </ButtonMui>\r\n            )}\r\n            {sessionList.length>=3  && props.activeContent.obj.status!=='STOPPED' && props.activeContent.obj.status!=='COMPLETED' && (\r\n            <ButtonMui\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2 mr-2 mt-2\"\r\n                //startIcon={<FaUserPlus size=\"10\"/>}\r\n                //startIcon={<TiArrowBack  />}\r\n                onClick={LoadEacOutCome}\r\n                style={{backgroundColor:\"rgb(153, 46, 98)\", color:'#fff', height:'35px'}}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>Outcome</span>\r\n            </ButtonMui>\r\n            )}\r\n             {props.activeContent.obj.status!=='COMPLETED' && props.activeContent.obj.status!=='STOPPED' && (\r\n            <ButtonMui\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2 mr-2 mt-2 \"\r\n                //startIcon={<FaUserPlus size=\"10\"/>}\r\n                //startIcon={<TiArrowBack  />}\r\n                onClick={AddNewSession}\r\n                style={{backgroundColor:\"#014D88\", color:'#fff', height:'35px'}}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>Add Session</span>\r\n            </ButtonMui>\r\n             )}\r\n            <br/> <br/> <br/>\r\n        \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"EAC Sessions\"\r\n              columns={[\r\n              \r\n                { title: \"Follow Up Date\", field: \"followupDate\", filtering: false },\r\n                { title: \" Barriers \", field: \"barriers\", filtering: false },\r\n                { title: \"Interventions\", field: \"intervention\", filtering: false },\r\n                { title: \"Comment\", field: \"comment\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },\r\n                { title: \"Actions\", field: \"action\", filtering: false },\r\n\r\n              ]}\r\n              isLoading={loading}\r\n              data={ sessionList.map((row) => ({\r\n                  //Id: manager.id,\r\n                  \r\n                  followupDate: row.followUpDate,\r\n                  barriers: Object.keys(row.barriers).length > 0 ? Object.keys(row.barriers).length + \"  Barriers\" : \"No Barriers\",\r\n                  intervention: Object.keys(row.intervention).length > 0 ? Object.keys(row.intervention).length + \"  Interventions\" : \"No Interventions\",\r\n                  comment:row.comment,   \r\n                  status: row.status,\r\n                  action:<div>\r\n                  <Menu.Menu position='right'  >\r\n                  <Menu.Item >\r\n                      <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                      <Dropdown item text='Action'>\r\n\r\n                      <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                       <Dropdown.Item onClick={()=>LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>\r\n                          <Dropdown.Item  onClick={()=>LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>\r\n                          <Dropdown.Item  onClick={()=>LoadDeletePage(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                  </Dropdown>\r\n                      </Button>\r\n                  </Menu.Item>\r\n                  </Menu.Menu>\r\n              </div>\r\n                 \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n       <StopEac  toggle={Arttoggle} showModal={artModal}  eacObj={props.activeContent.obj} activeContent={props.activeContent} setActiveContent={props.setActiveContent}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\Index.js",["655","656"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\n//import PharmacyRefill from './PharmacyRefill';\r\nimport axios from \"axios\";\r\nimport PharmacyRefillUpdate from './PharmacyRefillViewUpdate';\r\nimport PharmacyHistory from \"./PharmacyHistory\";\r\nimport PharmacyRefillNew from './PharmacyRefillNew'\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst PharmacyModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const patientObj = props.patientObj\r\n    const [loading, setLoading] = useState(true)\r\n    const [refillList, setRefillList] = useState([])\r\n    useEffect ( () => {\r\n      PharmacyList()\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id,  props.activeContent.activeTab]);\r\n    //console.log(key)\r\n\r\n        //GET LIST Drug Refill\r\n        const PharmacyList =() =>{\r\n          setLoading(true)\r\n          axios\r\n              .get(`${baseUrl}hiv/art/pharmacy/patient?pageNo=0&pageSize=10&personId=${props.patientObj.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n              )\r\n              .then((response) => {\r\n                  \r\n                  setLoading(false)\r\n                  setRefillList(response.data);                \r\n              })\r\n              .catch((error) => {  \r\n                  setLoading(false)  \r\n              });        \r\n      }\r\n     \r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                  {/* <Tab eventKey=\"checked-in\" title=\"Checked In Patients\">                   \r\n                    <CheckedInPatients />\r\n                  </Tab> */}\r\n                  <Tab eventKey=\"home\" title=\"Pharmacy Drug Refill \">\r\n                    {props.activeContent.actionType==='update' ? \r\n                      (                 \r\n                        <PharmacyRefillUpdate patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} PharmacyList={PharmacyList}/>\r\n                      )\r\n                      :\r\n                      (\r\n                        <PharmacyRefillNew patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} PharmacyList={PharmacyList}/>\r\n                      )\r\n                    }\r\n                  </Tab>  \r\n                  <Tab eventKey=\"history\" title=\" History\">                   \r\n                    <PharmacyHistory patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} PharmacyList={PharmacyList} refillList={refillList} loading={loading}/>\r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PharmacyModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewUpdateEACSessions.js",["657","658","659","660","661","662","663","664","665","666","667","668"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\nimport Select from \"react-select\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst NEWEACSESSION = (props) => {\r\n    console.log(props.activeContent)\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [selectedBarriers,setSelectedBarriers] = useState([]);\r\n    const [selectedInterventions,setSelectedInterventions] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [objValues, setObjValues]=useState({\r\n                                                barriers: null,\r\n                                                barriersOthers:\"\",\r\n                                                intervention: null,\r\n                                                interventionOthers:\"\",\r\n                                                comment: null,\r\n                                                followUpDate: \"\",\r\n                                                referral:\"\",\r\n                                                adherence: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\",\r\n                                                eacId:\"\",\r\n                                                sessionDate:\"\",\r\n                                                missedDrug:\"\"\r\n                                            })\r\n        const optionsForBarriers = [\r\n            { value: 'Forgot', label: 'Forgot' },\r\n            { value: 'Knowledge/beliefs', label: 'Knowledge/beliefs' },\r\n            { value: 'Side effects', label: 'Side effects' },\r\n            { value: 'Physical illness', label: 'Physical illness' },\r\n            { value: 'Substance use', label: 'Substance use' },\r\n            { value: 'Depression', label: 'Depression' },\r\n            { value: 'Pill burden', label: 'Pill burden' },\r\n            { value: 'Lost/ran out', label: 'Lost/ran out' },\r\n            { value: 'Transport', label: 'Transport' },\r\n            { value: 'Child behavior/refusing Scheduling', label: 'Child behavior/refusing Scheduling' },\r\n            { value: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma', label: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma' },\r\n            { value: 'Others', label: 'Others' },\r\n        ];\r\n        const optionsForInterventions = [\r\n            { value: 'Education', label: 'Education' },\r\n            { value: 'Counseling (ind)', label: 'Counseling (ind)' },\r\n            { value: 'Counseling (grp)', label: 'Counseling (grp)' },\r\n            { value: 'Peer support', label: 'Peer support' },\r\n            { value: 'Treatment buddy', label: 'Treatment buddy' },\r\n            { value: 'Extended Drug pick-up', label: 'Extended Drug pick-up' },\r\n            { value: 'Community ART Group', label: 'Community ART Group' },\r\n            { value: 'Directly Observed Therapy', label: 'Directly Observed Therapy' },\r\n            { value: 'Transport', label: 'Transport' },\r\n            { value: 'Child behavior/refusing Scheduling', label: 'Child behavior/refusing Scheduling' },\r\n            { value: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma', label: 'Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma' },\r\n            { value: 'Tools Pill box Calendar', label: 'Tools Pill box Calendar' },\r\n            { value: 'Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS', label: 'Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS' },\r\n            { value: 'Others', label: 'Others' },\r\n        ];\r\n\r\n    useEffect(() => {\r\n        GetPatientDTOObj();\r\n        CheckEACStatus();\r\n        //GetFormDetail();\r\n        if(props.activeContent && props.activeContent.obj){\r\n            setObjValues({...props.activeContent.obj})\r\n            setSelectedBarriers(Object.values(props.activeContent.obj.barriers))\r\n            setSelectedInterventions(Object.values(props.activeContent.obj.intervention))\r\n        }\r\n    }, [props.activeContent, props.patientObj.id]);\r\n    // //Get EAC Object\r\n    // const GetFormDetail =()=>{\r\n    //     axios\r\n    //        .get(`${baseUrl}hiv/eac/session/eac/${props.activeContent.id}`,\r\n    //            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //        )\r\n    //        .then((response) => {            \r\n    //             //const Obj= response.data.find((x)=> x.type==='Intensive follow up') \r\n    //             setObjValues({...response.data})\r\n    //             setSelectedBarriers([response.data.barriers])\r\n    //             setSelectedInterventions([response.data.intervention])\r\n    //             //setAttemptList(Obj.data)\r\n    //        })\r\n    //        .catch((error) => {\r\n    //        //console.log(error);\r\n    //        });\r\n       \r\n    // } \r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n      }\r\n    ///GET LIST OF EAC\r\n    // const EACHistory =()=>{\r\n    //     setLoading(true)\r\n    //     axios\r\n    //         .get(`${baseUrl}hiv/eac/session`, objValues,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //         setLoading(false)\r\n    //         setObjValues(response.data)\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });    \r\n    // }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const onBarriersSelect = (selectedValues) => {\r\n        setSelectedBarriers(selectedValues);\r\n    };\r\n    const onInterventionsSelect = (selectedValues) => {\r\n        setSelectedInterventions(selectedValues);\r\n    };\r\n    const BackToSession = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        \r\n        props.setActiveContent({...props.activeContent, route:'eac-session', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }         \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.barriers=Object.assign({}, selectedBarriers); // {0:\"a\", 1:\"b\", 2:\"c\"}\r\n          objValues.intervention=Object.assign({}, selectedInterventions)\r\n          objValues.eacId=props.activeContent.obj.id\r\n          axios.put(`${baseUrl}hiv/eac/session/edit/${props.activeContent.obj.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"EAC session updated successful\");\r\n                props.setActiveContent({...props.activeContent, route:'eac-session'})\r\n\r\n            })\r\n            .catch(error => {\r\n            setSaving(false);\r\n            if(error.response && error.response.data){\r\n                let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage);\r\n                }\r\n                else{\r\n                toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n            });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                    \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>EAC Session ({props.activeContent.obj.status}) - {props.activeContent.actionType ==='update' ? \"Update \" : \"View\" }\r\n                    {/* <ButtonMui\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-end ms-2 mr-2 mt-2 \"\r\n                        //startIcon={<FaUserPlus size=\"10\"/>}\r\n                        //startIcon={<TiArrowBack  />}\r\n                        onClick={()=>BackToSession(props.activeContent.obj, 'view')}\r\n                        style={{backgroundColor:\"#014D88\", color:'#fff', height:'35px'}}\r\n\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back To EAC Session</span>\r\n                    </ButtonMui> */}\r\n                    </h2>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Session Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"sessionDate\"\r\n                                    id=\"sessionDate\"\r\n                                    min={eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' ? eacStatusObj.eacsessionDate :enrollDate}\r\n                                    value={objValues.sessionDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                 \r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"adherence\"\r\n                                    id=\"adherence\"\r\n                                    value={objValues.adherence}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Good\">Good</option> \r\n                                 <option value=\"Fair\">Fair</option> \r\n                                 <option value=\"Poor\">Poor</option> \r\n                                 \r\n                                </Input>\r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Any missed pharmacy drug pick-ups?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"missedDrug\"\r\n                                    id=\"missedDrug\"\r\n                                    value={objValues.missedDrug}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Yes\">Yes</option> \r\n                                 <option value=\"No\">No</option> \r\n                                 \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Barriers</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"barriers\"\r\n                                    id=\"barriers\"\r\n                                    value={objValues.barriers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Forgot\">  Forgot</option> \r\n                                 <option value=\"Knowledge/beliefs\">Knowledge/beliefs</option> \r\n                                 <option value=\"Side effects\">Side effects</option> \r\n                                 <option value=\"Physical illness\">Physical illness</option>\r\n                                 <option value=\"Substance use\">Substance use</option> \r\n                                 <option value=\"Depression\">Depression</option> \r\n                                 <option value=\"Pill burden\">Pill burden</option> \r\n                                 <option value=\"Lost/ran out\">Lost/ran out</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div> */}\r\n                        <div className=\"form-group mb-12 col-md-12\">\r\n                        <FormGroup>\r\n                            <Label for=\"permissions\" style={{color:'#014d88',fontWeight:'bolder'}}>Barriers</Label>\r\n                            <DualListBox\r\n                                //canFilter\r\n                                options={optionsForBarriers}\r\n                                onChange={onBarriersSelect}\r\n                                selected={selectedBarriers}\r\n                            />\r\n                        </FormGroup>\r\n                        </div>\r\n                        {selectedBarriers.includes('Others') && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Barriers - Others</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"barriersOthers\"\r\n                                    id=\"barriersOthers\"\r\n                                    value={objValues.barriersOthers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                               \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>)}\r\n                        <div className=\"form-group mb-12 col-md-12\">\r\n                        <FormGroup>\r\n                            <Label for=\"permissions\" style={{color:'#014d88',fontWeight:'bolder'}}>Intervention</Label>\r\n                            <DualListBox\r\n                                //canFilter\r\n                                options={optionsForInterventions}\r\n                                onChange={onInterventionsSelect}\r\n                                selected={selectedInterventions}\r\n                            />\r\n                        </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"intervention\"\r\n                                    id=\"intervention\"\r\n                                    value={objValues.intervention}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Education\">  Education</option> \r\n                                 <option value=\"Counseling (ind)\">Counseling (ind)</option> \r\n                                 <option value=\"Counseling (grp)\">Counseling (grp)</option> \r\n                                 <option value=\"Peer support\">Peer support</option>\r\n                                 <option value=\"Treatment buddy\"> Treatment buddy</option> \r\n                                 <option value=\"Extended Drug pick-up\">Extended Drug pick-up</option> \r\n                                 <option value=\"Community ART Group\">Community ART Group</option> \r\n                                 <option value=\"Directly Observed Therapy\">Directly Observed Therapy</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Tools Pill box Calendar\">Tools Pill box Calendar</option>\r\n                                 <option value=\"Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS\">Incentive calendar (peds) ARV swallowing instruction Written instructions Phone calls SMS</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div> */}\r\n                        {selectedInterventions.includes('Others') && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention - Others</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"interventionOthers\"\r\n                                    id=\"interventionOthers\"\r\n                                    value={objValues.interventionOthers}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                               \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\"></div>\r\n                        </>)}\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referrals</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"referral\"\r\n                                id=\"referral\"\r\n                                value={objValues.referral}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Follow Up Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"followUpDate\"\r\n                                id=\"followUpDate\"\r\n                                value={objValues.followUpDate}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                           \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"comment\"\r\n                                id=\"comment\"\r\n                                value={objValues.comment}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType ==='update' ? ( \r\n                        <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        onClick={handleSubmit}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={saving}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                        </MatButton>\r\n                    ):\r\n                    \"\"\r\n                    }\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default NEWEACSESSION;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\CervicalCancer\\Index.js",["669","670","671","672","673","674","675","676","677","678","679","680"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input, InputGroup,InputGroupText} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst CervicalCancer = (props) => {\r\n    const patientObj = props.patientObj;\r\n    //let history = useHistory();\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [result, setResult] = useState([]);\r\n    const [method, setMethod] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n    const [gross, setGross] = useState([]);\r\n    const [visible, setVisible] = useState([]);\r\n    const [referrals, setReferrals] = useState([]);\r\n    const [type, setType] = useState([]);\r\n    const [screeningType, setScreeningType] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [objValues, setObjValues] = useState({\r\n                                                    personId:patientObj.id,\r\n                                                    screeningResult:\"\",\r\n                                                    screenMethod:\"\",\r\n                                                    screenType:\"\",\r\n                                                    dateOfScreening:\"\", \r\n                                                    screeningArea:\"\",\r\n                                                    screeningGross:\"\",\r\n                                                    screeningRefferal:\"\",\r\n                                                    screeningVisible:\"\",\r\n                                                    screenTreatment:\"\",\r\n                                                    papPendingingResult:\"\",\r\n                                                    papGettingResult:\"\",                                                 \r\n                                                    screenTreatmentMethodDate:\"\"\r\n                                                });\r\n    const [observation, setObservation]=useState({\r\n            data: {},\r\n            dateOfObservation: \"\",\r\n            facilityId: null,\r\n            personId: patientObj.id,\r\n            type: \"Cervical cancer\",\r\n            visitId: null\r\n    })\r\n\r\n    useEffect(() => {\r\n        //FunctionalStatus();\r\n        Result();\r\n        Type();\r\n        Method();\r\n        Gross();\r\n        Referrals();\r\n        Areas();\r\n        Visible();\r\n        GetPatientDTOObj();\r\n        CERVICAL_CANCER_SCREENING_TYPE();\r\n    }, []);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const Method =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_METHOD`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setMethod(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    const CERVICAL_CANCER_SCREENING_TYPE =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_TYPE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setScreeningType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Gross =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/GROSS_CERVICAL_LESIONS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setGross(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Areas =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_POSITIVE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setAreas(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Visible =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/NEW_SQUAMOCOLUMNAR_JUNCTION_VISIBLE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setVisible(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Referrals =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_FOR_CERVICAL_CANCER_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setReferrals(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Type =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_TREATMENT`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Result =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_RESULT`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name==='screeningResult' && e.target.value!=='CERVICAL_CANCER_RESULT_POSITIVE'){\r\n            objValues.screeningArea=\"\"\r\n            objValues.screeningVisible=\"\"\r\n            setObjValues ({...objValues,  [\"screeningArea\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"screeningVisible\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='screenTreatment' && e.target.value===''){\r\n            objValues.screenTreatmentMethodDate=\"\"\r\n            objValues.screenTreatmentMethodDate=\"\"\r\n            setObjValues ({...objValues,  [\"screenTreatmentMethodDate\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"screescreenTreatmentMethodDateningVisible\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        //objValues.screeningResult ==='CERVICAL_CANCER_RESULT_POSITIVE'\r\n        //screeningArea screeningVisible\r\n    }\r\n\r\n    //FORM VALIDATION\r\n    // const validate = () => {\r\n    //     let temp = { ...errors }\r\n    //     //temp.name = details.name ? \"\" : \"This field is required\"\r\n    //     //temp.description = details.description ? \"\" : \"This field is required\"\r\n    //     setErrors({\r\n    //         ...temp\r\n    //         })    \r\n    //     return Object.values(temp).every(x => x == \"\")\r\n    // }\r\n        \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {                  \r\n        e.preventDefault();                     \r\n        setSaving(true);\r\n        observation.dateOfObservation= objValues.dateOfScreening       \r\n        observation.personId =patientObj.id\r\n        observation.data=objValues\r\n        axios.post(`${baseUrl}observation`,observation,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n        \r\n        )\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Record save successful\");\r\n                props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n            })\r\n            .catch(error => {\r\n            setSaving(false);\r\n            let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n            });\r\n        \r\n    }\r\n\r\n  return (      \r\n         <div>                 \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <form >\r\n                        <div className=\"row\">\r\n                            <h2> Cervical Cancer </h2>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"artDate\">Date of Screening <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfScreening\"\r\n                                    id=\"dateOfScreening\"\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    value={objValues.dateOfScreening}\r\n                                    required\r\n                                />\r\n                                {errors.dateOfScreening !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfScreening}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Method <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenMethod\"\r\n                                    id=\"screenMethod\"\r\n                                    value={objValues.screenMethod}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> Select</option>\r\n                \r\n                                        {method.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input> \r\n                           \r\n                            </FormGroup>\r\n                            </div>\r\n                            {/* {objValues.screenMethod==='CERVICAL_CANCER_SCREENING_METHOD_PAP_SMEAR' && (\r\n                                <>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >PAP Smear Pending Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                        type=\"text\"\r\n                                        name=\"papPendingingResult\"\r\n                                        id=\"papPendingingResult\"\r\n                                        value={objValues.papPendingingResult}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                          \r\n                                    </Input> \r\n                               \r\n                                </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >PAP Smear Getting Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                        type=\"input\"\r\n                                        name=\"papGettingResult\"\r\n                                        id=\"papGettingResult\"\r\n                                        value={objValues.papGettingResult}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                           \r\n                                    </Input> \r\n                               \r\n                                </FormGroup>\r\n                                </div>\r\n                                </>\r\n                            )} */}\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Type <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenType\"\r\n                                    id=\"screenType\"\r\n                                    value={objValues.screenType}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> Select</option>\r\n                \r\n                                        {screeningType.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input> \r\n                            {errors.screenType !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenType}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Screening Result </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningResult\"\r\n                                    id=\"screeningResult\"\r\n                                    value={objValues.screeningResult}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> </option>\r\n                \r\n                                        {result.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningResult !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningResult}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            {objValues.screeningResult ==='CERVICAL_CANCER_RESULT_POSITIVE' && (\r\n                            <>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Size of an acetowhite  area </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningArea\"\r\n                                    id=\"screeningArea\"\r\n                                    value={objValues.screeningArea}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> </option>\r\n                \r\n                                        {areas.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningArea !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningArea}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >New Squamocolumnar junction visible </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"screeningVisible\"\r\n                                id=\"screeningVisible\"\r\n                                value={objValues.screeningVisible}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                                >\r\n                                    <option value=\"\"> </option>\r\n            \r\n                                    {visible.map((value) => (\r\n                                        <option key={value.id} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.screeningVisible !==\"\" ? (\r\n                                <span className={classes.error}>{errors.screeningVisible}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )} \r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Gross Cervical Lesions seen </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningGross\"\r\n                                    id=\"screeningGross\"\r\n                                    value={objValues.screeningGross}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> </option>\r\n                \r\n                                        {gross.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningGross !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningGross}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Treatment </Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenTreatment\"\r\n                                    id=\"screenTreatment\"\r\n                                    value={objValues.screenTreatment}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> Select</option>\r\n                \r\n                                        {type.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screenTreatment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenTreatment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            {objValues.screenTreatment!==\"\" && (\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Treatment Method Date</Label>\r\n                            <Input\r\n                                    type=\"date\"\r\n                                    name=\"screenTreatmentMethodDate\"\r\n                                    id=\"screenTreatmentMethodDate\"\r\n                                    value={objValues.screenTreatmentMethodDate}\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    required\r\n                                    >\r\n                                </Input>\r\n                                {errors.screenTreatmentMethodDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenTreatmentMethodDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            )}                         \r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Referral </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningRefferal\"\r\n                                    id=\"screeningRefferal\"\r\n                                    value={objValues.screeningRefferal}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"\"> </option>\r\n                \r\n                                        {referrals.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningRefferal !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningRefferal}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {saving ? <Spinner /> : \"\"}\r\n                        <br />\r\n                    \r\n                        <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        //disabled={objValues.screeningResult===\"\" || objValues.screenMethod===\"\" || objValues.screenType===\"\" || objValues.visible===\"\" || objValues.screeningResult===\"\"  || objValues.gross===\"\" || objValues.referrals===\"\" || objValues.screenTreatment===\"\" ? true : false}\r\n                        disabled={objValues.dateOfScreening===\"\" || objValues.screenMethod===\"\" || objValues.screenType===\"\" ? true : false}\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                    \r\n                    <MatButton\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        startIcon={<CancelIcon />}\r\n                        \r\n                    >\r\n                        <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                    </MatButton>\r\n                    \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                     \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default CervicalCancer;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\Index.js",["681"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport ViralLoadList from \"./ViralLoadList\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst LaboratoryModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const patientObj = props.patientObj\r\n    useEffect ( () => {\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id]);\r\nconsole.log(props)\r\n    \r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                 \r\n                  <Tab eventKey=\"home\" title=\"EAC LIST\">                   \r\n                    <ViralLoadList patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent}/>\r\n                  </Tab>\r\n                                 \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LaboratoryModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\CervicalCancer\\ViewPage.js",["682","683","684","685","686","687","688","689","690"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input, } from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst CervicalCancer = (props) => {\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [result, setResult] = useState([]);\r\n    const [method, setMethod] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n    const [gross, setGross] = useState([]);\r\n    const [visible, setVisible] = useState([]);\r\n    const [referrals, setReferrals] = useState([]);\r\n    const [type, setType] = useState([]);\r\n    const [screeningType, setScreeningType] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [objValues, setObjValues] = useState({\r\n                                                    personId:patientObj.id,\r\n                                                    screeningResult:\"\",\r\n                                                    screenMethod:\"\",\r\n                                                    screenType:\"\",\r\n                                                    dateOfScreening:\"\", \r\n                                                    screeningArea:\"\",\r\n                                                    screeningGross:\"\",\r\n                                                    screeningRefferal:\"\",\r\n                                                    screeningVisible:\"\",\r\n                                                    screenTreatment:\"\", \r\n                                                    papPendingingResult:\"\",\r\n                                                    papGettingResult:\"\",                                               \r\n                                                    screenTreatmentMethodDate:\"\"\r\n                                                });\r\n    const [observation, setObservation]=useState({\r\n            data: {},\r\n            dateOfObservation: \"\",\r\n            facilityId: null,\r\n            personId: patientObj.id,\r\n            type: \"Cervical cancer\",\r\n            visitId: null\r\n    })\r\n\r\n    useEffect(() => {\r\n        //FunctionalStatus();\r\n        Result();\r\n        Type();\r\n        Method();\r\n        Gross();\r\n        Referrals();\r\n        Areas();\r\n        Visible();\r\n        GetDetail();\r\n        GetPatientDTOObj();\r\n        CERVICAL_CANCER_SCREENING_TYPE();\r\n    }, [props.activeContent.id]);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const CERVICAL_CANCER_SCREENING_TYPE =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_TYPE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setScreeningType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n     //Get Cervical Cancer  Object\r\n     const GetDetail =()=>{\r\n        axios\r\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {            \r\n                const cancerObj= response.data\r\n                //console.log(response.data)\r\n                setObjValues({...cancerObj.data})\r\n                  //setViralLoad(LabObject)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const Method =()=>{\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_METHOD`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data);\r\n                    setMethod(response.data);\r\n                })\r\n                .catch((error) => {\r\n                //console.log(error);\r\n                });\r\n            \r\n    }\r\n    const Type =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_TREATMENT`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Gross =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/GROSS_CERVICAL_LESIONS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setGross(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Areas =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_POSITIVE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setAreas(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Visible =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/NEW_SQUAMOCOLUMNAR_JUNCTION_VISIBLE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setVisible(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Referrals =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_FOR_CERVICAL_CANCER_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setReferrals(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const Result =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_RESULT`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name==='screeningResult' && e.target.value!=='CERVICAL_CANCER_RESULT_POSITIVE'){\r\n            objValues.screeningArea=\"\"\r\n            objValues.screeningVisible=\"\"\r\n            setObjValues ({...objValues,  [\"screeningArea\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"screeningVisible\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n    }\r\n\r\n    //FORM VALIDATION\r\n    // const validate = () => {\r\n    //     let temp = { ...errors }\r\n    //     //temp.name = details.name ? \"\" : \"This field is required\"\r\n    //     //temp.description = details.description ? \"\" : \"This field is required\"\r\n    //     setErrors({\r\n    //         ...temp\r\n    //         })    \r\n    //     return Object.values(temp).every(x => x == \"\")\r\n    // }\r\n        \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {                  \r\n        e.preventDefault();                     \r\n        setSaving(true);\r\n        observation.dateOfObservation= objValues.dateOfScreening       \r\n        observation.personId =patientObj.id\r\n        observation.data=objValues\r\n        axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},          \r\n          )\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Record save successful\");\r\n                props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n            })\r\n            .catch(error => {\r\n            setSaving(false);\r\n            let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n            });\r\n        \r\n    }\r\n\r\n  return (      \r\n         <div>                 \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                <div className=\"row\">\r\n                            <h2> Cervical Cancer </h2>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"artDate\">Date of Screening <span style={{ color:\"red\"}}> *</span> </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfScreening\"\r\n                                    id=\"dateOfScreening\"\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    value={objValues.dateOfScreening}\r\n                                    required\r\n                                />\r\n                                {errors.screenType !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenType}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Method <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenMethod\"\r\n                                    id=\"screenMethod\"\r\n                                    value={objValues.screenMethod}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> Select</option>\r\n                \r\n                                        {method.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input> \r\n                            {errors.screenMethod !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenMethod}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            {/* {objValues.screenMethod==='CERVICAL_CANCER_SCREENING_METHOD_PAP_SMEAR' && (\r\n                                <>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >PAP Smear Pending Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                        type=\"text\"\r\n                                        name=\"papPendingingResult\"\r\n                                        id=\"papPendingingResult\"\r\n                                        value={objValues.papPendingingResult}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                          \r\n                                    </Input> \r\n                               \r\n                                </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >PAP Smear Getting Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                        type=\"input\"\r\n                                        name=\"papGettingResult\"\r\n                                        id=\"papGettingResult\"\r\n                                        value={objValues.papGettingResult}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                           \r\n                                    </Input> \r\n                               \r\n                                </FormGroup>\r\n                                </div>\r\n                                </>\r\n                            )} */}\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Type <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenType\"\r\n                                    id=\"screenType\"\r\n                                    value={objValues.screenType}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> Select</option>\r\n                \r\n                                        {screeningType.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input> \r\n                            {errors.screenType !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenType}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Screening Result </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningResult\"\r\n                                    id=\"screeningResult\"\r\n                                    value={objValues.screeningResult}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> </option>\r\n                \r\n                                        {result.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningResult !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningResult}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            {objValues.screeningResult ==='CERVICAL_CANCER_RESULT_POSITIVE' && (\r\n                            <>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Size of an acetowhite  area </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningArea\"\r\n                                    id=\"screeningArea\"\r\n                                    value={objValues.screeningArea}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> </option>\r\n                \r\n                                        {areas.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningArea !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningArea}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >New Squamocolumnar junction visible </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"screeningVisible\"\r\n                                id=\"screeningVisible\"\r\n                                value={objValues.screeningVisible}\r\n                                onChange={handleInputChange}\r\n                                required\r\n                                >\r\n                                    <option value=\"Select\"> </option>\r\n            \r\n                                    {visible.map((value) => (\r\n                                        <option key={value.id} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.screeningVisible !==\"\" ? (\r\n                                <span className={classes.error}>{errors.screeningVisible}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Gross Cervical Lesions seen </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningGross\"\r\n                                    id=\"screeningGross\"\r\n                                    value={objValues.screeningGross}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> </option>\r\n                \r\n                                        {gross.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningGross !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningGross}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Treatment </Label>\r\n                            <Input\r\n                                    type=\"select\"\r\n                                    name=\"screenTreatment\"\r\n                                    id=\"screenTreatment\"\r\n                                    value={objValues.screenTreatment}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> Select</option>\r\n                \r\n                                        {type.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screenTreatment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenTreatment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            {objValues.screenTreatment!==\"\" && (\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Screening Treatment Method Date</Label>\r\n                            <Input\r\n                                    type=\"date\"\r\n                                    name=\"screenTreatmentMethodDate\"\r\n                                    id=\"screenTreatmentMethodDate\"\r\n                                    value={objValues.screenTreatmentMethodDate}\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    required\r\n                                    >\r\n                                </Input>\r\n                                {errors.screenTreatmentMethodDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screenTreatmentMethodDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                            </div>\r\n                            )}                        \r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Referral </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"screeningRefferal\"\r\n                                    id=\"screeningRefferal\"\r\n                                    value={objValues.screeningRefferal}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                    >\r\n                                        <option value=\"Select\"> </option>\r\n                \r\n                                        {referrals.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.screeningRefferal !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.screeningRefferal}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                        </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType ==='update' ?\r\n                        (\r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    //disabled={objValues.screeningResult===\"\" || objValues.screenMethod===\"\" || objValues.screenType===\"\" || objValues.visible===\"\" || objValues.screeningResult===\"\"  || objValues.gross===\"\" || objValues.referrals===\"\" || objValues.screenTreatment===\"\" ? true : false}\r\n                    disabled={objValues.dateOfScreening===\"\" || objValues.screenMethod===\"\" || objValues.screenType===\"\" ? true : false}\r\n                    onClick={handleSubmit}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    ) :\"\"}\r\n                    {/* <MatButton\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    startIcon={<CancelIcon />}\r\n                    \r\n                    >\r\n                        <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                    </MatButton>\r\n                 */}\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                     \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default CervicalCancer;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["691","692"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport ConsultationPage from './Home';\r\nimport ClinicHistoryPage from \"./ViewUpdate/ClinicHistory\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst ClinicVisitPage = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const patientObj = props.patientObj\r\n    const [loading, setLoading] = useState(true)\r\n    const [clinicVisitList, setClinicVisitList] = useState([])\r\n    useEffect ( () => {\r\n      ClinicVisitListHistory();\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id, props.activeContent.activeTab]);\r\n    async function ClinicVisitListHistory() {\r\n      setLoading(true)\r\n      axios\r\n          .get(`${baseUrl}hiv/art/clinic-visit/person?pageNo=0&pageSize=1000&personId=${props.patientObj.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              setLoading(false)\r\n              setClinicVisitList(response.data.filter((x)=> x.isCommencement!==true));              \r\n          })\r\n          .catch((error) => {  \r\n              setLoading(false)  \r\n          });        \r\n    }\r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n\r\n                  <Tab eventKey=\"home\" title=\"CLINIC VISIT \">                   \r\n                    <ConsultationPage patientObj={patientObj} setActiveContent={props.setActiveContent}  ClinicVisitListHistory={ClinicVisitListHistory}/>\r\n                  </Tab>  \r\n                  <Tab eventKey=\"history\" title=\" HISTORY\">                   \r\n                    <ClinicHistoryPage patientObj={patientObj} activeContent={props.activeContent} setActiveContent={props.setActiveContent} clinicVisitList={clinicVisitList} ClinicVisitListHistory={ClinicVisitListHistory}/>\r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ClinicVisitPage;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\EacOutCome.js",["693","694","695","696"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [currentViralLoad, setCurrentViralLoad] = useState({});\r\n    const [currentRegimen, setCurrentRegimen] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [regimenLine, setRegimenLine] = useState([]);\r\n    const [regimenLineLineType, setRegimenLineLineType] = useState([]);\r\n    const [objValues, setObjValues]=useState({\r\n                                                currentRegimen: \"\",\r\n                                                planAction:\"\",\r\n                                                eacId: props.activeContent.obj.id,\r\n                                                id: \"\",\r\n                                                outComeDate: \"\",\r\n                                                outcome: \"\",\r\n                                                repeatViralLoader:\"\",\r\n                                                personId: props.patientObj.id,\r\n                                                plan: \"\",\r\n                                                visitId: \"\",\r\n                                                switchRegimen:\"\",\r\n                                                comment:\"\"\r\n                                            })\r\n    const [switchs, setSwitchs]=useState({\r\n            currentRegimen: \"\",\r\n            switchRegimen: \"\",\r\n            dateSwitched: \"\",\r\n            reasonSwitched: \"\",\r\n            switchRegimenLine:\"\",\r\n            switchRegimenLineType:\"\"\r\n            \r\n        })\r\n    const [Substitutes, setSubstitutes]=useState({\r\n        reasonSubstituted: \"\",\r\n        substituteRegimen: \"\",\r\n        dateSubstituted: \"\",\r\n        reasonSwitched: \"\",\r\n        \r\n    })  \r\n    useEffect(() => {\r\n        //EACHistory()\r\n        CurrentLabResult()\r\n        CurrentRegimen()\r\n        RegimenLine()\r\n    }, [props.patientObj.id]);\r\n    ///GET LIST OF EAC\r\n    // const EACHistory =()=>{\r\n    //     setLoading(true)\r\n    //     axios\r\n    //         .get(`${baseUrl}hiv/eac/out-come?eacId=${props.activeContent.obj.id}`,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //         setLoading(false)\r\n    //         //setObjValues(response.data)\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });    \r\n    // }\r\n    ///GET CURRENT LAB RESULT\r\n    const CurrentLabResult =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}laboratory/rde-orders/latest-viral-loads/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n            setCurrentViralLoad(response.data)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    ///GET CURRENT LAB RESULT\r\n    const RegimenLine =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/types`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n            const filterRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===3 || x.id===4 || x.id===14))\r\n            setRegimenLine(filterRegimen)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    ///GET CURRENT Regimen\r\n    const CurrentRegimen =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}hiv/art/pharmacy/patient/current-regimen/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n            setCurrentRegimen(response.data)\r\n            if(response.data){\r\n                const regimenTypeID=response.data && response.data.regimenType ? response.data.regimenType.id :\"\"\r\n                axios\r\n                    .get(`${baseUrl}hiv/regimen/types/${regimenTypeID}`,\r\n                        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                    )\r\n                    .then((response) => {\r\n                    setLoading(false)\r\n                    setRegimenType(response.data)\r\n                    \r\n                    })\r\n                    .catch((error) => {\r\n                    //console.log(error);\r\n                    }); \r\n            }\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    const handleInputSwitchChange = e => {//this function is to handle form input\r\n        //console.log(switchs)\r\n        setSwitchs ({...switchs,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleInputSubstituteChange = e => {//this function is to handle form input\r\n        setSubstitutes ({...Substitutes,  [e.target.name]: e.target.value});\r\n    } \r\n    const handleInputChange = e => {//this function is to handle form input\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }    \r\n    const BackToSession = (row, actionType) =>{  //this function is to handle back button\r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        \r\n        props.setActiveContent({...props.activeContent, route:'eac-session', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     } \r\n     const handleSelectedRegimen = e => {//this function is to handle form input\r\n        const regimenId= e.target.value\r\n        setSwitchs ({...switchs,  [e.target.name]: e.target.value});\r\n        if(regimenId!==\"\"){\r\n            RegimenType(regimenId)\r\n            //setShowRegimen(true)\r\n        }else{\r\n            setRegimenType([])\r\n            //setShowRegimen(false)\r\n        }\r\n    } \r\n    function RegimenType(id) {//Get Regimen by regimen ID \r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenLineLineType(response.data)\r\n                    \r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }     \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.currentRegimen=currentRegimen && currentRegimen.description ? currentRegimen.description :\"\"\r\n          if(objValues.plan==='Substitute regimen'){\r\n            objValues.planAction=Substitutes\r\n          }\r\n          if(objValues.plan==='Switch regimen'){\r\n            objValues.planAction=switchs\r\n          }\r\n          axios.post(`${baseUrl}hiv/eac/out-come?eacId=${props.activeContent.obj.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"EAC outcome Save successful\");\r\n                  props.setActiveContent({...props.activeContent, route:'counseling', activeTab:\"home\"})\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n\r\n  return (      \r\n        <div>  \r\n                          \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>EAC - Outcome \r\n                    <ButtonMui\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-end ms-2 mr-2 mt-2 \"\r\n                        //startIcon={<FaUserPlus size=\"10\"/>}\r\n                        //startIcon={<TiArrowBack  />}\r\n                        onClick={()=>BackToSession(props.activeContent.obj, 'view')}\r\n                        style={{backgroundColor:\"#014D88\", color:'#fff', height:'35px'}}\r\n\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\" }}>Back To EAC Session</span>\r\n                    </ButtonMui>\r\n                    </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        \r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Current Viral Load Result</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"viralLoadResult\"\r\n                                    id=\"viralLoadResult\"\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    value={currentViralLoad && currentViralLoad.result ? currentViralLoad.result :\"\"}\r\n                               />\r\n                                 \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Current Viral Load Result Date </Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"dateResultReceived\"\r\n                                id=\"dateResultReceived\"\r\n                                //value={objValues.dateResultReceived}\r\n                                value={currentViralLoad && currentViralLoad.dateResultReceived ? currentViralLoad.dateResultReceived :\"\"}\r\n                                //onChange={handleInputChange}\r\n                                //min={objValues.dateOfEac2}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled\r\n                            />\r\n                           </FormGroup> \r\n                        </div>\r\n                        <hr/>\r\n                        <h2>Outcome</h2>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Outcome </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"outcome\"\r\n                                    id=\"outcome\"\r\n                                    value={objValues.outcome}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Suppressed\">Suppressed</option> \r\n                                 <option value=\"Unsuppressed\">Unsuppressed</option>                                  \r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Plan </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"plan\"\r\n                                    id=\"plan\"\r\n                                    value={objValues.plan}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Remain on current regimen\">Remain on current regimen</option> \r\n                                 <option value=\"Switch regimen\">Switch regimen</option> \r\n                                 <option value=\"Substitute regimen\">Substitute regimen</option>\r\n                                 <option value=\"Refer to doctor for further management\">Refer to doctor for further management</option>                               \r\n                                </Input>                                 \r\n                                </FormGroup>\r\n                        </div>\r\n                        {objValues.plan==='Switch regimen' && (<>\r\n                        <div className=\"row\">\r\n                        <h4>Switch Regimen</h4>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Current Regimen </Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"currentRegimen\"\r\n                                    id=\"currentRegimen\"\r\n                                    value={currentRegimen && currentRegimen.description ? currentRegimen.description :\"\"}\r\n                                    onChange={handleInputChange}\r\n                                    disabled\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                /> \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Switch Regimen Line </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"switchRegimenLine\"\r\n                                    id=\"switchRegimenLine\"\r\n                                    value={switchs.switchRegimenLine}\r\n                                    onChange={handleSelectedRegimen}\r\n                                    \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 {regimenLine.filter((x)=>x.id!==currentRegimen.regimenType.id).map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Switch Regimen Type</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"switchRegimenLineType\"\r\n                                    id=\"switchRegimenLineType\"\r\n                                    value={switchs.switchRegimenLineType}\r\n                                    onChange={handleInputSwitchChange}\r\n                                    \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 {regimenLineLineType.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Switch Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateSwitched\"\r\n                                id=\"dateSwitched\"\r\n                                value={switchs.dateSwitched}\r\n                                onChange={handleInputSwitchChange}\r\n                                min= {moment(currentViralLoad && currentViralLoad.dateResultReceived ? currentViralLoad.dateResultReceived :\"\").format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateSwitched !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateSwitched}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for switching Regimen</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"reasonSwitched\"\r\n                                id=\"reasonSwitched\"\r\n                                value={switchs.reasonSwitched}\r\n                                onChange={handleInputSwitchChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        </>)}\r\n                        {objValues.plan==='Substitute regimen' && (<>\r\n                        <div className=\"row\">\r\n                        <h4>Substitute Regimen</h4>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Current Regimen </Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"currentRegimen\"\r\n                                    id=\"currentRegimen\"\r\n                                    value={currentRegimen && currentRegimen.description ? currentRegimen.description :\"\"}\r\n                                     onChange={handleInputChange}\r\n                                    disabled\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                \r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Substitute Regimen </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"substituteRegimen\"\r\n                                    id=\"substituteRegimen\"\r\n                                    value={Substitutes.substituteRegimen}\r\n                                    onChange={handleInputSubstituteChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 {regimenType.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                    ))}\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Substitute Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateSubstituted\"\r\n                                id=\"dateSubstituted\"\r\n                                value={Substitutes.dateSubstituted}\r\n                                onChange={handleInputSubstituteChange}\r\n                                min= {moment(currentViralLoad && currentViralLoad.dateResultReceived ? currentViralLoad.dateResultReceived :\"\").format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateSubstituted !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateSubstituted}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Substitute Regimen</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"reasonSubstituted\"\r\n                                id=\"reasonSubstituted\"\r\n                                value={Substitutes.reasonSubstituted}\r\n                                onChange={handleInputSubstituteChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        </>)}\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Outcome Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"outComeDate\"\r\n                                id=\"outComeDate\"\r\n                                value={objValues.outComeDate}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(currentViralLoad && currentViralLoad.dateResultReceived ? currentViralLoad.dateResultReceived :\"\").format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.outComeDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.outComeDate}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>   \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"comment\"\r\n                                id=\"comment\"\r\n                  \r\n                                value={objValues.comment}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac3===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ClientStatusUpdate\\ClientStatusUpdate.js",["697","698","699","700","701","702","703","704","705","706"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ClientStatusUpdate = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const classes = useStyles()\r\n    const [hivStatus, setHivStatus] = useState([]);\r\n    const [reasonForInteruption, setReasonForInteruption] = useState([]);\r\n    const [causeDeath, setCauseDeath] = useState([]);\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({ agreedDate: null,\r\n                                                causeOfDeath: null,\r\n                                                facilityId: \"\",\r\n                                                hivStatus: \"\",\r\n                                                personId: \"\",\r\n                                                reasonForInterruption: \"\",\r\n                                                statusDate: null,\r\n                                                dateConfirmedDied:\"\",\r\n                                                reasonForStoppingTreatment:\"\",\r\n                                                dateStopped:\"\",\r\n                                                dateArtTransferOut:\"\",\r\n                                                datePreArtTransferOut:\"\",\r\n                                                visitId: null\r\n                                            });\r\n\r\n    useEffect(() => {\r\n        CauseDeath();\r\n        ReasonForInteruption();\r\n        HIVStatus();\r\n        //TrackingOutcome();\r\n      }, []);\r\n\r\n    //Get list of HIV_STATUS\r\n    const HIVStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/HIV_STATUS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               \r\n               setHivStatus(response.data.filter((x)=> x.display!=='Lost to Follow Up' && x.display!=='ART Transfer In' && x.display!=='ART Start' && x.display!=='ART Restart' && x.display!=='Pre-ART Transfer In' && x.display!==patientObj.currentStatus && x.display!=='HIV Exposed Status Unknown' && x.display!=='HIV Negative' && x.display!=='HIV+ non ART'));\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    // REASON_INTERRUPTION\r\n    const ReasonForInteruption =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/REASON_INTERRUPTION`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setReasonForInteruption(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    // CAUSE_DEATH\r\n    const CauseDeath =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setCauseDeath(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n        temp.hivStatus = objValues.hivStatus ? \"\" : \"This field is required\"\r\n        temp.statusDate = objValues.statusDate ? \"\" : \"This field is required\"\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n        }     \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault(); \r\n        if(validate()){       \r\n          objValues.personId= patientObj.id\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}hiv/status/`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);                  \r\n                  toast.success(\"Client Status Update Successfully!\");\r\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });  \r\n            }        \r\n    }\r\n\r\n  return (      \r\n        <div>                  \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n\r\n                    <div className=\"col-md-6\">\r\n                    <h2> Client Status Update </h2>\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <div className=\"form-group mb-3 col-md-6\"></div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >New Status</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"hivStatus\"\r\n                                id=\"hivStatus\"\r\n                                value={objValues.hivStatus}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                {hivStatus.map((value) => (\r\n                                <option key={value.id} value={value.display}>\r\n                                    {value.display}\r\n                                </option>\r\n                                ))}\r\n                            </Input>\r\n                            {errors.hivStatus !==\"\" ? (\r\n                                <span className={classes.error}>{errors.hivStatus}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"participant_id\">Date of New Status </Label>                           \r\n                             <Input\r\n                                type=\"date\"\r\n                                name=\"statusDate\"\r\n                                id=\"statusDate\"\r\n                                value={objValues.statusDate}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            /> \r\n                            {errors.statusDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.statusDate}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        {objValues.hivStatus==='ART Transfer Out' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Transfer Out</Label>                           \r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateArtTransferOut\"\r\n                                id=\"dateArtTransferOut\"\r\n                                value={objValues.dateArtTransferOut}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            /> \r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                        {objValues.hivStatus==='Pre-ART Transfer Out' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Transfer Out</Label>                           \r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"datePreArtTransferOut\"\r\n                                id=\"datePreArtTransferOut\"\r\n                                value={objValues.datePreArtTransferOut}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            /> \r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                         {objValues.hivStatus==='Stopped Treatment' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Stopped</Label>\r\n                           \r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateStopped\"\r\n                                id=\"dateStopped\"\r\n                                value={objValues.dateStopped}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            /> \r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Reason For Stopping Treatment</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonForStoppingTreatment\"\r\n                                id=\"reasonForStoppingTreatment\"\r\n                                value={objValues.reasonForStoppingTreatment}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                {causeDeath.map((value) => (\r\n                                <option key={value.id} value={value.display}>\r\n                                    {value.display}\r\n                                </option>\r\n                                ))}\r\n                            </Input>\r\n                           \r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                        {objValues.hivStatus==='Died (Confirmed)' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Cause of Death</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"causeOfDeath\"\r\n                                id=\"causeOfDeath\"\r\n                                value={objValues.causeOfDeath}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                {causeDeath.map((value) => (\r\n                                <option key={value.id} value={value.display}>\r\n                                    {value.display}\r\n                                </option>\r\n                                ))}\r\n                            </Input>\r\n                            {errors.trackOutcome !==\"\" ? (\r\n                                <span className={classes.error}>{errors.trackOutcome}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"participant_id\">Date Confirmed Died</Label>\r\n                           \r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateConfirmedDied\"\r\n                                id=\"dateConfirmedDied\"\r\n                                value={objValues.dateConfirmedDied}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            /> \r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                    </div>\r\n                   \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    onClick={handleSubmit}\r\n                        >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n               \r\n                </form>\r\n                </CardBody>\r\n            </Card>                  \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default ClientStatusUpdate;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\FirstEAC.js",["707","708","709","710","711","712","713"],"import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport FirstEAC from './EnhancedAdherenceCounseling';\r\nimport SecondEac from './SecondEac';\r\nimport ThirdEac from './ThirdEac';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [eacList, setEacList] = useState([])\r\n    const [eacObj, setEacObj] = useState([])\r\n    const [hideFirst, setHideFirst] = useState(false)\r\n    const [hideSecond, setHideSecond] = useState(false)\r\n    const [hideThird, setHideThird] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        EAC()\r\n      }, [props.patientObj.id]);\r\n    //GET LIST OF EAC\r\n    async function EAC() {\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}observation/eac/person/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setEacList(response.data); \r\n                setEacObj(response.data) \r\n                const responseObj = response.data.filter((x)=> x.status !=='Completed') \r\n                if(responseObj<1) {\r\n                    setHideFirst(false)\r\n                    setHideSecond(false)\r\n                    setHideThird(false)\r\n                }else if(responseObj[0].status==='First'){\r\n                    setHideFirst(true)\r\n                    setHideSecond(true)\r\n                    setHideThird(false)\r\n                }else if(responseObj[0].status==='Second'){\r\n                    setHideFirst(true)\r\n                    setHideSecond(false)\r\n                    setHideThird(true)\r\n                } else if(responseObj[0].status==='Completed'){\r\n                    setHideFirst(true)\r\n                    setHideSecond(false)\r\n                    setHideThird(false)\r\n                }            \r\n            })\r\n            .catch((error) => {  \r\n                setLoading(false)  \r\n            });        \r\n    }\r\n\r\n  return (      \r\n        <div> \r\n\r\n                    {!hideFirst && (<FirstEAC patientObj={patientObj} setEacObj={setEacObj} setHideFirst={setHideFirst} setHideSecond={setHideSecond} setActiveContent={props.setActiveContent}/>)} \r\n               \r\n                    {hideSecond && (<SecondEac patientObj={patientObj} setEacObj={setEacObj} setHideSecond={setHideSecond} setHideThird={setHideThird} setActiveContent={props.setActiveContent}/> )} \r\n                    {hideThird && (<ThirdEac patientObj={patientObj} setEacObj={setEacObj} setHideFirst={setHideFirst} setHideThird={setHideThird} setActiveContent={props.setActiveContent}/> )}                  \r\n                          \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\index.js",["714"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport ViralLoadOrderResult from './ViralLoadOrderResult';\r\nimport ViralLoadOrderResultHistory from \"./ViralLoadOrderResultHistory\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\n//import LaboratoryRDE from \"./LaboratoryRDE\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst LaboratoryModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const [orderList, setOrderList] = useState([])\r\n    const patientObj = props.patientObj\r\n    useEffect ( () => {\r\n      LabOrders();\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id, props.activeContent.activeTab]);\r\n    //GET Patient Lab order history\r\n    const  LabOrders=()=> {\r\n      //setLoading(true)\r\n      axios\r\n          .get(`${baseUrl}laboratory/vl-results/patients/${props.patientObj.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              //setLoading(false)\r\n              setOrderList(response.data);                \r\n          })\r\n          .catch((error) => {  \r\n              //setLoading(false)  \r\n          });        \r\n    }\r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                  {/* <Tab eventKey=\"checked-in\" title=\"Checked In Patients\">                   \r\n                    <CheckedInPatients />\r\n                  </Tab> */}\r\n                  {/* <Tab eventKey=\"home\" title=\"VIRAL LOAD ORDER\">                   \r\n                    <ViralLoadOrder patientObj={patientObj} setActiveContent={props.setActiveContent} LabOrders={LabOrders}/>\r\n                  </Tab> */}\r\n                  <Tab eventKey=\"viralLoad\" title=\"VIRAL LOAD ORDER & RESULT\">                   \r\n                    <ViralLoadOrderResult patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} LabOrders={LabOrders}/>\r\n                  </Tab>\r\n                  <Tab eventKey=\"history\" title=\" HISTORY\">                   \r\n                    <ViralLoadOrderResultHistory patientObj={patientObj} setActiveContent={props.setActiveContent} orderList={orderList} LabOrders={LabOrders}/>\r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LaboratoryModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TransferForm\\Index.js",["715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } ,\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n      },\r\n}))\r\n\r\nconst Tracking = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [eacObj, setEacObj] = useState([]);\r\n    \r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"yyyy-MM-dd\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Tracking form\",\r\n        visitId: null\r\n    })\r\n    const [objValues, setObjValues]=useState({\r\n            durationOnART:\"\", \r\n            dsdStatus:\"\", \r\n            dsdModel:\"\", \r\n            reasonForTracking:\"\",\r\n            dateLastAppointment:\"\",\r\n            dateMissedAppointment :\"\",\r\n            careInFacilityDiscountinued :\"\",\r\n            dateOfDiscontinuation :\"\",\r\n            reasonForDiscountinuation:\"\",\r\n            reasonForLossToFollowUp :\"\",\r\n            causeOfDeath :\"\",\r\n            dateReturnToCare :\"\",\r\n            referredFor:\"\",\r\n            referredForOthers:\"\",\r\n            reasonForTrackingOthers:\"\",\r\n            causeOfDeathOthers:\"\",\r\n            reasonForLossToFollowUpOthers:\"\",\r\n            attempts:\"\",\r\n            patientId:props.patientObj.id\r\n            })\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }  \r\n    const [attempt, setAttempt] = useState({ attemptDate: \"\", whoAttemptedContact: \"\", \r\n                modeOfConatct: \"\", personContacted: \"\", reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n    });\r\n    const [attemptList, setAttemptList] = useState([])          \r\n    const handleInputChangeAttempt = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setAttempt ({...attempt,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n    temp.durationOnART = objValues.durationOnART ? \"\" : \"This field is required\"\r\n    temp.dsdStatus = objValues.dsdStatus ? \"\" : \"This field is required\"\r\n    {objValues.dsdStatus==='Devolved' && (temp.dsdModel = objValues.dsdModel ? \"\" : \"This field is required\")}\r\n    temp.reasonForTracking = objValues.reasonForTracking ? \"\" : \"This field is required\"\r\n    temp.dateLastAppointment = objValues.dateLastAppointment ? \"\" : \"This field is required\"\r\n    temp.dateMissedAppointment = objValues.dateMissedAppointment ? \"\" : \"This field is required\"\r\n\r\n    temp.careInFacilityDiscountinued = objValues.careInFacilityDiscountinued ? \"\" : \"This field is required\"\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.dateOfDiscontinuation = objValues.dateOfDiscontinuation ? \"\" : \"This field is required\")}\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.reasonForDiscountinuation = objValues.reasonForDiscountinuation ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Loss to follow-up' && (temp.reasonForLossToFollowUp = objValues.reasonForLossToFollowUp ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Death' && (temp.causeOfDeath = objValues.causeOfDeath ? \"\" : \"This field is required\")}\r\n    temp.dateReturnToCare = objValues.dateReturnToCare ? \"\" : \"This field is required\"\r\n    temp.referredFor = objValues.referredFor ? \"\" : \"This field is required\"\r\n    {objValues.referredFor==='Others' && (temp.referredForOthers = objValues.referredForOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForTracking==='Others' && (temp.reasonForTrackingOthers = objValues.reasonForTrackingOthers ? \"\" : \"This field is required\")}\r\n    {objValues.causeOfDeath==='Unknown' || objValues.causeOfDeath==='Other cause of death' || objValues.causeOfDeath==='Suspected Opportunistic Infection' && (temp.causeOfDeathOthers = objValues.causeOfDeathOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForLossToFollowUp==='Others' && ( temp.reasonForLossToFollowUpOthers = objValues.reasonForLossToFollowUpOthers ? \"\" : \"This field is required\")}\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Validations of the forms\r\n    const validateAttempt = () => {        \r\n    temp.attemptDate = attempt.attemptDate ? \"\" : \"This field is required\"\r\n    temp.whoAttemptedContact = attempt.whoAttemptedContact ? \"\" : \"This field is required\"\r\n    temp.modeOfConatct = attempt.modeOfConatct ? \"\" : \"This field is required\"\r\n    temp.personContacted = attempt.personContacted ? \"\" : \"This field is required\"\r\n    temp.reasonForDefaulting = attempt.reasonForDefaulting ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addAttempt = e => {\r\n        if(validateAttempt()){ \r\n            setAttemptList([...attemptList, attempt])\r\n            setAttempt({attemptDate: \"\", whoAttemptedContact: \"\", \r\n                        modeOfConatct: \"\", personContacted: \"\", \r\n                        reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n            })\r\n        }else{\r\n            toast.error(\"Please fill the required fields\");\r\n        }\r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        attemptList.splice(index, 1);\r\n        setAttemptList([...attemptList]);        \r\n    }; \r\n    \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            if(attemptList.length >0){\r\n                objValues.attempts=attemptList\r\n                observation.dateOfObservation= moment(new Date()).format(\"YYYY-MM-DD\")       \r\n                observation.personId =patientObj.id\r\n                observation.data=objValues        \r\n                setSaving(true);\r\n                axios.post(`${baseUrl}patient-tracker`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        toast.success(\" Save successful\");\r\n                        props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                        //props.setActiveContent('recent-history')\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            toast.error(errorMessage);\r\n                        }\r\n                        else{\r\n                            toast.error(\"Something went wrong. Please try again...\");\r\n                        }\r\n                    });\r\n                }else{\r\n                    toast.error(\"Attempt to Contact can not be empty\");\r\n                }\r\n            }  \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Transfer Form</h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Facility Name From</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"durationOnART\"\r\n                                    id=\"durationOnART\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.durationOnART} \r\n                                >\r\n                                </Input>\r\n                                {errors.durationOnART !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.durationOnART}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> State Transfer From</Label>\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdStatus\"\r\n                                    id=\"dsdStatus\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdStatus} \r\n                                >\r\n                                   <option value=\"Not devolved\">Not devolved</option>\r\n                                    <option value=\"Devolved\">Devolved</option>\r\n                                    \r\n                                </Input>\r\n                                {errors.dsdStatus !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdStatus}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.dsdStatus==='Devolved' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">LGA Transfer From</Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdModel\"\r\n                                    id=\"dsdModel\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdModel} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"FBM\">FBM</option>\r\n                                    <option value=\"CBM\">CBM</option>\r\n                                </Input>\r\n                                {errors.dsdModel !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdModel}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Facility Name To</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"durationOnART\"\r\n                                    id=\"durationOnART\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.durationOnART} \r\n                                >\r\n                                </Input>\r\n                                {errors.durationOnART !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.durationOnART}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> State Transfer To</Label>\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdStatus\"\r\n                                    id=\"dsdStatus\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdStatus} \r\n                                >\r\n                                   <option value=\"Not devolved\">Not devolved</option>\r\n                                    <option value=\"Devolved\">Devolved</option>\r\n                                    \r\n                                </Input>\r\n                                {errors.dsdStatus !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdStatus}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.dsdStatus==='Devolved' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">LGA Transfer To</Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdModel\"\r\n                                    id=\"dsdModel\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdModel} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"FBM\">FBM</option>\r\n                                    <option value=\"CBM\">CBM</option>\r\n                                </Input>\r\n                                {errors.dsdModel !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdModel}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-12\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Clinical Note</Label>\r\n\r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"reasonForTracking\"\r\n                                    id=\"reasonForTracking\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTracking} \r\n                                >\r\n                                  \r\n                                </Input>\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Confirmed HIV Positive</Label>\r\n\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Mode of HIV Test</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Preganacy Status</Label>\r\n\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Gestational Age in weeks</Label>\r\n\r\n                                <Input \r\n                                    type=\"number\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Enroll in Care</Label>\r\n\r\n                            <Input \r\n                                    type=\"date\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Enroll in Treatment</Label>\r\n\r\n                                <Input \r\n                                    type=\"number\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Current WHO Clinical Stage</Label>\r\n\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Baseline CD4 Counts(mm3 )</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Current CD4</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Current viral load (copies/ml)</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Height/length </Label>\r\n\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Weight</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">BMI/MUAC </Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Original first line ART regimen</Label>\r\n\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Current Regimen Line</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Adherence Measure </Label>\r\n                            <Input \r\n                                type=\"text\"\r\n                                name=\"reasonForTrackingOthers\"\r\n                                id=\"reasonForTrackingOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForTrackingOthers} \r\n                            />\r\n                            </FormGroup>\r\n                        </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Current Medications/ Dose </Label>\r\n                            <br/>\r\n                            <p>Medications list will be here </p>\r\n                            </FormGroup>\r\n                        </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Latest lab results </Label>\r\n                                <br/>\r\n                                <p>Lab list will be here </p>\r\n                                </FormGroup>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Reason for Transfer</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Name of Treatment supporter</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-12\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Additional Notes and/or Recommendations</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateMissedAppointment\"\r\n                                id=\"dateMissedAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateMissedAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateMissedAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateMissedAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div> \r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Clinicians's Name</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Clinicians's Name</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date of last clinical visit at transferring site</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date of first confirmed scheduled appointment at the receiving site</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Name of the person effecting the transfer</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Telephone Number</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                    <h3>ACKNOWLEDGEMENT OF TRANSFER (to be completed by receiving ART service point)</h3>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\"> Patient came with Transfer form</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Patient has attended his/her first visit at our ART site</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Received date</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Date of visit</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Date of visit</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Name of the Clinician receiving the transfer</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">Telephone Number</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateLastAppointment\"\r\n                            id=\"dateLastAppointment\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateLastAppointment} \r\n                            //min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        {errors.dateLastAppointment !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac1===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nfunction AttemptedLists({\r\n    attemptObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n  \r\n  \r\n    return (\r\n            <tr>\r\n                <th>{attemptObj.attemptDate}</th>\r\n                <th>{attemptObj.whoAttemptedContact}</th>\r\n                <th>{attemptObj.modeOfConatct}</th>\r\n                <th>{attemptObj.personContacted}</th>\r\n                <th>{attemptObj.reasonForDefaulting==='' ? attemptObj.reasonForDefaultingOthers : attemptObj.reasonForDefaulting}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Tracking;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\IntensiveFollowUp\\Index.js",["743","744","745"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } ,\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n      },\r\n}))\r\n\r\nconst Tracking = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [selected, setSelected] = useState([]);\r\n    const [optionsForSelection, setOptionsForSelection] = useState([]);\r\n    const [optionsForCallOutCome, setOptionsForCallOutCome] = useState([]);\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Intensive follow up\",\r\n        visitId: null\r\n    })\r\n\r\n    const [attempt, setAttempt] = useState({  \r\n            caller:\"\", \r\n            callOutcome:\"\",\r\n            comment:\"\",\r\n            missedMedication:\"\",\r\n            howDoYouFeelGenerally:\"\",\r\n            anyOfTheFollowing:\"\",\r\n            callDate:\"\",\r\n    });\r\n    const [attemptList, setAttemptList] = useState([])  \r\n    const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n    useEffect(() => {\r\n        GENERAL_FEELING();\r\n        CALL_OUTCOME();\r\n        PrepSideEffect();\r\n        GetPatientDTOObj();\r\n    }, []); \r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO.dateOfRegistration)\r\n               //setEacStatusObj(response.data);\r\n               //\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n          \r\n    } \r\n    const GENERAL_FEELING =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/GENERAL_FEELING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setOptionsForSelection(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const CALL_OUTCOME =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CALL_OUTCOME`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setOptionsForCallOutCome(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }  \r\n    //Get list of PrepSideEffect\r\n    const PrepSideEffect =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n\r\n                setPrepSideEffect(Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.display,\r\n                    value: value.display,\r\n                })));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }     \r\n    const handleInputChangeAttempt = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setAttempt ({...attempt,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleInputChange = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObservation ({...observation,  [e.target.name]: e.target.value});\r\n    }\r\n    const onSelect = (selectedValues) => {\r\n        setSelected(selectedValues);\r\n\r\n    };\r\n    //Validations of the forms\r\n    const validateAttempt = () => { \r\n    attempt.anyOfTheFollowing=selected       \r\n    temp.caller = attempt.caller ? \"\" : \"This field is required\"\r\n    temp.callOutcome = attempt.callOutcome ? \"\" : \"This field is required\"\r\n    temp.comment = attempt.comment ? \"\" : \"This field is required\"\r\n    temp.missedMedication = attempt.missedMedication ? \"\" : \"This field is required\"\r\n    temp.howDoYouFeelGenerally = attempt.howDoYouFeelGenerally ? \"\" : \"This field is required\"\r\n    temp.anyOfTheFollowing = attempt.anyOfTheFollowing ? \"\" : \"This field is required\"\r\n    temp.callDate = attempt.callDate ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x === \"\")\r\n  }\r\n    const addAttempt = e => {\r\n        attempt.anyOfTheFollowing=selected\r\n        if(validateAttempt()){ \r\n            setAttemptList([...attemptList, attempt])\r\n            setAttempt({caller:\"\", \r\n            callOutcome:\"\",\r\n            comment:\"\",\r\n            missedMedication:\"\",\r\n            howDoYouFeelGenerally:\"\",\r\n            anyOfTheFollowing:\"\",\r\n            callDate:\"\",\r\n            })\r\n        }else{\r\n            toast.error(\"Please fill the required fields\");\r\n        }\r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        attemptList.splice(index, 1);\r\n        setAttemptList([...attemptList]);        \r\n    }; \r\n    \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n            if(attemptList.length >0){\r\n                observation.dateOfObservation= observation.dateOfObservation !==\"\" ? observation.dateOfObservation : moment(new Date()).format(\"YYYY-MM-DD\")       \r\n                observation.personId =patientObj.id\r\n                observation.data=attemptList        \r\n                setSaving(true);\r\n                axios.post(`${baseUrl}observation`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        toast.success(\"Intensive follow up form Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                        //props.setActiveContent('recent-history')\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                                toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }else{\r\n                                toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }\r\n                        }\r\n                        else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    });\r\n                }else{\r\n                    toast.error(\"Attempt to Contact can not be empty\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n       \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Intensive Follow Up Form</h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <hr/>\r\n                        <h3>Attempted to Contact</h3>\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of call <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"callDate\"\r\n                                    id=\"callDate\"\r\n                                    value={attempt.callDate}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.callDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.callDate}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >How do you feel generally? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"howDoYouFeelGenerally\"\r\n                                    id=\"howDoYouFeelGenerally\"\r\n                                    value={attempt.howDoYouFeelGenerally}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                    <option value=\"\">Select</option> \r\n                                    {optionsForSelection.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input> \r\n                                {errors.howDoYouFeelGenerally !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.howDoYouFeelGenerally}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-12\">\r\n                                <FormGroup>\r\n                                <Label >Do you have any of the following <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <DualListBox\r\n                                //canFilter\r\n                                    options={prepSideEffect}\r\n                                    onChange={onSelect}\r\n                                    selected={selected}\r\n                                /> \r\n                                \r\n                                {errors.anyOfTheFollowing !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.anyOfTheFollowing}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Have you missed any doses of your medications in the past 7 days <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"missedMedication\"\r\n                                        id=\"missedMedication\"\r\n                                        value={attempt.missedMedication}\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        \r\n                                    >\r\n                                    <option value=\"\">Select</option> \r\n                                    <option value=\"Yes\">Yes</option> \r\n                                    <option value=\"No\">No</option> \r\n                                    </Input> \r\n                                    {errors.missedMedication !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.missedMedication}</span>\r\n                                    ) : \"\" }   \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Comment <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"comment\"\r\n                                        id=\"comment\"\r\n                                        value={attempt.comment}\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.comment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.comment}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Outcome of the call <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"callOutcome\"\r\n                                        id=\"callOutcome\"\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        value={attempt.callOutcome}  \r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {optionsForCallOutCome.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                    </Input>\r\n                                    {errors.callOutcome !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.callOutcome}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Initials of the caller <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"caller\"\r\n                                    id=\"caller\"\r\n                                    value={attempt.caller}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                {errors.caller !==\"\" ? (\r\n                                <span className={classes.error}>{errors.caller}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addAttempt}  size='tiny' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                            </div>\r\n\r\n                            {attemptList.length >0 \r\n                            ?\r\n                                <List>\r\n                                <Table  striped responsive>\r\n                                    <thead >\r\n                                        <tr>\r\n                                            <th>call Date</th>\r\n                                            <th>How Do you Fell</th>\r\n                                            <th>Do you have any of the following</th>\r\n                                            <th>Missed medication in the last 7days</th>\r\n                                            <th>comment</th>\r\n                                            <th>call outcome</th>\r\n                                            <th>Initial call Name</th>\r\n                                            <th ></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {attemptList.map((attemptObj, index) => (\r\n\r\n                                    <AttemptedLists\r\n                                        key={index}\r\n                                        index={index}\r\n                                        attemptObj={attemptObj}\r\n                                        removeAttempt={removeAttempt}\r\n                                    />\r\n                                    ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </List>\r\n                                :\r\n                                \"\"\r\n                            }       \r\n                        <hr/>\r\n                        </div>\r\n                        \r\n\r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={attemptList.length <=0 && !saving ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nfunction AttemptedLists({\r\n    attemptObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n   \r\n    return (\r\n            <tr>\r\n                <th>{attemptObj.callDate}</th>\r\n                <th>{attemptObj.howDoYouFeelGenerally}</th>\r\n                <th>{(attemptObj.anyOfTheFollowing).toString()}</th>\r\n                <th>{attemptObj.missedMedication}</th>\r\n                <th>{attemptObj.comment}</th>\r\n                <th>{attemptObj.callOutcome}</th>\r\n                <th>{attemptObj.caller}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Tracking;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\UpdateLabOrderResult.js",["746","747","748","749","750","751","752","753","754","755","756","757","758"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n//import CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport moment from \"moment\";\r\nimport { toast} from \"react-toastify\";\r\nimport Select from 'react-select'\r\nimport {TiArrowBack} from 'react-icons/ti'\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let fieldHidden=props.activeContent.actionType==='update' ? false : true;\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    const [test, setTest] = useState([]);\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [labNumbers, setLabNumbers] = useState([]);//\r\n    const [selectedOption, setSelectedOption] = useState([]);\r\n    const [defaultSelectedOption, setDefaultSelectedOption] = useState([]);\r\n    const [labTestOptions, setLabTestOptions] = useState([]);\r\n    let testsOptions=[]\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        comments: \"\",\r\n                                        dateAssayed: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateResultReceived:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: 0,\r\n                                        visitId:\"\" ,\r\n                                        checkedBy: \"\",\r\n                                        clinicianName: \"\",\r\n                                        dateChecked: \"\",\r\n                                        dateResultReported: \"\",\r\n                                        id: \"\",\r\n                                        orderId: \"\",\r\n                                        resultReportedBy: \"\",\r\n                                        sampleNumber:\"\"\r\n    })\r\nuseEffect(() => {\r\n        TestGroup();\r\n        ViraLoadIndication();\r\n        CheckEACStatus();\r\n        GetPatientDTOObj();\r\n        LabNumbers();\r\n        setTests({...props.activeContent.obj})\r\n        tests.sampleCollectionDate=moment(props.activeContent.obj.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        tests.dateResultReceived=moment(props.activeContent.obj.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        tests.dateResultReported=moment(props.activeContent.obj.dateResultReported).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        //dateResultReported\r\n    }, [props.patientObj.id, props.activeContent.obj]);\r\n     //Get list of LabNumbers\r\n     const LabNumbers =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/lab-numbers`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLabNumbers(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n     //Get EAC Status\r\n     const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtestgroups`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setTestGroup(response.data);\r\n                const getTestList= response.data.filter((x)=> x.id===parseInt(props.activeContent.obj.labTestGroupId))\r\n                setTest(getTestList[0].labTests)\r\n                //Tests\r\n                response.data.map((x)=> {\r\n                    x.labTests.map((x2)=>{\r\n                        //console.log(x)\r\n                        testsOptions.push({ value: x2.id, label: x2.labTestName,testGroupId:x.id, testGroupName:x.groupName, sampleType:x2.sampleType },)\r\n                    })\r\n                    //console.log(testsOptions)\r\n                })\r\n                setLabTestOptions(testsOptions)\r\n                setSelectedOption(\r\n                    testsOptions.filter((y)=> y.value===props.activeContent.obj.labTestId) \r\n                   \r\n                )\r\n                setDefaultSelectedOption(testsOptions.filter((y)=> y.value===props.activeContent.obj.labTestId))\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            }); \r\n    }\r\n    //console.log(selectedOption);\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n\r\n    const handleInputChangeObject = e => {\r\n        setSelectedOption(e)\r\n        //console.log(e);\r\n        tests.labTestGroupId=e.testGroupId\r\n        tests.labTestId = e.value \r\n        tests.labTestName=e.label\r\n        test.testGroupName=e.testGroupName              \r\n    }\r\n\r\n      //Validations of the forms\r\n      const validate = () => {        \r\n        //temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n        temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        temp.sampleNumber = tests.sampleNumber ? \"\" : \"This field is required\"\r\n        temp.sampleCollectionDate =  tests.sampleCollectionDate ? \"\" : \"This field is required\"\r\n        //tests.labTestId==='16' && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")\r\n        {tests.dateResultReceived!==\"\" && (temp.result = tests.result ? \"\" : \"This field is required\")}\r\n        {tests.result!==\"\" && (temp.dateResultReceived = tests.dateResultReceived ? \"\" : \"This field is required\")}\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();            \r\n        setSaving(true);\r\n        if(validate()){\r\n        tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\") \r\n        tests.dateResultReceived = moment(tests.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        //console.log(tests);\r\n        axios.put(`${baseUrl}laboratory/rde-orders/tests/${props.activeContent.obj.id}`,tests,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Laboratory order & result updated successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                setTests({\r\n                    comments: \"\",\r\n                    dateAssayed: \"\",\r\n                    labNumber: \"\",\r\n                    labTestGroupId: \"\",\r\n                    labTestId: \"\",\r\n                    dateResultReceived:\"\",\r\n                    patientId:props.patientObj?props.patientObj.id:\"\",\r\n                    result: \"\",\r\n                    sampleCollectionDate: \"\",\r\n                    viralLoadIndication: \"\",\r\n                    visitId:\"\" ,\r\n                    checkedBy: \"\",\r\n                    clinicianName: \"\",\r\n                    dateChecked: \"\",\r\n                    dateResultReported: \"\",\r\n                    id: \"\",\r\n                    orderId: \"\",\r\n                    resultReportedBy: \"\",\r\n                })\r\n                props.setActiveContent({...props.activeContent, route:'laboratoryOrderResult', id:props.activeContent.obj.id, activeTab:\"history\", actionType:\"update\", obj:props.activeContent.obj})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }else{\r\n                    toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }                  \r\n            });\r\n        }else{\r\n            setSaving(false);\r\n            toast.error(\"All field are required\" ,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n        } \r\n    }\r\n    const Back = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        \r\n        props.setActiveContent({...props.activeContent, route:'laboratoryOrderResult', id:row.id, activeTab:\"history\", actionType:\"\", obj:{}})\r\n     }\r\n\r\n  \r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n        <h2>Laboratory Order & Result \r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\" float-end ms-1\"\r\n            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n            startIcon={<TiArrowBack />}\r\n            onClick={()=>Back(props.activeContent.obj, 'view')}\r\n        >\r\n            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n        </Button>\r\n        </h2>\r\n        </div>\r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n                <form >\r\n                <div className=\"row\">\r\n                    \r\n                    <Row>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">laboratory Number</Label>                                \r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                >\r\n                                     <option value=\"\">Select </option>\r\n                                        \r\n                                        {labNumbers.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.labNumber}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                </Input>\r\n                                \r\n                            </FormGroup>\r\n                    </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Number <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"sampleNumber\"\r\n                                    id=\"sampleNumber\"\r\n                                    value={tests.sampleNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.sampleNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        {/* <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test Group*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestGroupId\"\r\n                                    id=\"labTestGroupId\"\r\n                                    value={tests.labTestGroupId}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestGroupId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col> */}\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test <span style={{ color:\"red\"}}> *</span></Label>\r\n                                {/* <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestId\"\r\n                                    id=\"labTestId\"\r\n                                    value={tests.labTestId}\r\n                                    onChange={handleInputChangeTest} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {test.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.labTestName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input> */}\r\n                                <Select\r\n                                    defaultValue={defaultSelectedOption}\r\n                                    value={selectedOption}\r\n                                    onChange={handleInputChangeObject}\r\n                                    options={labTestOptions}\r\n                                    disabled={fieldHidden}\r\n                                    \r\n                                />\r\n                                {errors.labTestId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\"> Date Sample Collected <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"datetime-local\"\r\n                                    name=\"sampleCollectionDate\"\r\n                                    id=\"sampleCollectionDate\"\r\n                                    value={tests.sampleCollectionDate}\r\n                                    onChange={handleInputChange}\r\n                                    //min={eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' ? eacStatusObj.eacsessionDate :enrollDate}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.sampleCollectionDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Result Received {tests.result!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"\" }</Label>\r\n                                <Input\r\n                                    type=\"datetime-local\"\r\n                                    name=\"dateResultReceived\"\r\n                                    id=\"dateResultReceived\"\r\n                                    value={tests.dateResultReceived}\r\n                                    onChange={handleInputChange}\r\n                                    min={tests.sampleCollectionDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.dateResultReceived !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>                       \r\n                        { tests.labTestId===50 ? \r\n                        (<>\r\n                            <div className=\"form-group  col-md-3\">\r\n                                <FormGroup>\r\n                                    <Label>Result {tests.dateResultReceived!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"\" }</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"<200\">{\"<200\"}</option>\r\n                                        <option value=\">=200\">{\">=200\"}</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.result !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.result}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            <Col md={4} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Result {tests.dateResultReceived!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"\" }</Label>\r\n                                    \r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                        disabled={fieldHidden}                 \r\n                                    />\r\n                                    {errors.result !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.result}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </>)\r\n                    }\r\n                       {tests.labTestId==='16' || tests.labTestId===16 && (\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"vlIndication\">VL Indication <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                    type=\"select\"\r\n                                    name=\"viralLoadIndication\"\r\n                                    id=\"viralLoadIndication\"\r\n                                    value={tests.viralLoadIndication}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}} \r\n                                    disabled={fieldHidden}                \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {vLIndication.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.viralLoadIndication !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                        </Col>\r\n                        )}\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Reported by</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"resultReportedBy\"\r\n                                    id=\"resultReportedBy\"\r\n                                    value={tests.resultReportedBy}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.resultReportedBy !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.resultReportedBy}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Reported Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateResultReported\"\r\n                                    id=\"dateResultReported\"\r\n                                    value={tests.dateResultReported}\r\n                                    min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\")}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.dateResultReported !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateResultReported}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Checked by</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"checkedBy\"\r\n                                    id=\"checkedBy\"\r\n                                    value={tests.checkedBy}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.checkedBy !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.checkedBy}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Checked Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateChecked\"\r\n                                    id=\"dateChecked\"\r\n                                    value={tests.dateChecked}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.dateChecked !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateChecked}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Clinician Name</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"clinicianName\"\r\n                                    id=\"clinicianName\"\r\n                                    value={tests.clinicianName}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={fieldHidden}\r\n                                />\r\n                                {errors.clinicianName !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clinicianName}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col> \r\n                    </Row>\r\n                       \r\n                    </div>\r\n\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType==='update' ? (\r\n                        <MatButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            hidden={fieldHidden}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            disabled={ !saving ? false : true}\r\n                            onClick={handleSubmit}\r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                            )}\r\n                        </MatButton>\r\n                        )\r\n                        :\"\"\r\n                    }\r\n                \r\n                </form>\r\n            {/* )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )}  */}\r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\index.js",["759"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport LabOrderResult from './LabOrderResult';\r\nimport LabOrderResultHistory from \"./LabOrderResultHistory\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\n//import LaboratoryRDE from \"./LaboratoryRDE\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst LaboratoryModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const [orderList, setOrderList] = useState([])\r\n    const patientObj = props.patientObj\r\n    useEffect ( () => {\r\n      LabOrders();\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id, props.activeContent.activeTab]);\r\n    //GET Patient Lab order history\r\n    async function LabOrders() {\r\n      //setLoading(true)\r\n      axios\r\n          .get(`${baseUrl}laboratory/rde-orders/patients/${props.patientObj.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              //setLoading(false)\r\n              setOrderList(response.data);                \r\n          })\r\n          .catch((error) => {  \r\n              //setLoading(false)  \r\n          });        \r\n    }\r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                  {/* <Tab eventKey=\"checked-in\" title=\"Checked In Patients\">                   \r\n                    <CheckedInPatients />\r\n                  </Tab> */}\r\n                  <Tab eventKey=\"home\" title=\"LAB ORDER & RESULT\">                   \r\n                    <LabOrderResult patientObj={patientObj} setActiveContent={props.setActiveContent} LabOrders={LabOrders}/>\r\n                  </Tab>\r\n                  \r\n                  <Tab eventKey=\"history\" title=\" HISTORY\">                   \r\n                   <LabOrderResultHistory patientObj={patientObj} setActiveContent={props.setActiveContent} orderList={orderList} LabOrders={LabOrders}/> \r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LaboratoryModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\IntensiveFollowUp\\ViewUpdate.js",["760","761","762","763","764"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } ,\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n      },\r\n}))\r\n\r\nconst Tracking = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [selected, setSelected] = useState([]);\r\n    const [optionsForSelection, setOptionsForSelection] = useState([]);\r\n    const [optionsForCallOutCome, setOptionsForCallOutCome] = useState([]);\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"yyyy-MM-dd\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Intensive follow up\",\r\n        visitId: null\r\n    })\r\n\r\n    const [attempt, setAttempt] = useState({  \r\n            caller:\"\", \r\n            callOutcome:\"\",\r\n            comment:\"\",\r\n            missedMedication:\"\",\r\n            howDoYouFeelGenerally:\"\",\r\n            anyOfTheFollowing:\"\",\r\n            callDate:\"\",\r\n    });\r\n    const [attemptList, setAttemptList] = useState([])  \r\n    const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n    useEffect(() => {\r\n        GENERAL_FEELING();\r\n        CALL_OUTCOME();\r\n        PrepSideEffect();\r\n        GetPatientDTOObj();\r\n        GetFormDetail()\r\n    }, [props.patientObj.id]);\r\n    //Get Intensive Form Object\r\n    const GetFormDetail =()=>{\r\n        axios\r\n           .get(`${baseUrl}observation/person/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {            \r\n                const Obj= response.data.find((x)=> x.type==='Intensive follow up') \r\n                setObservation({...Obj})\r\n                setAttemptList(Obj.data)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    } \r\n        \r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    } \r\n    const GENERAL_FEELING =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/GENERAL_FEELING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setOptionsForSelection(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const CALL_OUTCOME =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CALL_OUTCOME`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setOptionsForCallOutCome(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }  \r\n    //Get list of PrepSideEffect\r\n    const PrepSideEffect =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n\r\n                setPrepSideEffect(Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.display,\r\n                    value: value.display,\r\n                })));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }     \r\n    const handleInputChangeAttempt = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setAttempt ({...attempt,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleInputChange = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObservation ({...observation,  [e.target.name]: e.target.value});\r\n    }\r\n    const onSelect = (selectedValues) => {\r\n        setSelected(selectedValues);\r\n\r\n    };\r\n    //Validations of the forms\r\n    const validateAttempt = () => { \r\n    attempt.anyOfTheFollowing=selected       \r\n    temp.caller = attempt.caller ? \"\" : \"This field is required\"\r\n    temp.callOutcome = attempt.callOutcome ? \"\" : \"This field is required\"\r\n    temp.comment = attempt.comment ? \"\" : \"This field is required\"\r\n    temp.missedMedication = attempt.missedMedication ? \"\" : \"This field is required\"\r\n    temp.howDoYouFeelGenerally = attempt.howDoYouFeelGenerally ? \"\" : \"This field is required\"\r\n    temp.anyOfTheFollowing = attempt.anyOfTheFollowing ? \"\" : \"This field is required\"\r\n    temp.callDate = attempt.callDate ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addAttempt = e => {\r\n        attempt.anyOfTheFollowing=selected\r\n        if(validateAttempt()){ \r\n            setAttemptList([...attemptList, attempt])\r\n            setAttempt({caller:\"\", \r\n            callOutcome:\"\",\r\n            comment:\"\",\r\n            missedMedication:\"\",\r\n            howDoYouFeelGenerally:\"\",\r\n            anyOfTheFollowing:\"\",\r\n            callDate:\"\",\r\n            })\r\n        }else{\r\n            toast.error(\"Please fill the required fields\");\r\n        }\r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        attemptList.splice(index, 1);\r\n        setAttemptList([...attemptList]);        \r\n    }; \r\n    \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n            if(attemptList.length >0){\r\n                observation.dateOfObservation= observation.dateOfObservation !==\"\" ? observation.dateOfObservation : moment(new Date()).format(\"YYYY-MM-DD\")             \r\n                //observation.personId =patientObj.id\r\n                observation.data=attemptList        \r\n                setSaving(true);\r\n                axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        toast.success(\" Save successful\");\r\n                        props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                        //props.setActiveContent('recent-history')\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            toast.error(errorMessage);\r\n                        }\r\n                        else{\r\n                            toast.error(\"Something went wrong. Please try again...\");\r\n                        }\r\n                    });\r\n                }else{\r\n                    toast.error(\"Attempt to Contact can not be empty\");\r\n                }\r\n       \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Intensive Follow Up Form</h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <hr/>\r\n                        <h3>Attempted to Contact</h3>\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of call</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"callDate\"\r\n                                    id=\"callDate\"\r\n                                    value={attempt.callDate}\r\n                                    min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.callDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.callDate}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >How do you feel generally?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"howDoYouFeelGenerally\"\r\n                                    id=\"howDoYouFeelGenerally\"\r\n                                    value={attempt.howDoYouFeelGenerally}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                    <option value=\"\">Select</option> \r\n                                    {optionsForSelection.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input> \r\n                                {errors.howDoYouFeelGenerally !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.howDoYouFeelGenerally}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-12\">\r\n                                <FormGroup>\r\n                                <Label >Do you have any of the following</Label>\r\n                                <DualListBox\r\n                                //canFilter\r\n                                    options={prepSideEffect}\r\n                                    onChange={onSelect}\r\n                                    selected={selected}\r\n                                /> \r\n                                \r\n                                {errors.anyOfTheFollowing !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.anyOfTheFollowing}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Have you missed any doses of your medications in the past 7 days</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"missedMedication\"\r\n                                        id=\"missedMedication\"\r\n                                        value={attempt.missedMedication}\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        \r\n                                    >\r\n                                    <option value=\"\">Select</option> \r\n                                    <option value=\"Yes\">Yes</option> \r\n                                    <option value=\"No\">No</option> \r\n                                    </Input> \r\n                                    {errors.missedMedication !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.missedMedication}</span>\r\n                                    ) : \"\" }   \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Comment </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"comment\"\r\n                                        id=\"comment\"\r\n                                        value={attempt.comment}\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        \r\n                                    />\r\n                                    {errors.comment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.comment}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Outcome of the call </Label>\r\n\r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"callOutcome\"\r\n                                        id=\"callOutcome\"\r\n                                        onChange={handleInputChangeAttempt}\r\n                                        value={attempt.callOutcome}  \r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {optionsForCallOutCome.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                    </Input>\r\n                                    {errors.callOutcome !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.callOutcome}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Initials of the caller </Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"caller\"\r\n                                    id=\"caller\"\r\n                                    value={attempt.caller}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                {errors.caller !==\"\" ? (\r\n                                <span className={classes.error}>{errors.caller}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addAttempt}  size='tiny' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                            </div>\r\n\r\n                            {attemptList.length >0 \r\n                            ?\r\n                                <List>\r\n                                <Table  striped responsive>\r\n                                    <thead >\r\n                                        <tr>\r\n                                            <th>call Date</th>\r\n                                            <th>How Do you Fell</th>\r\n                                            <th>Do you have any of the following</th>\r\n                                            <th>Missed medication in the last 7days</th>\r\n                                            <th>comment</th>\r\n                                            <th>call outcome</th>\r\n                                            <th>Initial call Name</th>\r\n                                            <th ></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {attemptList.map((attemptObj, index) => (\r\n\r\n                                    <AttemptedLists\r\n                                        key={index}\r\n                                        index={index}\r\n                                        attemptObj={attemptObj}\r\n                                        removeAttempt={removeAttempt}\r\n                                    />\r\n                                    ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </List>\r\n                                :\r\n                                \"\"\r\n                            }       \r\n                        <hr/>\r\n                        </div>\r\n                        \r\n\r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType ==='update' ?\r\n                        (\r\n                        <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        onClick={handleSubmit}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={attemptList.length <=0 && !saving  ? true : false}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                        )}\r\n                        </MatButton>\r\n                        )\r\n                    :\"\"\r\n                    }\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nfunction AttemptedLists({\r\n    attemptObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n   \r\n    return (\r\n            <tr>\r\n                <th>{attemptObj.callDate}</th>\r\n                <th>{attemptObj.howDoYouFeelGenerally}</th>\r\n                <th>{(attemptObj.anyOfTheFollowing).toString()}</th>\r\n                <th>{attemptObj.missedMedication}</th>\r\n                <th>{attemptObj.comment}</th>\r\n                <th>{attemptObj.callOutcome}</th>\r\n                <th>{attemptObj.caller}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Tracking;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Index.js",["765","766","767","768"],"import React, { useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\n//import Button from \"@material-ui/core/Button\";\nimport { Spinner,Form,FormGroup, Label, InputGroup, Input } from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n//import AddIcon from \"@material-ui/icons/Add\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {FaPlus, FaAngleDown} from 'react-icons/fa'\nimport {token, url as baseUrl } from \"../../../api\";\nimport moment from \"moment\";\nimport ChronicConditions from './ChronicConditions';\nimport Eligibilty from './Eligibilty';\nimport GenderBase from './GenderBase';\nimport NutritionalStatus from './NutritionalStatus';\nimport PositiveHealthDignity from './PositiveHealthDignity';\nimport ReproductiveIntentions from './ReproductiveIntentions';\nimport Tb from './Tb';\nimport Tpt from './Tpt';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    },  \n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    },\n}));\n\n\nconst ChronicCare = (props) => {\n    const patientObj = props.patientObj;\n    const [saving, setSaving] = useState(false);\n    const classes = useStyles();\n    const [errors, setErrors] = useState({});\n    const [disabledField, setSisabledField] = useState(false);\n    let temp = { ...errors }\n    const [showEligibility, setShowEligibility] = useState(false);\n    const [showNutrition, setShowNutrition] = useState(false);\n    const [showGenderBase, setShowGenderBase] = useState(false);\n    const [showChronicCondition, setShowChronicCondition] = useState(false);\n    const [showPositiveHealth, setShowPositiveHealth] = useState(false);\n    const [showReproductive, setShowReproductive] = useState(false);\n    const [showTb, setShowTb] = useState(false);//Tpt\n    const [showTpt, setShowTpt] = useState(false);\n    const [enrollDate, setEnrollDate] = useState(\"\");\n    //GenderBase Object\n    const [genderBase, setGenderBase] = useState({partnerEverPhysically:\"\", haveBeenBeaten:\"\", partnerLivelihood:\"\"});\n    //Eligibility Object\n    const [eligibility, setEligibility] = useState({typeOfClient:\"\", pregnantStatus:\"\", whoStaging:\"\", lastCd4Result:\"\",lastCd4ResultDate:\"\", lastViralLoadResult:\"\", lastViralLoadResultDate:\"\", eligibleForViralLoad:\"\"});\n    //Chronic Care Object\n    const [chronicConditions, setChronicConditions]= useState({\n            diastolic:\"\",\n            systolic:\"\",\n            pulse:\"\",\n            increaseFood:\"\",\n            increaseWater:\"\",\n            frequencyUrination:\"\",\n            hypertensive:\"\",\n            firstTimeDiabetic:\"\",\n            diabetic:\"\",\n            bp:\"\",\n            firstTimeHypertensive:\"\"\n    })\n    //Nutrition Object\n    const [nutrition, setNutrition]= useState({\n        height:\"\",\n        weight:\"\",\n        support:\"\",\n        education:\"\",\n    })\n    //Preventive Object\n    const [preventive, setPreventive]= useState({\n            lastAppointment:\"\",\n            medication:\"\",\n            cotrimoxazole:\"\",\n            parentStatus:\"\",\n            condoms:\"\",\n            condomCounseling:\"\",\n            preventDiseases:\"\",\n            alcohol:\"\",\n            nutrituional:\"\",\n            wash:\" \",\n            phdp:\"\"\n    })\n    //Reproductive Object\n    const [reproductive, setReproductive] = useState({cervicalCancer:\"\", pregnantWithinNextYear:\"\",contraceptive:\"\"});\n    //TPT object \n    const [tpt, setTpt] = useState({ date:null,weight:\"\", referredForServices:\"\", adherence:\"\", rash:\"\", neurologicSymptoms:\"\", hepatitisSymptoms:\"\",tbSymptoms:\"\",resonForStoppingIpt:\"\", outComeOfIpt:\"\"});\n    const [tbObj, setTbObj] = useState({//TB and IPT Screening Object\n            currentlyOnTuberculosis:\"\", \n            tbTreatment:\"\", \n            tbTreatmentStartDate:\"\",\n            coughing:\"\", \n            fever:\"\", \n            losingWeight:\"\", \n            nightSweats:\"\", \n            poorWeightGain:\"\", \n            historyWithAdults:\"\",\n            outcome:\"\",\n            priorInh:false,\n            highAlcohol:false,\n            activeHepatitis:false,\n            age1year:false,\n            poorTreatmentAdherence:false,\n            abnormalChest: false,\n            activeTb:false,\n            contraindications :\"\",\n            eligibleForTPT:\"\",\n            treatementOutcome:\"\",\n            treatementType:\"\",\n            completionDate:\"\"\n    });\n    const [observationObj, setObservationObj]=useState({//Predefine object for chronic care DTO \n            eligibility:\"\",\n            nutrition:\"\",\n            genderBase:\"\",\n            chronicCondition:\"\",\n            positiveHealth:\"\",\n            peproductive:\"\",\n            tbIptScreening:\"\",\n            tptMonitoring:\"\"\n    })\n    const [observation, setObservation]=useState({\n        data: {},\n        dateOfObservation: \"\",\n        facilityId: null,\n        personId: 0,\n        type: \"Chronic Care\",\n        visitId: null\n    })\n    useEffect(() => {\n        GetChronicCare();\n        PatientCurrentObject();\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\n            setSisabledField(props.activeContent.actionType==='view'?true : false)\n        }\n    }, [props.activeContent.id]);\n    //GET  Patients\n    async function PatientCurrentObject() {\n        axios\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setEnrollDate(response.data.enrollment.dateOfRegistration)\n                //setPatientObject(response.data);\n            })\n            .catch((error) => {  \n            });        \n    }\n    const GetChronicCare =()=>{//function to get chronic care data for edit \n        axios\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\n           )\n           .then((response) => {  \n                observationObj.eligibility=response.data.eligibility\n                observationObj.nutrition=response.data\n                observationObj.genderBase=response.data.genderBase\n                observationObj.chronicCondition=response.data.chronicConditions\n                observationObj.positiveHealth=response.data.positiveHealth\n                observationObj.peproductive=response.data.peproductive \n                observationObj.tbIptScreening=response.data.tbIptScreening\n                observationObj.tptMonitoring=response.data.tptMonitoring\n                setObservation(response.data)\n                setObservationObj(response.data.data)\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\n                setTbObj({...tbObj, ...response.data.data.tbIptScreening})\n                setEligibility({...eligibility, ...response.data.data.eligibility})\n                setGenderBase({...genderBase, ...response.data.data.genderBase})\n                setChronicConditions({...chronicConditions, ...response.data.data.chronicConditions})\n                setPreventive({...preventive, ...response.data.data.preventive})\n                setReproductive({...reproductive, ...response.data.data.reproductive})\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\n           })\n           .catch((error) => {\n           //console.log(response.data.data);\n           });\n       \n    }\n    const handleInputChange = e => {//Handle input fields changes\n        //console.log(e.target.value)\n        setErrors({...temp, [e.target.name]:\"\"})\n        setObservation ({...observation,  [e.target.name]: e.target.value});\n    }\n    //Validations of the forms\n    const validate = () => { \n        temp.dateOfObservation = observation.dateOfObservation ? \"\" : \"This field is required\"\n        tpt.outComeOfIpt!==\"\" && (temp.outcomeDate = tpt.date ? \"\" : \"This field is required\")\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x === \"\")\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault(); \n        setSaving(true);\n        observation.personId =patientObj.id\n        observationObj.eligibility=eligibility\n        observationObj.nutrition=\n        observationObj.genderBase=genderBase\n        observationObj.chronicCondition=chronicConditions\n        observationObj.positiveHealth=preventive\n        observationObj.peproductive=reproductive \n        observationObj.tbIptScreening=tbObj\n        observationObj.tptMonitoring=tpt\n        observation.data =observationObj        \n        if(validate()){\n            if(props.activeContent && props.activeContent.actionType===\"update\"){//Perform operation for updation action)\n                axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n                \n                )\n                .then(response => {\n                    setSaving(false);\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\n                })\n                .catch(error => {\n                    setSaving(false);\n                    if(error.response && error.response.data){\n                        \n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\n                        }else{\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                    }\n                });\n            }else{\n                axios.post(`${baseUrl}observation`,observation,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n                \n                )\n                .then(response => {\n                    setSaving(false);\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\n                })\n                .catch(error => {\n                    setSaving(false);\n                    if(error.response && error.response.data){\n                        \n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\n                        }else{\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                    }\n                });\n            }\n        }else{\n            toast.error(\"All fields are required\", {position: toast.POSITION.BOTTOM_CENTER})\n            setSaving(false); \n        }\n    }\n    \n    //console.log(eligibility)\n    const onClickEligibility =() =>{\n        setShowEligibility(!showEligibility)\n    }\n    const onClickTb =() =>{\n        setShowTb(!showTb)\n    }\n    const onClickNutrition =() =>{\n        setShowNutrition(!showNutrition)\n    }\n    const onClickGenderBase =() =>{\n        setShowGenderBase(!showGenderBase)\n    }\n    const onClickChronicCondition =() =>{\n        setShowChronicCondition(!showChronicCondition)\n    }\n    const onClickPositiveHealth =() =>{\n        setShowPositiveHealth(!showPositiveHealth)\n    }\n    const onClickReproductive =() =>{\n        setShowReproductive(!showReproductive)\n    }\n    const onClickTpt =() =>{\n        setShowTpt(!showTpt)\n    }\n\n    const handleCancel =()=>{\n        //history.push({ pathname: '/' });\n    }\n\n\n    return (\n        <>\n        <ToastContainer autoClose={3000} hideProgressBar />\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\n\t\t\t<ol className=\"breadcrumb\">\n\t\t\t\t<li className=\"breadcrumb-item active\"><h2> Chronic Care</h2></li>\n\t\t\t</ol>\n\t\t  </div>\n\n            <Card className={classes.root}>\n                <CardContent>\n                    \n                    <div className=\"col-xl-12 col-lg-12\">\n                        <Form >\n                            <div className=\"row\">\n                                <div className=\"form-group mb-3 col-md-4\">\n                                    <FormGroup>\n                                    <Label >Visit Date *</Label>\n                                     \n                                    <Input\n                                    type=\"date\"\n                                    name=\"dateOfObservation\"\n                                    id=\"dateOfObservation\"\n                                    value={observation.dateOfObservation}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    min={enrollDate}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    \n                                    > \n                                    </Input>                                   \n                                    </FormGroup>\n                                    {errors.dateOfObservation !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\n                                    ) : \"\" }   \n                                </div>\n                            </div>\n                            {/* Eligibility Assessment */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Eligibility Assessment</h5>\n                                    {showEligibility===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showEligibility && (\n                                    <Eligibilty setEligibility={setEligibility} eligibility={eligibility} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> \n                                )}\n                            </div>\n                            {/* End Eligibility Assessment */}\n                            {/* TB & IPT  Screening  */}\n                            <div className=\"card\">\n                                \n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TB & IPT Screening </h5>\n                                    {showTb===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showTb && (\n                                    <Tb setTbObj={setTbObj} tbObj={tbObj} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>  \n                                )}\n                            </div>\n                            {/* End TB & IPT  Screening  */}\n                             {/* TPT MONITORING */}\n                             <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TPT Monitoring</h5>\n                                    {showTpt===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showTpt && (\n                                    <Tpt setTpt={setTpt} tpt={tpt} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>  \n                                )}\n                            </div>\n                            {/* End TPT MONITORING */}\n                            {/* End Nutritional Status Assessment */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Nutritional Status Assessment</h5>\n                                    {showNutrition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showNutrition && (\n                                  <NutritionalStatus nutrition={nutrition} setNutrition={setNutrition} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>\n                                )}\n                            </div>\n                            {/* End Nutritional Status Assessment */}\n                            {/* Gender Based Violence Screening */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Gender Based Violence Screening </h5>\n                                    {showGenderBase===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showGenderBase && (\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                       <GenderBase setGenderBase={setGenderBase} genderBase={genderBase} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>\n                                    </div>\n\n                                </div>\n                                )}\n                            </div>\n                            {/* End Gender Based Violence Screening */}\n                            {/* End Screening for Chronic Conditions */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Screening for Chronic Conditions</h5>\n                                    {showChronicCondition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showChronicCondition && (\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                       <ChronicConditions chronicConditions={chronicConditions} setChronicConditions={setChronicConditions} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>\n                                    </div>\n\n                                </div>\n                                )}\n                            </div>\n                            {/* End Screening for Chronic Conditions */}\n                            {/* Positive Health Dignity and Prevention */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Positive Health Dignity and Prevention(PHDP) </h5>\n                                    {showPositiveHealth===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showPositiveHealth && (\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                       <PositiveHealthDignity preventive={preventive} setPreventive={setPreventive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>\n                                    </div>\n\n                                </div>\n                                )}\n                            </div>\n                            {/* End Positive Health Dignity and Prevention */} \n                            {/* Reproductive Intentions */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Reproductive Intentions </h5>\n                                    {showReproductive===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaAngleDown /></span> </>)}\n                                </div>\n                                {showReproductive && (\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <ReproductiveIntentions setReproductive={setReproductive} reproductive={reproductive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/>\n                                    </div>\n\n                                </div>\n                                )}\n                            </div>\n                            {/* End Reproductive Intentions */}\n                            {saving ? <Spinner /> : \"\"}\n\n                            <br />\n                            {props.activeContent && props.activeContent.actionType? (<>\n                                <MatButton\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                hidden={disabledField}\n                                className={classes.button}\n                                startIcon={<SaveIcon />}\n                                style={{backgroundColor:\"#014d88\"}}\n                                onClick={handleSubmit}\n                                disabled={saving}\n                                >\n                                    {!saving ? (\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                                    ) : (\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\n                                    )}\n                                </MatButton>\n                            </>):(<>\n                                <MatButton\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className={classes.button}\n                                    startIcon={<SaveIcon />}\n                                    style={{backgroundColor:\"#014d88\"}}\n                                    onClick={handleSubmit}\n                                    disabled={saving}\n                                    >\n                                        {!saving ? (\n                                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                                        ) : (\n                                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                                        )}\n                            </MatButton>\n                            </>)}\n                            \n                        </Form>\n                    </div>\n                </CardContent>\n            </Card>\n \n        </>\n    );\n};\n\nexport default ChronicCare","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\Index.js",["769"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport Tracking from './Tracking';\r\nimport TrackingHistory from \"./TrackingHistory\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import LaboratoryRDE from \"./LaboratoryRDE\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst LaboratoryModule = (props) => {\r\n    const [key, setKey] = useState('home');\r\n    const [trackingList, setTrackingList] = useState([])\r\n    const patientObj = props.patientObj\r\n    useEffect ( () => {\r\n      TrackingDetails();\r\n      setKey(props.activeContent.activeTab)\r\n    }, [props.activeContent.id, props.activeContent.activeTab]);\r\n    //GET Patient Lab order history\r\n    async function TrackingDetails() {\r\n      //setLoading(true)\r\n      axios\r\n          .get(`${baseUrl}patient-tracker/patient/${props.patientObj.id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              //setLoading(false)\r\n              setTrackingList(response.data);                \r\n          })\r\n          .catch((error) => {  \r\n              //setLoading(false)  \r\n          });        \r\n    }\r\n\r\n  return (\r\n    <Fragment>  \r\n      <Row>       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                >\r\n                  {/* <Tab eventKey=\"checked-in\" title=\"Checked In Patients\">                   \r\n                    <CheckedInPatients />\r\n                  </Tab> */}\r\n                  <Tab eventKey=\"home\" title=\"TRACKING FORM\">                   \r\n                    <Tracking patientObj={patientObj} setActiveContent={props.setActiveContent} trackingList={trackingList} TrackingDetails={TrackingDetails}/>\r\n                  </Tab>\r\n                  \r\n                  <Tab eventKey=\"history\" title=\"TRACKING HISTORY\">                   \r\n                   <TrackingHistory patientObj={patientObj} setActiveContent={props.setActiveContent} trackingList={trackingList} TrackingDetails={TrackingDetails}/> \r\n                  </Tab>                   \r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LaboratoryModule;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientListIit.js",["770","771","772","773"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar }  from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport {TiArrowForward} from 'react-icons/ti'\r\n\r\n\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\nconst Patients = (props) => {    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [showPPI, setShowPPI] = useState(true)\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            setLoading(true)\r\n            axios\r\n                .get(`${baseUrl}hiv/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    setLoading(false)\r\n                    setPatientList(response.data);\r\n                   \r\n                })\r\n                .catch((error) => {  \r\n                    setLoading(false)  \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n    \r\n    const getHospitalNumber = (identifier) => {     \r\n        const identifiers = identifier;\r\n        const hospitalNumber = identifiers.identifier.find(obj => obj.type == 'HospitalNumber');       \r\n        return hospitalNumber ? hospitalNumber.value : '';\r\n    };\r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setShowPPI(false)\r\n        }else{\r\n            setShowPPI(true)\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div>\r\n\r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                  hidden:showPPI\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Sex\", field: \"gender\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n                //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n                { title: \"ART Status\", field: \"status\", filtering: false },\r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              isLoading={loading}\r\n            data={query =>\r\n                new Promise((resolve, reject) =>\r\n                    axios.get(`${baseUrl}hiv/patients/iit?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                        .then(response => response)\r\n                        .then(result => {\r\n                        \r\n                            resolve({\r\n                                data: result.data.records.map((row) => ({\r\n                                name:row.currentStatus!== \"Not Enrolled\" ?\r\n                                    (\r\n                                    <>\r\n                                        <Link\r\n                                        to ={{\r\n                                            pathname: \"/patient-history\",\r\n                                            state: { patientObj: row  }\r\n                                        }}\r\n\r\n                                        title={\"Click to view patient dashboard\"}\r\n                                        > {row.firstName + \" \" + row.surname}\r\n                                        </Link>\r\n                                        </>\r\n                                    ):\r\n                                    (\r\n                                        <>\r\n                                        <Link\r\n                                            to={{\r\n                                                pathname: \"/enroll-patient\",\r\n                                                state: { patientId : row.id, patientObj: row }\r\n                                            }}\r\n            \r\n                                        title={\"Enroll Patient\"}\r\n                                        > {row.firstName + \" \" + row.surname}\r\n                                        </Link>\r\n                                        </>\r\n                                    ),\r\n                                hospital_number: getHospitalNumber(row.identifier),\r\n                                gender:row && row.sex ? row.sex : \"\",\r\n                                age: (row.dateOfBirth === 0 ||\r\n                                    row.dateOfBirth === undefined ||\r\n                                    row.dateOfBirth === null ||\r\n                                    row.dateOfBirth === \"\" )\r\n                                    ? 0\r\n                                    : calculate_age(moment(row.dateOfBirth).format(\"DD-MM-YYYY\")),\r\n                                \r\n                                status: (<Label color=\"blue\" size=\"mini\">{row.currentStatus}</Label>),\r\n                            \r\n                                actions:\r\n                        \r\n                                <div>\r\n\r\n                                            {row.currentStatus!== \"Not Enrolled\" ?\r\n                                                (\r\n                                                    <>\r\n                                                        <Link\r\n                                                            to={{\r\n                                                                pathname: \"/patient-history\",\r\n                                                                state: { patientObj: row  }\r\n                                                            }}\r\n                                                        >\r\n                                                            <ButtonGroup variant=\"contained\" \r\n                                                                aria-label=\"split button\"\r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'215px'}}\r\n                                                                size=\"large\"\r\n                                                            >\r\n                                                            <Button\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            aria-label=\"select merge strategy\"\r\n                                                            aria-haspopup=\"menu\"\r\n                                                            style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                            >\r\n                                                                <MdDashboard />\r\n                                                            </Button>\r\n                                                            <Button \r\n                                                            style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                            >\r\n                                                                <span style={{fontSize:'12px', color:'#fff', fontWeight:'bolder'}}>Patient Dashboard</span>\r\n                                                            </Button>\r\n                                                            \r\n                                                            </ButtonGroup>\r\n                                                        </Link>\r\n                                                    </>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <>\r\n                                                        <Link\r\n                                                            to={{\r\n                                                                pathname: \"/enroll-patient\",\r\n                                                                state: { patientId : row.id, patientObj: row }\r\n                                                            }}\r\n                                                        >\r\n                                                            <ButtonGroup variant=\"contained\" \r\n                                                                aria-label=\"split button\"\r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'215px'}}\r\n                                                                size=\"large\"\r\n                                                            >\r\n                                                            <Button\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            aria-label=\"select merge strategy\"\r\n                                                            aria-haspopup=\"menu\"\r\n                                                            style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                            >\r\n                                                                <TiArrowForward />\r\n                                                            </Button>\r\n                                                            <Button \r\n                                                            style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                            >\r\n                                                                <span style={{fontSize:'12px', color:'#fff', fontWeight:'bolder'}}>Enroll Patient</span>\r\n                                                            </Button>\r\n                                                            \r\n                                                            </ButtonGroup>\r\n                                                        </Link>\r\n                                                    </>\r\n                                                )\r\n\r\n                                            }\r\n                            </div>\r\n                                    })),\r\n                                page: query.page,\r\n                                totalCount: result.data.totalRecords,\r\n                            })\r\n                        })\r\n            )}\r\n            \r\n            options={{\r\n                search: true,\r\n                headerStyle: {\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                },\r\n                searchFieldStyle: {\r\n                    width : '200%',\r\n                    margingLeft: '250px',\r\n                },\r\n                filtering: false,\r\n                exportButton: false,\r\n                searchFieldAlignment: 'left',\r\n                pageSizeOptions:[10,20,100],\r\n                pageSize:10,\r\n                debounceInterval: 400\r\n            }}\r\n            components={{\r\n                Toolbar: props => (\r\n                    <div >\r\n                    <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"showPP!\"\r\n                        id=\"showPP\"\r\n                        checked={showPPI===true? false : true}\r\n                        value=\"showPP\"\r\n                        onChange={handleCheckBox}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        <b style={{color:'#014d88',fontWeight:'bold'}}>SHOW PII</b>\r\n                        </label>\r\n                    </div>\r\n                    <MTableToolbar {...props} />\r\n                    </div>\r\n                ),\r\n            }}\r\n            />\r\n       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["774","775","776","777","778"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport { TiArrowForward } from \"react-icons/ti\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst Patients = (props) => {\r\n  //const [patientList, setPatientList] = useState([])\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  //const [loading, setLoading] = useState(true)\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob); // create a date object directlyfrom`dob1`argument\r\n    let age_now = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n\r\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n      age_now--;\r\n    }\r\n\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient\"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          { title: \"ART Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}hiv/patients?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                //console.log(result.data.records.filter(x=> x.currentStatus=== \"Not Enrolled\" ))\r\n                resolve({\r\n                  data: result.data.records.map((row) => ({\r\n                    name:\r\n                      row.currentStatus !== \"Not Enrolled\" ? (\r\n                        <>\r\n                          <Link\r\n                            to={{\r\n                              pathname: \"/patient-history\",\r\n                              state: { patientObj: row },\r\n                            }}\r\n                            title={\"Click to view patient dashboard\"}\r\n                          >\r\n                            {\" \"}\r\n                            {row.firstName + \" \" + row.surname}\r\n                          </Link>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <Link\r\n                            to={{\r\n                              pathname: \"/enroll-patient\",\r\n                              state: { patientId: row.id, patientObj: row },\r\n                            }}\r\n                            title={\"Enroll Patient\"}\r\n                          >\r\n                            {\" \"}\r\n                            {row.firstName + \" \" + row.surname}\r\n                          </Link>\r\n                        </>\r\n                      ),\r\n                    hospital_number: row.hospitalNumber,\r\n                    sex: row.sex,\r\n                    age: calculate_age(row.dateOfBirth),\r\n\r\n                    status: (\r\n                      <Label color=\"blue\" size=\"mini\">\r\n                        {row.currentStatus}\r\n                      </Label>\r\n                    ),\r\n                    actions: (\r\n                      <div>\r\n                        {row.currentStatus !== \"Not Enrolled\" ? (\r\n                          <>\r\n                            <Link\r\n                              to={{\r\n                                pathname: \"/patient-history\",\r\n                                state: { patientObj: row },\r\n                              }}\r\n                            >\r\n                              <ButtonGroup\r\n                                variant=\"contained\"\r\n                                aria-label=\"split button\"\r\n                                style={{\r\n                                  backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  height: \"30px\",\r\n                                  width: \"215px\",\r\n                                }}\r\n                                size=\"large\"\r\n                              >\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  size=\"small\"\r\n                                  aria-label=\"select merge strategy\"\r\n                                  aria-haspopup=\"menu\"\r\n                                  style={{\r\n                                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  }}\r\n                                >\r\n                                  <MdDashboard />\r\n                                </Button>\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      fontSize: \"12px\",\r\n                                      color: \"#fff\",\r\n                                      fontWeight: \"bolder\",\r\n                                    }}\r\n                                  >\r\n                                    Patient Dashboard\r\n                                  </span>\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </Link>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <Link\r\n                              to={{\r\n                                pathname: \"/enroll-patient\",\r\n                                state: { patientId: row.id, patientObj: row },\r\n                              }}\r\n                            >\r\n                              <ButtonGroup\r\n                                variant=\"contained\"\r\n                                aria-label=\"split button\"\r\n                                style={{\r\n                                  backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  height: \"30px\",\r\n                                  width: \"215px\",\r\n                                }}\r\n                                size=\"large\"\r\n                              >\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  size=\"small\"\r\n                                  aria-label=\"select merge strategy\"\r\n                                  aria-haspopup=\"menu\"\r\n                                  style={{\r\n                                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  }}\r\n                                >\r\n                                  <TiArrowForward />\r\n                                </Button>\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      fontSize: \"12px\",\r\n                                      color: \"#fff\",\r\n                                      fontWeight: \"bolder\",\r\n                                    }}\r\n                                  >\r\n                                    Enroll Patient\r\n                                  </span>\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </Link>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          search: true,\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\UpdateViewViralLoadOrderResult.js",["779","780","781","782","783","784","785","786","787","788","789","790","791"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport { toast} from \"react-toastify\";\r\n\r\nimport { Button, } from 'semantic-ui-react'\r\nimport {TiArrowBack} from 'react-icons/ti'\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [disabledField, setDisabledField] = useState(false);\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [labTestDetail, setLabTestDetail]=useState([])\r\n    const [labNumberOption, setLabNumberOption] = useState(\"\")\r\n    const [showResult, setShowResult]=useState(false)\r\n    const [showPcrLabDetail, setShowPcrLabDetail]=useState(false)\r\n    const [labNumbers, setLabNumbers] = useState([]);//\r\n    const [pcrs, setPcrs] = useState([]);//\r\n    let temp = { ...errors }\r\n    const [showObj, setShowObj] = useState(\r\n        {\r\n            hasResult:false,\r\n            isPcr:false\r\n        }\r\n    )\r\n    const [tests, setTests]=useState({\r\n            approvedBy: \"\",\r\n            assayedBy: \"\",\r\n            checkedBy: \"\",\r\n            comments: \"\",\r\n            dateApproved: \"\",\r\n            dateAssayedBy: \"\",\r\n            dateCheckedBy: \"\",\r\n            dateCollectedBy: \"\",\r\n            dateOrderBy: \"\",\r\n            dateReceivedAtPcrLab: \"\",\r\n            dateResultReceived: \"\",\r\n            dateSampleLoggedRemotely: \"\",\r\n            id: \"\",\r\n            labNumber: \"\",\r\n            labTestGroupId: \"\",\r\n            labTestId: \"\",\r\n            orderBy: \"\",\r\n            patientId: props.patientObj?props.patientObj.id:\"\",\r\n            pcrLabName: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            result: \"\",\r\n            sampleCollectedBy: \"\",\r\n            sampleCollectionDate: \"\",\r\n            sampleLoggedRemotely: \"\",\r\n            sampleTypeId: \"\",\r\n            viralLoadIndication: \"\"\r\n    })\r\n\r\n    useEffect(() => {\r\n           \r\n        CheckLabModule();\r\n        ViraLoadIndication();\r\n        LabTestDetail();\r\n        PCRLabList();\r\n        setTests(props.activeContent.obj) \r\n        tests.sampleCollectionDate=moment(props.activeContent.obj.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        tests.dateResultReceived=props.activeContent.obj.dateResultReceived!==null && props.activeContent.obj.dateResultReceived!==\"\" ? moment(props.activeContent.obj.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\")  : \"\"\r\n        showObj.isPcr=props.activeContent.obj.pcrLabName!==null && props.activeContent.obj.pcrLabName!==\"\" ? true :false\r\n        showObj.hasResult=props.activeContent.obj.result!==\"\" && props.activeContent.obj.dateResultReceived!==null ? true :false\r\n        tests.dateResultReceived=moment(props.activeContent.obj.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        if(props.activeContent.obj.pcrLabName!==null && props.activeContent.obj.pcrLabName!==\"\"){\r\n            setShowPcrLabDetail(true)\r\n        }else{\r\n            setShowPcrLabDetail(false) \r\n        } \r\n        if(props.activeContent.obj.result!==\"\" && props.activeContent.obj.dateResultReceived!==null){\r\n            setShowResult(true)\r\n        }else{\r\n            setShowResult(false)  \r\n        } \r\n        if(props.activeContent && props.activeContent.actionType==='view'){\r\n            setDisabledField(true)\r\n        } \r\n    }, [props.patientObj.id, props.activeContent.obj]);\r\n    //console.log(props.activeContent.obj)\r\n     //Get list of LabNumbers\r\n    const LabNumbers =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/lab-numbers`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLabNumbers(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get list of LabNumbers\r\n    const PCRLabList =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/get-prclabs/`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPcrs(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const LabTestDetail =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtests/viral%20load`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n    \r\n                setLabTestDetail(response.data.sampleType);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }  \r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }  \r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n                      \r\n    }\r\n    \r\n      //Validations of the forms\r\n      const validate = () => {  \r\n        temp.sampleTypeId = tests.sampleTypeId ? \"\" : \"This field is required\"\r\n        temp.sampleCollectionDate =  tests.sampleCollectionDate ? \"\" : \"This field is required\"\r\n        temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\"\r\n        temp.sampleNumber = tests.sampleNumber ? \"\" : \"This field is required\"\r\n        temp.sampleCollectedBy = tests.sampleCollectedBy ? \"\" : \"This field is required\"\r\n        temp.dateOrderBy = tests.dateOrderBy ? \"\" : \"This field is required\"\r\n        temp.orderBy = tests.orderBy ? \"\" : \"This field is required\"\r\n        showResult && (temp.dateResultReceived = tests.dateResultReceived ? \"\" : \"This field is required\")\r\n        showResult && (temp.assayedBy = tests.assayedBy ? \"\" : \"This field is required\")\r\n        showResult && (temp.result = tests.result ? \"\" : \"This field is required\")\r\n        showResult && (temp.dateAssayedBy = tests.dateAssayedBy ? \"\" : \"This field is required\")\r\n\r\n\r\n        showPcrLabDetail && ( temp.dateCheckedBy = tests.dateCheckedBy ? \"\" : \"This field is required\")\r\n        //showPcrLabDetail && (temp.dateCollectedBy =  tests.dateCollectedBy ? \"\" : \"This field is required\")\r\n        //showPcrLabDetail && (temp.orderBy = tests.orderBy ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (tests.sampleLoggedRemotely ==='1'  || tests.sampleLoggedRemotely ===1 ) && (temp.dateSampleLoggedRemotely = tests.dateSampleLoggedRemotely ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.dateReceivedAtPcrLab = tests.dateReceivedAtPcrLab ? \"\" : \"This field is required\")\r\n        //showPcrLabDetail && (temp.dateOrderBy = tests.dateOrderBy ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.pcrLabSampleNumber = tests.pcrLabSampleNumber ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.pcrLabName =  tests.pcrLabName ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.dateApproved = tests.dateApproved ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.sampleLoggedRemotely = tests.sampleLoggedRemotely ? \"\" : \"This field is required\")\r\n        showPcrLabDetail &&  (temp.checkedBy = tests.checkedBy ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.approvedBy = tests.approvedBy ? \"\" : \"This field is required\")\r\n        //showPcrLabDetail && (temp.sampleCollectedBy = tests.sampleCollectedBy ? \"\" : \"This field is required\")\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        \r\n        if(validate()){\r\n            setSaving(true);\r\n            tests.labTestGroupId= labTestDetail.labTestGroupId\r\n            tests.labTestId= labTestDetail.id   \r\n            //tests.pcrLabSampleNumber=tests.pcrLabName              \r\n            \r\n            tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")\r\n            tests.dateResultReceived =tests.dateResultReceived!==null && tests.dateResultReceived!==\"\" ? moment(tests.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\") : \"\"\r\n            tests.dateReceivedAtPcrLab =tests.dateReceivedAtPcrLab!==null && tests.dateReceivedAtPcrLab!==\"\" ? moment(tests.dateReceivedAtPcrLab).format(\"YYYY-MM-DD HH:MM:SS\") : \"\"\r\n            axios.put(`${baseUrl}laboratory/vl-results/${props.activeContent.obj.id}`,tests,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Viral Load order & result updated successful!\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                //props.LabOrders();\r\n                props.setActiveContent({...props.activeContent, route:'laboratoryViralLoadOrderResult', activeTab:\"history\"})\r\n                //props.LabOrders();\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }else{\r\n                    toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }                  \r\n            }); \r\n        }\r\n    }\r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setShowResult(true)\r\n            setShowObj({...showObj, hasResult:true})\r\n        }else{\r\n            setShowResult(false)\r\n            setShowObj({...showObj, hasResult:false})\r\n            setShowPcrLabDetail(false)\r\n        }\r\n    }\r\n    const handleCheckBoxPCR =e =>{\r\n        if(e.target.checked){\r\n            setShowPcrLabDetail(true)\r\n            setShowObj({...showObj, isPcr:true})\r\n        }else{\r\n            setShowPcrLabDetail(false)\r\n            setShowObj({...showObj, isPcr:false})\r\n        }\r\n    }\r\n\r\n    const Back = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        \r\n        props.setActiveContent({...props.activeContent, route:'laboratoryViralLoadOrderResult', id:row.id, activeTab:\"history\", actionType:\"\", obj:{}})\r\n     }\r\n  \r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n        <h2>Viral Load Order and Result\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\" float-end ms-1\"\r\n            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n            startIcon={<TiArrowBack />}\r\n            onClick={()=>Back(props.activeContent.obj, 'view')}\r\n        >\r\n            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n        </Button>\r\n        </h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n                <form >\r\n                <div className=\"row\">\r\n                    \r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">laboratory Number</Label>                                \r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"labNumber\"\r\n                                id=\"labNumber\"\r\n                                value={tests.labNumber}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            >\r\n                                    <option value=\"\">Select </option>\r\n                                    \r\n                                    {labNumbers.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.labNumber}\r\n                                        </option>\r\n                                    ))}\r\n\r\n                            </Input>\r\n                            \r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"labNumber\">Sample Number <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"text\"\r\n                                name=\"sampleNumber\"\r\n                                id=\"sampleNumber\"\r\n                                value={tests.sampleNumber}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}} \r\n                                disabled={disabledField}                \r\n                                >\r\n                                \r\n                            </Input>\r\n                            {errors.sampleNumber !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleNumber}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">VL Indication <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"viralLoadIndication\"\r\n                                id=\"viralLoadIndication\"\r\n                                value={tests.viralLoadIndication}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}   \r\n                                disabled={disabledField}              \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                                \r\n                                    {vLIndication.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.viralLoadIndication !==\"\" ? (\r\n                                <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Type <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"sampleTypeId\"\r\n                                    id=\"sampleTypeId\"\r\n                                    //min={0}\r\n                                    value={tests.sampleTypeId}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\">Select </option>\r\n                                    {labTestDetail.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.sampleTypeName}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.sampleTypeId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleTypeId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Order by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"orderBy\"\r\n                                id=\"orderBy\"\r\n                                value={tests.orderBy}\r\n                                \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.orderBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.orderBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Ordered  <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateOrderBy\"\r\n                                        id=\"dateOrderBy\"\r\n                                        value={tests.dateOrderBy}\r\n                                        min={enrollDate}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateOrderBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOrderBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Collected by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"sampleCollectedBy\"\r\n                                id=\"sampleCollectedBy\"\r\n                                value={tests.sampleCollectedBy}\r\n                                \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.sampleCollectedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\"> Date Sample Collected <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"sampleCollectionDate\"\r\n                                id=\"sampleCollectionDate\"\r\n                                value={tests.sampleCollectionDate}\r\n                                onChange={handleInputChange}\r\n                                \r\n                                min={tests.dateOrderBy!==null && tests.dateOrderBy!==''? moment(tests.dateOrderBy).format(\"YYYY-MM-DD HH:MM:SS\") :moment(enrollDate).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.sampleCollectionDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"mt-4 mb-3\">\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                       \r\n                                name=\"hasResult\"\r\n                                id=\"hasResult\"\r\n                                value=\"hasResult\"\r\n                                onChange={handleCheckBox}\r\n                                checked={showObj.hasResult}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Has Result ?\r\n                                </label>\r\n                        </div>\r\n                    </Col>\r\n                    <hr/>\r\n                    </Row>\r\n                    {showResult && (<>\r\n                        <Row>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Assayed by <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"assayedBy\"\r\n                                        id=\"assayedBy\"\r\n                                        value={tests.assayedBy}                              \r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.assayedBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.assayedBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Assayed <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateAssayedBy\"\r\n                                        id=\"dateAssayedBy\"\r\n                                        value={tests.dateAssayedBy}\r\n                                        min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\")}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateAssayedBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateAssayedBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Result Received <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"datetime-local\"\r\n                                        name=\"dateResultReceived\"\r\n                                        id=\"dateResultReceived\"\r\n                                        value={tests.dateResultReceived}\r\n                                        min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateResultReceived !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <InputGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                                        disabled={disabledField}                \r\n                                    />\r\n\r\n                                    {/* <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        \r\n                                    </InputGroupText> */}\r\n                                    </InputGroup>\r\n                                    {errors.result !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.result}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Comment</Label>\r\n                                    <Input\r\n                                        type=\"textarea\"\r\n                                        name=\"comments\"\r\n                                        id=\"comments\"\r\n                                        value={tests.comments}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}  \r\n                                        disabled={disabledField}               \r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    <Row>\r\n                        <Col md={6} className=\"mt-4 mb-3\">\r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                       \r\n                                    name=\"asResultPCR\"\r\n                                    id=\"asResultPCR\"\r\n                                    value=\"asResultPCR\"\r\n                                    checked={showObj.isPcr}\r\n                                    onChange={handleCheckBoxPCR}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Has PCR Lab Details ?\r\n                                    </label>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n                    </>)} \r\n                    {showPcrLabDetail && (<>\r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">PCR Lab Name <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"pcrLabName\"\r\n                                id=\"pcrLabName\"\r\n                                value={tests.pcrLabName}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}                 \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                {pcrs.map((value) => (\r\n                                        <option key={value.labNo} value={value.labNo}>\r\n                                            {value.name}\r\n                                        </option>\r\n                                    ))}               \r\n                                    \r\n                            </Input>\r\n                            {errors.pcrLabName !==\"\" ? (\r\n                                <span className={classes.error}>{errors.pcrLabName}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                    {tests.pcrLabName!==\"\" && (\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">PCR Sample No.</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"pcrLabSampleNumber\"\r\n                                id=\"pcrLabSampleNumber\"\r\n                                //min={0}\r\n                                value={tests.pcrLabSampleNumber}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            \r\n                        </FormGroup>\r\n                    )}\r\n                    </Col>\r\n                    \r\n                    {/* <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Collected *</Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateCollectedBy\"\r\n                                        id=\"dateCollectedBy\"\r\n                                        value={tests.dateCollectedBy}\r\n                                        min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        required\r\n                                    />\r\n                                    {errors.dateCollectedBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateCollectedBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                    </Col> */}\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Sample logged remotely </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"sampleLoggedRemotely\"\r\n                                id=\"sampleLoggedRemotely\"\r\n                                //min={0}\r\n                                value={tests.sampleLoggedRemotely}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                <option value=\"1\">Yes </option>\r\n                                <option value=\"0\">No </option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {tests.sampleLoggedRemotely ==='1' && (\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Sample logged remotely <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateSampleLoggedRemotely\"\r\n                                id=\"dateSampleLoggedRemotely\"\r\n                                //min={0}\r\n                                value={tests.dateSampleLoggedRemotely}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateSampleLoggedRemotely !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateSampleLoggedRemotely}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    )}\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Sample Received at PCR Lab <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"dateReceivedAtPcrLab\"\r\n                                id=\"dateReceivedAtPcrLab\"\r\n                                value={tests.dateReceivedAtPcrLab}\r\n                                min={tests.dateReceivedAtPcrLab}\r\n                                onChange={handleInputChange}\r\n                                //min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateReceivedAtPcrLab !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateReceivedAtPcrLab}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Checked by <span style={{ color:\"red\"}}> *</span> </Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"checkedBy\"\r\n                                id=\"checkedBy\"\r\n                                value={tests.checkedBy}\r\n                               \r\n                                onChange={handleInputChange}\r\n                               \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.checkedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.checkedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Checked <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateCheckedBy\"\r\n                                id=\"dateCheckedBy\"\r\n                                value={tests.dateCheckedBy}\r\n                                min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChange}\r\n                                //min={tests.sampleCollectionDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateCheckedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateCheckedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Approved by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"approvedBy\"\r\n                                id=\"approvedBy\"\r\n                                value={tests.approvedBy}\r\n                               \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.approvedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.approvedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Approved <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateApproved\"\r\n                                id=\"dateApproved\"\r\n                                value={tests.dateApproved}\r\n                                min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChange}\r\n                                //min={tests.sampleCollectionDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateApproved !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateApproved}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    </Row>           \r\n                    </>)}   \r\n                    \r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={disabledField}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={saving}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n            {/* )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )}  */}\r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\Index.js",["792","793","794","795","796","797"],"import React, { Fragment } from \"react\";\r\n// BS\r\nimport { Dropdown, Nav, Tab } from \"react-bootstrap\";\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport { Link } from \"react-router-dom\";\r\n// images\r\nimport SummaryView from './DashboardAnalytics/SummaryView/Index';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {NewlyEnrolledArtBySex} from './DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtBySex';\r\n\r\nconst options = {\r\n  chart: {\r\n    type: 'column'\r\n},\r\n\r\ntitle: {\r\n    text: 'Viral Load Cascade among new patients eligible after 6 months'\r\n},\r\n\r\nsubtitle: {\r\n    text: ''\r\n},\r\n\r\nlegend: {\r\n    align: 'right',\r\n    verticalAlign: 'middle',\r\n    layout: 'vertical'\r\n},\r\n\r\nxAxis: {\r\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\r\n    labels: {\r\n        x: -10\r\n    }\r\n},\r\n\r\nyAxis: {\r\n    allowDecimals: false,\r\n    title: {\r\n        text: 'Amount'\r\n    }\r\n},\r\n\r\nseries: [{\r\n    name: 'Number Eligble',\r\n    data: [20, 40, 30, 3]\r\n}, {\r\n    name: 'Number of Sample Collected',\r\n    data: [62, 41, 22, 22]\r\n}, {\r\n    name: 'Number Tested',\r\n    data: [200, 45, 30,20]\r\n}, {\r\n  name: 'Number Suppressed',\r\n  data: [40, 40, 10, 90]\r\n}],\r\n\r\nresponsive: {\r\n    rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            legend: {\r\n                align: 'center',\r\n                verticalAlign: 'bottom',\r\n                layout: 'horizontal'\r\n            },\r\n            yAxis: {\r\n                labels: {\r\n                    align: 'left',\r\n                    x: 0,\r\n                    y: -5\r\n                },\r\n                title: {\r\n                    text: null\r\n                }\r\n            },\r\n            subtitle: {\r\n                text: null\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            }\r\n        }\r\n    }]\r\n}\r\n}\r\nconst options2 = {\r\n  chart: {\r\n    type: 'column'\r\n},\r\n\r\ntitle: {\r\n    text: 'Viral Load Cascade among patients currently on ART eligible after 12 months of last VL result'\r\n},\r\n\r\nsubtitle: {\r\n    text: ''\r\n},\r\n\r\nlegend: {\r\n    align: 'right',\r\n    verticalAlign: 'middle',\r\n    layout: 'vertical'\r\n},\r\n\r\nxAxis: {\r\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\r\n    labels: {\r\n        x: -10\r\n    }\r\n},\r\n\r\nyAxis: {\r\n    allowDecimals: false,\r\n    title: {\r\n        text: 'Amount'\r\n    }\r\n},\r\n\r\nseries: [{\r\n    name: 'Number Eligble',\r\n    data: [200, 40, 30, 3]\r\n}, {\r\n    name: 'Number of Sample Collected',\r\n    data: [62, 41, 22, 22]\r\n}, {\r\n    name: 'Number Tested',\r\n    data: [2000, 450, 300,200]\r\n}, {\r\n  name: 'Number Suppressed',\r\n  data: [40, 40, 100, 90]\r\n}],\r\n\r\nresponsive: {\r\n    rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            legend: {\r\n                align: 'center',\r\n                verticalAlign: 'bottom',\r\n                layout: 'horizontal'\r\n            },\r\n            yAxis: {\r\n                labels: {\r\n                    align: 'left',\r\n                    x: 0,\r\n                    y: -5\r\n                },\r\n                title: {\r\n                    text: null\r\n                }\r\n            },\r\n            subtitle: {\r\n                text: null\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            }\r\n        }\r\n    }]\r\n}\r\n}\r\nconst Widget = () => {\r\n  return (\r\n    <Fragment>     \r\n      <div className=\"row\">\r\n       <div className=\"col-xl-3 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-primary text-danger\">\r\n                <i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">NEWLY DIAGNOSED HIV+</p>\r\n                  <h4 className=\"mb-0\">3280</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-warning text-warning\">\r\n                <i class=\"fa fa-heartbeat\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">CURRENT ON ART</p>\r\n                  <h4 className=\"mb-0\">2570</h4>\r\n                  {/* <span className=\"badge badge-warning\">+3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body  p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-danger text-danger\">\r\n                <i class=\"fa fa-compress\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">VIRALLY SUPPRESSED</p>\r\n                  <h4 className=\"mb-0\">50</h4>\r\n                  {/* <span className=\"badge badge-danger\">-3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-success text-success\">\r\n                <i class=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">CURRENTLY ACTIVE</p>\r\n                  <h4 className=\"mb-0\">2340</h4>\r\n                  {/* <span className=\"badge badge-success\">-3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <SummaryView />\r\n        <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n          />\r\n        </div>\r\n        <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options2}\r\n          />\r\n        </div>\r\n        \r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Widget;\r\n",["798","799"],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\ViewUpdate.js",["800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } ,\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n      },\r\n}))\r\n\r\nconst Tracking = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    //const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [reasonTracking, setReasonTracking] = useState([]);\r\n    const [reasonDiscountinuation, setreasonDiscountinuation] = useState([]);\r\n    const [causeDeath, setcauseDeath] = useState([]);\r\n    const [reasonLostToFollowUp, setreasonLostToFollowUp] = useState([]);\r\n    const [reasonDefaulting, setreasonDefaulting] = useState([]);\r\n    const [personContact, setpersonContact] = useState([]);\r\n    const [modeCommunication, setmodeCommunication] = useState([]);\r\n    const [dsdStatus, setdsdStatus] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [attemptList, setAttemptList] = useState([])\r\n    const [disabledField, setDisabledField] = useState(false); \r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"yyyy-MM-dd\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Tracking form\",\r\n        visitId: null\r\n    })\r\n    const [objValues, setObjValues]=useState({\r\n            durationOnART:\"\", \r\n            dsdStatus:\"\", \r\n            dsdModel:\"\", \r\n            reasonForTracking:\"\",\r\n            dateLastAppointment:\"\",\r\n            dateMissedAppointment :\"\",\r\n            careInFacilityDiscountinued :\"\",\r\n            dateOfDiscontinuation :\"\",\r\n            reasonForDiscountinuation:\"\",\r\n            reasonForLossToFollowUp :\"\",\r\n            causeOfDeath :\"\",\r\n            dateReturnToCare :\"\",\r\n            referredFor:\"\",\r\n            referredForOthers:\"\",\r\n            reasonForTrackingOthers:\"\",\r\n            causeOfDeathOthers:\"\",\r\n            reasonForLossToFollowUpOthers:\"\",\r\n            attempts:\"\",\r\n            patientId:props.patientObj.id,\r\n            statusTracker: {\r\n                agreedDate: \"\",\r\n                causeOfDeath: \"\",\r\n                facilityId: \"\",\r\n                hivStatus: \"\",\r\n                personId:props.patientObj.id,\r\n                reasonForInterruption: \"\",\r\n                statusDate: \"\",\r\n                trackDate: \"\",\r\n                trackOutcome: \"\",\r\n                visitId: \"\",\r\n                vaCauseOfDeathType:\"\",\r\n                vaCauseOfDeath:\"\",\r\n              },\r\n            dateOfObservation:\"\"\r\n    })\r\n    useEffect(() => {\r\n        ReasonForTracking();\r\n        LostToFollowUp();\r\n        ReasonForDiscountinuation();\r\n        CauseOfDeath();\r\n        ReasonForDefaulting();\r\n        DsdStatus();\r\n        ModeOfCommunication();\r\n        PersonContact();\r\n        GetPatientDTOObj();\r\n        //GetFormDetail();\r\n        if(props.activeContent && props.activeContent.obj){\r\n            setObjValues({...props.activeContent.obj})\r\n                setAttemptList(props.activeContent.obj.attempts)\r\n                \r\n        }\r\n        if(props.activeContent && props.activeContent.actionType==='view'){\r\n            setDisabledField(true)\r\n        }\r\n    }, [props.activeContent, props.activeContent.id]);\r\n    //Get Tracking Form Object\r\n    // const GetFormDetail =()=>{\r\n    //     axios\r\n    //        .get(`${baseUrl}patient-tracker/patient/${props.activeContent.id}`,\r\n    //            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //        )\r\n    //        .then((response) => {            \r\n    //             const Obj= response.data \r\n                \r\n    //        })\r\n    //        .catch((error) => {\r\n    //        //console.log(error);\r\n    //        });\r\n       \r\n    // } \r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const ReasonForTracking =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_TRACKING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setReasonTracking(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //TRACKING_DSD_STATUS\r\n    const DsdStatus =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/TRACKING_DSD_STATUS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setdsdStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //MODE_OF_COMMUNICATION\r\n    const ModeOfCommunication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/MODE_OF_COMMUNICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setmodeCommunication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }//MODE_OF_COMMUNICATION\r\n    const PersonContact =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PERSON_CONTACTED`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setpersonContact(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //\r\n    const ReasonForDefaulting =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_DEFAULTING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonDefaulting(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const ReasonForDiscountinuation =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_DISCONTINUATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonDiscountinuation(response.data)\r\n                //setreasonDiscountinuation(response.data.filter((x)=> x.code!=='REASON_DISCONTINUATION_INTERRUPTION_IN_TREATMENT'));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const CauseOfDeath =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setcauseDeath(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const LostToFollowUp =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_TRACKING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonLostToFollowUp(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        //The logics below is to make sure that no value is save if the options are not selected\r\n        if(e.target.name==='dsdStatus' && e.target.value!=='TRACKING_DSD_STATUS_DEVOLVED'){\r\n            objValues.dsdModel=\"\"\r\n            setObjValues ({...objValues,  [\"dsdModel\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value===''){\r\n            objValues.dateOfDiscontinuation=\"\"\r\n            objValues.dateReturnToCare=\"\"\r\n            objValues.referredFor=\"\"\r\n            objValues.reasonForDiscountinuation=\"\"\r\n            setObjValues ({...objValues,  [\"dateOfDiscontinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"dateReturnToCare\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredFor\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"reasonForDiscountinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='reasonForDiscountinuation' && e.target.value!=='Death'){\r\n            objValues.causeOfDeath=\"\"\r\n            objValues.causeOfDeathOthers=\"\"\r\n            setObjValues ({...objValues,  [\"causeOfDeath\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='reasonForDiscountinuation' && e.target.value!=='Interruption in Treatment'){\r\n            objValues.reasonForLossToFollowUp=\"\"\r\n            objValues.reasonForLossToFollowUpOthers=\"\"\r\n            setObjValues ({...objValues,  [\"reasonForLossToFollowUpOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        \r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value==='No'){\r\n            objValues.reasonForDiscountinuation=\"\"\r\n            objValues.causeOfDeathOthers=\"\"\r\n            objValues.causeOfDeath=\"\"\r\n            objValues.dateOfDiscontinuation=\"\"\r\n            setObjValues ({...objValues,  [\"reasonForLossToFollowUp\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeath\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"dateOfDiscontinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value==='Yes'){\r\n            objValues.dateReturnToCare=\"\"\r\n            objValues.referredFor=\"\"\r\n            objValues.referredForOthers=\"\"\r\n            setObjValues ({...objValues,  [\"dateReturnToCare\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredFor\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredForOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n    } \r\n    const handleInputChangeObservation = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  dateOfObservation: e.target.value});\r\n    } \r\n    const [attempt, setAttempt] = useState({ attemptDate: \"\", whoAttemptedContact: \"\", \r\n                modeOfConatct: \"\", personContacted: \"\", reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n    });\r\n         \r\n    const handleInputChangeAttempt = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setAttempt ({...attempt,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n    temp.durationOnART = objValues.durationOnART ? \"\" : \"This field is required\"\r\n    temp.dsdStatus = objValues.dsdStatus ? \"\" : \"This field is required\"\r\n    {objValues.dsdStatus==='Devolved' && (temp.dsdModel = objValues.dsdModel ? \"\" : \"This field is required\")}\r\n    temp.reasonForTracking = objValues.reasonForTracking ? \"\" : \"This field is required\"\r\n    temp.dateLastAppointment = objValues.dateLastAppointment ? \"\" : \"This field is required\"\r\n    temp.dateMissedAppointment = objValues.dateMissedAppointment ? \"\" : \"This field is required\"\r\n\r\n    temp.careInFacilityDiscountinued = objValues.careInFacilityDiscountinued ? \"\" : \"This field is required\"\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.dateOfDiscontinuation = objValues.dateOfDiscontinuation ? \"\" : \"This field is required\")}\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.reasonForDiscountinuation = objValues.reasonForDiscountinuation ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Loss to follow-up' && (temp.reasonForLossToFollowUp = objValues.reasonForLossToFollowUp ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Death' && (temp.causeOfDeath = objValues.causeOfDeath ? \"\" : \"This field is required\")}\r\n   // objValues.careInFacilityDiscountinued==='Yes' && (temp.dateReturnToCare = objValues.dateReturnToCare ? \"\" : \"This field is required\")\r\n    objValues.careInFacilityDiscountinued==='No' && objValues.dateReturnToCare!==\"\" && (temp.referredFor = objValues.referredFor ? \"\" : \"This field is required\")\r\n    {objValues.referredFor==='Others' && (temp.referredForOthers = objValues.referredForOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForTracking==='Others' && (temp.reasonForTrackingOthers = objValues.reasonForTrackingOthers ? \"\" : \"This field is required\")}\r\n    {objValues.causeOfDeath==='Unknown' || objValues.causeOfDeath==='Other cause of death' || objValues.causeOfDeath==='Suspected Opportunistic Infection' && (temp.causeOfDeathOthers = objValues.causeOfDeathOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForLossToFollowUp==='Others' && ( temp.reasonForLossToFollowUpOthers = objValues.reasonForLossToFollowUpOthers ? \"\" : \"This field is required\")}\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Validations of the forms\r\n    const validateAttempt = () => {        \r\n    temp.attemptDate = attempt.attemptDate ? \"\" : \"This field is required\"\r\n    temp.whoAttemptedContact = attempt.whoAttemptedContact ? \"\" : \"This field is required\"\r\n    temp.modeOfConatct = attempt.modeOfConatct ? \"\" : \"This field is required\"\r\n    temp.personContacted = attempt.personContacted ? \"\" : \"This field is required\"\r\n    temp.reasonForDefaulting = attempt.reasonForDefaulting ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addAttempt = e => {\r\n        if(validateAttempt()){ \r\n            setAttemptList([...attemptList, attempt])\r\n            setAttempt({attemptDate: \"\", whoAttemptedContact: \"\", \r\n                        modeOfConatct: \"\", personContacted: \"\", \r\n                        reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n            })\r\n        }else{\r\n            toast.error(\"Please fill the required fields\");\r\n        }\r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        attemptList.splice(index, 1);\r\n        setAttemptList([...attemptList]);        \r\n    }; \r\n    \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            if(attemptList.length >0){\r\n                objValues.attempts=attemptList\r\n                //observation.dateOfObservation= observation.dateOfObservation !==\"\" ? observation.dateOfObservation : moment(new Date()).format(\"YYYY-MM-DD\")                  \r\n                observation.personId =patientObj.id\r\n                observation.data=objValues \r\n                if(objValues.statusTracker===null){\r\n                    const statusStrackerObj= {\r\n                        agreedDate: \"\",\r\n                        causeOfDeath: \"\",\r\n                        facilityId: \"\",\r\n                        hivStatus: \"\",\r\n                        personId:props.patientObj.id,\r\n                        reasonForInterruption: \"\",\r\n                        statusDate: \"\",\r\n                        trackDate: \"\",\r\n                        trackOutcome: \"\",\r\n                        visitId: \"\"\r\n                      }\r\n                      objValues.statusTracker=statusStrackerObj\r\n                }else{\r\n                    objValues.statusTracker.causeOfDeath=objValues.causeOfDeath\r\n                    objValues.statusTracker.hivStatus=objValues.reasonForDiscountinuation\r\n                    objValues.statusTracker.reasonForInterruption=objValues.reasonForDiscountinuation\r\n                    objValues.statusTracker.statusDate=objValues.dateOfDiscontinuation\r\n                    objValues.statusTracker.trackDate=objValues.dateOfDiscontinuation\r\n                    objValues.statusTracker.trackOutcome=objValues.reasonForTracking\r\n                    //Adding VACAUSE OF DEATH \r\n                    objValues.statusTracker.vaCauseOfDeathType=objValues.vaCauseOfDeathType\r\n                    objValues.statusTracker.vaCauseOfDeath=objValues.vaCauseOfDeath\r\n                }\r\n                if(objValues.careInFacilityDiscountinued==='No'){\r\n                    objValues.statusTracker=null\r\n                }\r\n                setSaving(true);\r\n                axios.put(`${baseUrl}patient-tracker/${props.activeContent.id}`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        //props.PatientCurrentObject()\r\n                        toast.success(\"Tracking form updated successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        props.setActiveContent({...props.activeContent, route:'tracking-form', id:props.activeContent.obj.id, activeTab:\"history\", actionType:\"update\", obj:props.activeContent.obj})\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                                toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }else{\r\n                                toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }\r\n\r\n                        }\r\n                        else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    });\r\n                }else{\r\n                    toast.error(\"Attempt to Contact can not be empty\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n            }  \r\n    }\r\n\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Client Tracking & Discontinuation Form - {props.activeContent.actionType ==='update' ? \"Update \" : \"View\" }</h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={objValues.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChangeObservation}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    disabled={disabledField}\r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Duration on ART <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"durationOnART\"\r\n                                    id=\"durationOnART\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.durationOnART} \r\n                                    disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"<3months\">{\"<\"} 3 months</option>\r\n                                    <option value=\">=3months\">{\">=\"} 3 months</option>\r\n                                </Input>\r\n                                {errors.durationOnART !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.durationOnART}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">DSD Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdStatus\"\r\n                                    id=\"dsdStatus\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdStatus} \r\n                                    disabled={disabledField}\r\n                                >\r\n                                   <option value=\"\">Select</option>\r\n                                    {dsdStatus.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                    \r\n                                </Input>\r\n                                {errors.dsdStatus !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdStatus}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.dsdStatus==='TRACKING_DSD_STATUS_DEVOLVED' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">DSD Model <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdModel\"\r\n                                    id=\"dsdModel\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdModel}\r\n                                    disabled={disabledField} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"FBM\">FBM</option>\r\n                                    <option value=\"CBM\">CBM</option>\r\n                                </Input>\r\n                                {errors.dsdModel !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdModel}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Tracking <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"reasonForTracking\"\r\n                                    id=\"reasonForTracking\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTracking} \r\n                                    disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {reasonTracking.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.reasonForTracking==='REASON_TRACKING_OTHER_(SPECIFY)' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Tracking Others</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers}\r\n                                    disabled={disabledField} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Last Actual Contact/ Appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Missed Scheduled Appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateMissedAppointment\"\r\n                                id=\"dateMissedAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateMissedAppointment} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                \r\n                            />\r\n                            {errors.dateMissedAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateMissedAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <hr/>\r\n                        <h3>Attempted to Contact</h3>\r\n                        <div className=\"form-group mb-3 col-md-3\">        \r\n                            <FormGroup>\r\n                                <Label >Attempt Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"attemptDate\"\r\n                                    id=\"attemptDate\"\r\n                                    value={attempt.attemptDate}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    disabled={disabledField}\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.attemptDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.attemptDate}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                            </div> \r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Who Attempted Contact?</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"whoAttemptedContact\"\r\n                                    id=\"whoAttemptedContact\"\r\n                                    value={attempt.whoAttemptedContact}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                />\r\n                                {errors.whoAttemptedContact !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.whoAttemptedContact}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Mode Of Contact</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"modeOfConatct\"\r\n                                    id=\"modeOfConatct\"\r\n                                    value={attempt.modeOfConatct}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {modeCommunication.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input> \r\n                                {errors.modeOfConatct !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.modeOfConatct}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Person Contacted</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"personContacted\"\r\n                                    id=\"personContacted\"\r\n                                    value={attempt.personContacted}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {personContact.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.personContacted !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.personContacted}</span>\r\n                                ) : \"\" }  \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Reason for Defaulting</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    value={attempt.reasonForDefaulting}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {reasonDefaulting.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.reasonForDefaulting !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForDefaulting}</span>\r\n                                ) : \"\" }  \r\n                                </FormGroup>\r\n                            </div>\r\n                            {attempt.reasonForDefaulting==='REASON_DEFAULTING_OTHERS_(PLS_SPECIFY)' && (\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Reason for Defaulting</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"reasonForDefaultingOthers\"\r\n                                    id=\"reasonForDefaultingOthers\"\r\n                                    value={attempt.reasonForDefaultingOthers}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={disabledField}\r\n                                />\r\n                                {errors.reasonForDefaultingOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForDefaultingOthers}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            <div className=\"form-group mb-3 col-md-2\">\r\n                            <LabelSui as='a' color='black'  onClick={addAttempt}  size='tiny' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                            </div>\r\n\r\n                            {attemptList.length >0 \r\n                            ?\r\n                                <List>\r\n                                <Table  striped responsive>\r\n                                    <thead >\r\n                                        <tr>\r\n                                            <th>Attempted Date</th>\r\n                                            <th>Who Attempted Contact</th>\r\n                                            <th>Mode Of Conatct</th>\r\n                                            <th>Person Contacted</th>\r\n                                            <th>Reason For Defaulting</th>\r\n                                            <th ></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {attemptList.map((attemptObj, index) => (\r\n\r\n                                    <AttemptedLists\r\n                                        key={index}\r\n                                        index={index}\r\n                                        attemptObj={attemptObj}\r\n                                        removeAttempt={removeAttempt}\r\n                                    />\r\n                                    ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </List>\r\n                                :\r\n                                \"\"\r\n                            }       \r\n                        <hr/>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Patient Care in Facility Discontinued ? <span style={{ color:\"red\"}}> *</span> </Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"careInFacilityDiscountinued\"\r\n                                    id=\"careInFacilityDiscountinued\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.careInFacilityDiscountinued} \r\n                                    disabled={disabledField} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                </Input>\r\n                                {errors.careInFacilityDiscountinued !==\"\" ? (\r\n                                <span className={classes.error}>{errors.careInFacilityDiscountinued}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.careInFacilityDiscountinued==='No' && (<>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date Returned to Care</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateReturnToCare\"\r\n                                id=\"dateReturnToCare\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateReturnToCare} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateReturnToCare !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateReturnToCare}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referred for</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"referredFor\"\r\n                                id=\"referredFor\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.referredFor} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            >\r\n                                <option value=\"\"></option>\r\n                                <option value=\"Adherence Counselling\">Adherence Counselling</option>\r\n                                <option value=\"Others\">Others</option>\r\n                            </Input>\r\n                            {errors.referredFor !==\"\" ? (\r\n                                <span className={classes.error}>{errors.referredFor}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.referredFor==='Others' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referred for - (Others specify ) </Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"referredForOthers\"\r\n                                id=\"referredForOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.referredForOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                             {errors.referredForOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.referredForOthers}</span>\r\n                                ) : \"\" } \r\n                            </FormGroup>\r\n                        </div>\r\n                      )}\r\n                        </>)}\r\n                        {objValues.careInFacilityDiscountinued==='Yes' && (<>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date of Discontinuation</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfDiscontinuation\"\r\n                                id=\"dateOfDiscontinuation\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateOfDiscontinuation} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.dateOfDiscontinuation !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfDiscontinuation}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Discontinuation</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonForDiscountinuation\"\r\n                                id=\"reasonForDiscountinuation\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForDiscountinuation} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                    {reasonDiscountinuation.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.reasonForDiscountinuation !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForDiscountinuation}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>)}\r\n                        {objValues.reasonForDiscountinuation==='Death' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Cause of Death</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"causeOfDeath\"\r\n                                id=\"causeOfDeath\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.causeOfDeath} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            >\r\n                                 {causeDeath.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.causeOfDeath !==\"\" ? (\r\n                                <span className={classes.error}>{errors.causeOfDeath}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {(objValues.causeOfDeath==='Natural Cause' || objValues.causeOfDeath==='Unknown cause' ) && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Cause of Death - {objValues.causeOfDeath} (specify)</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"causeOfDeathOthers\"\r\n                                id=\"causeOfDeathOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.causeOfDeathOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            {errors.causeOfDeathOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.causeOfDeathOthers}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.reasonForDiscountinuation==='Interruption in Treatment (Confirmed)' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Interruption in Treatment</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonForLossToFollowUp\"\r\n                                id=\"reasonForLossToFollowUp\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForLossToFollowUp} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Travel/Relocation\">Travel/Relocation</option>\r\n                                <option value=\"Spiritual/Cultural beliefs\">Spiritual/Cultural beliefs</option>\r\n                                <option value=\"Pill burden/ARV side effects\">Pill burden/ARV side effects</option>\r\n                                <option value=\"Stigma/Conduct of staff\">Stigma/Conduct of staff</option>\r\n                                <option value=\"Distance/Economic reasons\">Distance/Economic reasons</option>\r\n                                <option value=\"Others\">Others</option>\r\n                            </Input>\r\n                            {errors.reasonForLossToFollowUp !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForLossToFollowUp}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.reasonForLossToFollowUp==='Others' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Interruption in Treatment - Others specify</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"reasonForLossToFollowUpOthers\"\r\n                                id=\"reasonForLossToFollowUpOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForLossToFollowUpOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                              \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        \r\n                       \r\n                       \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType ==='update' ? (\r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    hidden={disabledField}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={saving}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    )\r\n                    :\" \"\r\n                    }\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nfunction AttemptedLists({\r\n    attemptObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n  \r\n  \r\n    return (\r\n            <tr>\r\n                <th>{attemptObj.attemptDate}</th>\r\n                <th>{attemptObj.whoAttemptedContact}</th>\r\n                <th>{attemptObj.modeOfConatct}</th>\r\n                <th>{attemptObj.personContacted}</th>\r\n                <th>{attemptObj.reasonForDefaulting==='' ? attemptObj.reasonForDefaultingOthers : attemptObj.reasonForDefaulting}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Tracking;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js",["834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n    Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport {Dropdown,Badge} from 'react-bootstrap';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport fingerprintimage  from './../../images/fingerprintimage.png';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpgradeIcon from '@mui/icons-material/Upgrade';\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":{\r\n            fontFamily:'FontAwesome',\r\n            border:'0',\r\n            verticalAlign:'middle',\r\n            marginLeft:'.25em',\r\n            lineHeight:'1'\r\n        },\r\n        \"& .dropdown-menu .dropdown-item\":{\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            padding: '0.3rem 1.5rem',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .mt-4\":{\r\n            marginTop:'28px !important'\r\n        },\r\n        \"& .form-control\":{\r\n            color:'#992E62'\r\n        },\r\n        \"& .form-control:focus\":{\r\n            color:'#014d88'\r\n        },\r\n        \"& .sharp \":{\r\n            \"min-width\": \"35px\",\r\n            padding:\"5px\",\r\n            height: '35px',\r\n            \"min-height\": \"35px\"\r\n}\r\n    },\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n/*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nfunction Biometrics(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const [biometricDevices,setbiometricDevices] = useState([]);\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [pageLoading, setPageLoading] = useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n    // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([]);\r\n    const [selectedFingers, setSelectedFingers] = useState([]);\r\n\r\n    const buttonSx = {\r\n        ...(success && {\r\n            bgcolor: green[500],\r\n            '&:hover': {\r\n                bgcolor: green[700],\r\n            },\r\n        }),\r\n    };\r\n\r\n    const getPersonBiometrics = async() =>{\r\n        const fingersCodeset = await axios.get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n\r\n        axios.get(`${baseUrl}biometrics/person/${props.patientId}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then(async (response)=>{\r\n            if(response.data.length > 0){\r\n                setStoredBiometrics(response.data);\r\n                setPageLoading(true);\r\n                let personCapturedFingers = _.uniq(_.map(response.data,'templateType'))\r\n                setSelectedFingers(personCapturedFingers);\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: personCapturedFingers.includes(item.display)});\r\n\r\n                });\r\n                setFingerType(biometricItems);\r\n            }else{\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: false});\r\n                    //return item.captured = personCapturedFingers.includes(item.display)\r\n                });\r\n                setFingerType(biometricItems);\r\n\r\n            }\r\n\r\n        }).catch(async (error)=>{\r\n            console.log(\"getPersonBiometrics error\")\r\n            console.log(error)\r\n\r\n            let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                return _.extend({}, item, {captured: false});\r\n            });\r\n            setFingerType(biometricItems);\r\n            setPageLoading(true);\r\n        })\r\n    }\r\n\r\n    const clear_storelist = () =>{\r\n        axios.post(`${baseUrl}biometrics/store-list/${props.patientId}`,props.patientId,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            console.log('cleared store')\r\n        }).catch((error)=>{\r\n            console.log(\"cleared store error\")\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        clear_storelist();\r\n        getPersonBiometrics();\r\n        TemplateType();\r\n        //biometricFingers();\r\n    }, []);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n                            setbiometricDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    //Get list of Finger index\r\n    const biometricFingers =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setFingerType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            });\r\n\r\n    }\r\n    //check if device is plugged or not\r\n    const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n            .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data.errorType ===\"ERROR\"){\r\n                    toast.error(response.data.errorName + \" is not plug\");\r\n                    //setshowCapture(true)\r\n                }else{\r\n                    setshowCapture(true)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n    // handle the input changes\r\n\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    //to capture  selected index finger\r\n    const captureFinger = (e) => {\r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    setLoading(true);\r\n                    if(response.data.type ===\"ERROR\"){\r\n                        setLoading(false);\r\n                        setTryAgain(true);\r\n                        window.setTimeout(() => {\r\n                            setTryAgain(false);\r\n                        }, 5000);\r\n                        toast.error(response.data.message.ERROR);\r\n                    }else{\r\n                        const templateType= response.data.templateType\r\n                        setTryAgain(false);\r\n                        setSuccess(true)\r\n                        window.setTimeout(() => {\r\n                            setSuccess(false)\r\n                            setLoading(false);\r\n                        }, 5000);\r\n                        let biometricsEnrollments = response.data\r\n                        biometricsEnrollments.capturedBiometricsList = _.uniqBy(biometricsEnrollments.capturedBiometricsList,\"templateType\");\r\n\r\n                        setCapturedFingered([...capturedFingered, biometricsEnrollments])\r\n                        //fingerType.splice(templateType, 1);\r\n                        _.find(fingerType,{'display':templateType}).captured = true;\r\n                        setFingerType([...fingerType]);\r\n                        //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\r\n                        setObjValues({...objValues, templateType:\"\"});\r\n                    }\r\n                    //toast.success(\"Record save successful\");\r\n                })\r\n                .catch(error => {\r\n                });\r\n        }\r\n    }\r\n\r\n    const deleteBiometric =(id,finger)=>{\r\n        axios.delete(`${baseUrl}biometrics/${id}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            toast.success(`${finger} deleted successfully`);\r\n            _.find(fingerType,{'display':finger}).captured = false;\r\n            setFingerType([...fingerType]);\r\n            let newStoredBiometrics = _.reject(storedBiometrics, {\"templateType\":finger});\r\n            setStoredBiometrics(newStoredBiometrics);\r\n            clear_storelist();\r\n            if(newStoredBiometrics.length === 0){\r\n                props.updatePatientBiometricStatus(false);\r\n            }\r\n        }).catch((error)=>{\r\n            toast.error(\"Something went wrong\");\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {\r\n        e.preventDefault();\r\n        if(capturedFingered.length >= 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1];\r\n            capturedObj.capturedBiometricsList =_.uniqBy(capturedObj.capturedBiometricsList,\"templateType\")\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Biometric save successful\");\r\n                    setCapturedFingered([])\r\n                    getPersonBiometrics();\r\n                    props.patientObj.biometricStatus=true\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                    //props.updatePatientBiometricStatus(true);\r\n                })\r\n                .catch(error => {\r\n                    toast.error(\"Something went wrong saving biometrics\");\r\n                    console.log(error);\r\n                });\r\n        }else{\r\n\r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <div style={{display:\"flex\",width:'100%'}}>\r\n                <div className=\"\" style={{padding:'5px', flex:\"7\",boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px',minHeight:'400px'}}>\r\n                    {pageLoading && storedBiometrics.length > 0 ? (\r\n                            <div style={{display:\"flex\",width:'100%',flexWrap:'wrap'}}>\r\n                                {storedBiometrics.map((biometric, index)=>(\r\n                                    <div   key={index} style={{minHeight:'120px',padding:'5px', width:'20%'}}>\r\n                                        <div  className=\"card \" style={{borderRadius:\"6px\"}}>\r\n\r\n                                            <div className=\"card-header align-items-start\" style={{backgroundColor:'#fff'}}>\r\n                                                <div>\r\n                                                    <h6 className=\"fs-18 font-w500 mb-3 user-name\"><Link to={\"#\"} style={{color:'#014d88',fontSize:'14px',fontFamily:`\"poppins\",sans-serif`}}>{biometric.templateType}</Link></h6>\r\n                                                    <div className=\"fs-9 text-nowrap\" style={{fontSize:'10px',color:'#992E62', fontWeight:'bold',fontFamily:`\"poppins\",sans-serif`}}><i className=\"fa fa-calendar-o me-3\" aria-hidden=\"true\"></i>{moment(biometric.lastModifiedDate).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                                </div>\r\n\r\n                                                {/*Action button -- Dropdown menu*/}\r\n                                                <Dropdown className=\"dropdown ms-auto\"  >\r\n                                                    <Dropdown.Toggle\r\n                                                        as=\"button\"\r\n                                                        variant=\"\"\r\n                                                        drop=\"up\"\r\n                                                        className=\"btn sharp btn-primary \"\r\n                                                        id=\"tp-btn\"\r\n                                                        style={{ backgroundColor: '#014d88', borderColor:'#014d88', borderRadius:'5px',marginRight:'-18px',marginTop:'-10px'}}\r\n                                                    >\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                                                            width=\"18px\"\r\n                                                            height=\"18px\"\r\n                                                            viewBox=\"0 0 24 24\"\r\n                                                            version=\"1.1\"\r\n                                                        >\r\n                                                            <g\r\n                                                                stroke=\"none\"\r\n                                                                strokeWidth=\"1\"\r\n                                                                fill=\"none\"\r\n                                                                fillRule=\"evenodd\"\r\n                                                            >\r\n                                                                <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                                                            </g>\r\n                                                        </svg>\r\n                                                    </Dropdown.Toggle>\r\n                                                    <Dropdown.Menu alignRight={true} className=\"dropdown-menu-right\">\r\n                                                        <Dropdown.Item style={{color:'red'}} onClick={()=>deleteBiometric(biometric.id,biometric.templateType)}>\r\n                                                            <DeleteIcon /> Delete\r\n                                                        </Dropdown.Item>\r\n\r\n                                                    </Dropdown.Menu>\r\n                                                </Dropdown>\r\n\r\n                                            </div>\r\n                                            <div className=\"card-body p-0 pb-2\">\r\n                                                <ul className=\"list-group list-group-flush\">\r\n                                                    <li className=\"list-group-item\" style={{height:'100px', display:'flex',justifyContent:'center'}}>\r\n                                                        <img src={fingerprintimage}  alt=\"\" style={{height:'80px'}} />\r\n                                                    </li>\r\n\r\n                                                    <li className=\"list-group-item\">\r\n\r\n                                                        <Badge variant=\"info badge-xs light\" className=\"card-link float-end\">Version {/*{contact.version}*/}</Badge>\r\n                                                        <span className=\"mb-0 title\">Status {biometric.iso}</span> :\r\n                                                        <span className=\"text-black desc-text ms-2\">\r\n                                                        <Badge variant={biometric.iso===true? \"primary badge-xs\": \"danger badge-xs\"}><i className=\"fa fa-check-square me-2 scale4\" aria-hidden=\"true\"></i> </Badge>\r\n                                                    </span>\r\n                                                    </li>\r\n\r\n                                                </ul>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                ))}\r\n                            </div>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div className=\"flex-grow-8\">\r\n                                <div  className=\"flex-grow-8\"  >\r\n                                    <Alert severity=\"info\">\r\n                                        <AlertTitle style={{height:'400px'}}>\r\n                                            <strong>No biometrics captured</strong>\r\n                                        </AlertTitle>\r\n                                    </Alert>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n\r\n                    <div style={{flex:\"3\",padding:'5px',marginLeft:'5px',border:'1px solid rgba(99, 99, 99, 0.2)',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <div className=\"col-12\">\r\n                            <ToastContainer />\r\n                            <Col md={12}>\r\n                                <FormGroup>\r\n                                    <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Device </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"device\"\r\n                                        id=\"device\"\r\n                                        onChange={checkDevice}\r\n                                        value={objValues.device}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Device </option>\r\n                                        {biometricDevices.map(({ id, name }) => (\r\n                                            <option key={id} value={name}>\r\n                                                {name}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.device !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.device}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            {showCapture ? (\r\n                                    <div className=\"row col-12\">\r\n                                        <Col md={6}>\r\n                                            <FormGroup>\r\n                                                <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">Select Finger </option>\r\n\r\n                                                    {_.filter(fingerType, ['captured', false]).map((value) => (\r\n                                                        <option key={value.id} value={value.display}>\r\n                                                            {value.display}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Input>\r\n                                                {errors.templateType !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.templateType}</span>\r\n                                                ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n\r\n                                        <Col md={6}>\r\n\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={captureFinger}\r\n                                                className={'mt-4'}\r\n                                                style={{backgroundColor:'#992E62'}}\r\n                                                startIcon={<FingerprintIcon />}\r\n                                            >\r\n                                                Capture Finger\r\n                                            </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                \"\"\r\n                            }\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} style={{marginTop:\"10px\", paddingBottom:'20px'}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',border:'1px dotted #014d88',margin:'5px'}}>\r\n                                                            <List.Header style={{ paddingLeft:\"0px\", height:'0.5rem',display:'flex', justifyContent:'right',alignItems: 'right'}}><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content style={{width:'200px',height:'160px',display:'flex', justifyContent:'center',alignItems: 'center'}}> <FingerprintIcon style={{color:\"#992E62\", fontSize: 150}}/></List.Content>\r\n                                                            <List.Content style={{width:'200px',height:'30px',display:'flex', justifyContent:'center',alignItems: 'center', fontSize: '18px',color:'#014d88',fontWeight:'bold', fontFamily:'\"poppins\", sans-serif'}}>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n\r\n                   \r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n            <Form >\r\n\r\n                    <Card>\r\n                         <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            <Row form>\r\n                                <ToastContainer />\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label for='device'>Select Device </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"device\"\r\n                                            id=\"device\"\r\n                                            onChange={checkDevice}\r\n                                            value={objValues.device}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Device </option>\r\n                                            {biometricDevices.map(({ id, name }) => (\r\n                                                <option key={id} value={name}>\r\n                                                    {name}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                        {errors.device !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.device}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                                <FormGroup>\r\n                                                    <Label for='device'>Select Finger</Label>\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"templateType\"\r\n                                                        id=\"templateType\"\r\n                                                        onChange={handleInputChange}\r\n                                                        value={objValues.templateType}\r\n                                                        required\r\n                                                    >\r\n                                                        <option value=\"\">Select Finger </option>\r\n\r\n                                                        {fingerType.map((value) => (\r\n                                                            <option key={value.id} value={value.display}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Input>\r\n                                                    {errors.templateType !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.templateType}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n                                            <Col md={4}>\r\n\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={captureFinger}\r\n                                                    className={'mt-4'}\r\n                                                    startIcon={<FingerprintIcon />}\r\n                                                >\r\n                                                    Capture Finger\r\n                                                </MatButton>\r\n\r\n                                            </Col>\r\n                                            <br/>\r\n\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                                 <img width='500' height='200' src={responseImage}/>\r\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n\r\n                                    {loading && (\r\n                                        <>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                    </Fab>\r\n                                                    {loading && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: green[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    {tryAgain && (\r\n                                        <>\r\n\r\n\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        <FingerprintIcon />\r\n                                                    </Fab>\r\n                                                    {tryAgain && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: red[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    Click to Recapture Again\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} >\r\n                                                <h3>Captured Fingerprints</h3>\r\n                                            </Col>\r\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\r\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n            </Form>\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Biometrics;","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViewLaboratory.js",["865","866","867","868","869","870","871","872","873","874","875","876","877","878"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\nimport {Alert } from \"react-bootstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    const [test, setTest] = useState([]);\r\n    const [vlRequired, setVlRequired]=useState(false)\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    const [showVLIndication, setShowVLIndication] = useState(false);\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        comments: \"\",\r\n                                        dateAssayed: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateResultReceived:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: 0,\r\n                                        visitId:\"\" \r\n                                    })\r\n    useEffect(() => {\r\n            TestGroup();\r\n            ViraLoadIndication();\r\n            PatientVisit();\r\n            CheckLabModule();\r\n            setTests(props.activeContent.obj)\r\n            //setTest(props.activeContent.obj.labTestId)\r\n        }, [props.patientObj.id, props.activeContent.obj]);\r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtestgroups`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setTestGroup(response.data);\r\n                const getTestList= response.data.filter((x)=> x.id===parseInt(props.activeContent.obj.labTestGroupId))\r\n                setTest(getTestList[0].labTests)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get Patiet Visit \r\n    const PatientVisit =()=>{\r\n        axios\r\n            .get(`${baseUrl}patient/visit/visit-detail/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const lastVisit = response.data[response.data.length - 1]\r\n                if(lastVisit.status===\"PENDING\"){\r\n                    visitId= lastVisit.id\r\n                    //setCurrentVisit(true)\r\n                    setButtonHidden(false)\r\n                }else{\r\n                    toast.error(\"Patient do not have any active visit\")\r\n                    setButtonHidden(true)\r\n                    //setCurrentVisit(false)\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleSelectedTestGroup = e =>{\r\n\r\n        setTests ({...tests,  labTestGroupId: e.target.value});\r\n        const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n        setTest(getTestList[0].labTests)\r\n        if(e.target.value==='4'){            \r\n            setVlRequired(true)\r\n        }else{\r\n            setVlRequired(false) \r\n        }\r\n        //setTests ({...tests,  [e.target.name]: e.target.value}); \r\n    }\r\n    const handleInputChangeObject = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChangeTest = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        if(e.target.value===\"16\"){\r\n            setShowVLIndication(true)\r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }else{\r\n            setShowVLIndication(false)\r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }\r\n        //setObjValues ({...objValues,  [e.target.name]: e.target.value});       \r\n    }\r\n    const addOrder = e => {   \r\n        if(validate()){            \r\n            tests.visitId=visitId\r\n            setTestOrderList([...testOrderList, tests])\r\n        }\r\n      }\r\n      /* Remove ADR  function **/\r\n      const removeOrder = index => {       \r\n        testOrderList.splice(index, 1);\r\n        setTestOrderList([...testOrderList]);\r\n         \r\n      };\r\n      //Validations of the forms\r\n      const validate = () => {        \r\n        temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n        temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        temp.labNumber = tests.labNumber ? \"\" : \"This field is required\"\r\n        temp.dateResultReceived =  tests.dateResultReceived ? \"\" : \"This field is required\"\r\n        vlRequired && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")\r\n        temp.result = tests.result ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();            \r\n        setSaving(true);\r\n        //setTestOrderList([...testOrderList, tests])\r\n        axios.put(`${baseUrl}laboratory/rde-orders/tests/${props.activeContent.obj.id}`,tests,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Laboratory test order updated successful\");\r\n                props.setActiveContent({...props.activeContent, route:'laboratory', id:props.activeContent.obj.id, activeTab:\"history\", actionType:\"update\", obj:props.activeContent.obj})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage); \r\n                }                  \r\n            }); \r\n    }\r\n\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Laboratory RDE</h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {moduleStatus===\"1\" && (\r\n                <form >\r\n                <div className=\"row\">\r\n                    \r\n                    <Row>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\"> Date Sample Collected*</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"sampleCollectionDate\"\r\n                                    id=\"sampleCollectionDate\"\r\n                                    value={tests.sampleCollectionDate}\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.sampleCollectionDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">laboratory Number*</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Assey*</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    onChange={handleInputChange}\r\n                                    min={tests.dateResultReceived}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Result Received*</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateResultReceived\"\r\n                                    id=\"dateResultReceived\"\r\n                                    value={tests.dateResultReceived}\r\n                                    onChange={handleInputChange}\r\n                                    min={tests.sampleCollectionDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateResultReceived !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test Group*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestGroupId\"\r\n                                    id=\"labTestGroupId\"\r\n                                    value={tests.labTestGroupId}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestGroupId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestId\"\r\n                                    id=\"labTestId\"\r\n                                    value={tests.labTestId}\r\n                                    onChange={handleInputChangeTest} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {test.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.labTestName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"priority\">Result*</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"result\"\r\n                                    id=\"result\"\r\n                                    value={tests.result}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                    >\r\n                                   \r\n                                </Input>\r\n                                {errors.result !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.result}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                       {vlRequired && (\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"vlIndication\">VL Indication*</Label>\r\n                                    <Input\r\n                                    type=\"select\"\r\n                                    name=\"viralLoadIndication\"\r\n                                    id=\"viralLoadIndication\"\r\n                                    value={tests.viralLoadIndication}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {vLIndication.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.viralLoadIndication !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                        </Col>\r\n                        )}\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"priority\">Comment</Label>\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    name=\"comments\"\r\n                                    id=\"comments\"\r\n                                    value={tests.comments}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                    >\r\n                                    \r\n                                </Input>\r\n                                \r\n                            </FormGroup>\r\n                        </Col>\r\n                       \r\n\r\n                    </Row>\r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType==='update' ? (\r\n                        <MatButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            hidden={buttonHidden}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            \r\n                            onClick={handleSubmit}\r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                            )}\r\n                        </MatButton>\r\n                        )\r\n                        :\"\"\r\n                    }\r\n                \r\n                </form>\r\n            )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )} \r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\ThirdEac.js",["879","880","881","882","883","884"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"./../../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACHistory()\r\n    }, [props.activeContent.id]);\r\n    ///GET LIST OF EAC\r\n    const EACHistory =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}observation/eac/${props.activeContent.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setObjValues({...objValues, ...response.data})\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.status='Third'\r\n          axios.put(`${baseUrl}observation/eac/${props.activeContent.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                \r\n                  setSaving(false);\r\n                  props.setHideThird(false)\r\n                  props.setHideFirst(false)                 \r\n                  props.setEacObj(response.data)\r\n                  toast.success(\" Save successful\");\r\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <h4>Second EAC Date {objValues.dateOfEac2}</h4>\r\n                        <br/>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Third EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac3\"\r\n                                id=\"dateOfEac3\"\r\n                                value={objValues.dateOfEac3}\r\n                                onChange={handleInputChange}\r\n                                min={objValues.dateOfEac2!==\"\"? objValues.dateOfEac2 : \"\"}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac3 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac3}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        \r\n                    </div>\r\n                    \r\n                    {/* {saving ? <Spinner /> : \"\"} */}\r\n                    <br />\r\n                    {props.activeContent.actionType==='update' ? (\r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={props.activeContent.actionType==='update'? false : true}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    ):\"\"}\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\FirstEac.js",["885","886","887","888"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"./../../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"First\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACStatus();\r\n        }, [props.activeContent.id]);\r\n    \r\n        ///GET LIST OF FUNCTIONAL%20_STATUS\r\n        // TB STATUS\r\n        const EACStatus = ()=>{\r\n        axios\r\n            .get(`${baseUrl}observation/eac/${props.activeContent.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                objValues.dateOfEac1=response.data.dateOfEac1\r\n                objValues.dateOfEac2= response.data.dateOfEac2\r\n                objValues.dateOfEac3=response.data.dateOfEac3\r\n                objValues.dateOfLastViralLoad=response.data.dateOfLastViralLoad\r\n                objValues.lastViralLoad=response.data.lastViralLoad\r\n                objValues.note=response.data.note\r\n                objValues.personId=response.data.personId\r\n                objValues.status=response.data.status\r\n                objValues.visitId=response.data.visitId\r\n                setObjValues({...objValues, ...response.data})\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n \r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          axios.put(`${baseUrl}observation/eac/${props.activeContent.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setEacObj(response.data)\r\n                  props.setHideFirst(true)\r\n                  props.setHideFirst(true)\r\n                  props.setHideSecond(true)\r\n                  toast.success(\" Save successful\");\r\n                  //props.setActiveContent('recent-history')\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Of Last Viral Load</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfLastViralLoad\"\r\n                                id=\"dateOfLastViralLoad\"\r\n                                value={objValues.dateOfLastViralLoad}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType==='update'? false : true}\r\n                                required\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType==='update'? false : true}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">lastViralLoad</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name=\"lastViralLoad\"\r\n                                id=\"lastViralLoad\"\r\n                                value={objValues.lastViralLoad}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType==='update'? false : true}\r\n                                required\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">note</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType==='update'? false : true}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <br />\r\n                {props.activeContent.actionType==='update' ? (\r\n                        <MatButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={handleSubmit}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            disabled={objValues.dateOfEac1===\"\" ? true : false}\r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                            )}\r\n                        </MatButton>\r\n                        ): \"\"\r\n                }\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViewEAC\\SecondEac.js",["889","890","891","892","893"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"./../../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACHistory()\r\n    }, [props.activeContent.id]);\r\n    ///GET LIST OF EAC\r\n    const EACHistory =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}observation/eac/${props.activeContent.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setObjValues({...objValues, ...response.data})\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.status='Second'\r\n          axios.put(`${baseUrl}observation/eac/${props.activeContent.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setHideSecond(false)\r\n                  props.setHideThird(true)\r\n                  props.setEacObj(response.data)\r\n                  toast.success(\" Save successful\");\r\n                  //props.setActiveContent('recent-history')\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <h4>First EAC Date  {objValues.dateOfEac1}</h4>\r\n                        <br/>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Second EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac2\"\r\n                                id=\"dateOfEac2\"\r\n                                value={objValues.dateOfEac2}\r\n                                onChange={handleInputChange}\r\n                                min={objValues.dateOfEac1}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                disabled={props.activeContent.actionType==='update'? false : true}\r\n                            />\r\n                            {errors.dateOfEac2 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac2}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                    {props.activeContent.actionType==='update' ? (\r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac2===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    ):\"\"}\r\n                   \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyRefillViewUpdate.js",["894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup, CardBody, Card, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n//import CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n//import Select from \"react-select\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { toast} from \"react-toastify\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\n//import { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\nlet refillPeriodValue=null\r\n\r\nconst Pharmacy = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [selectedCombinedRegimen, setSelectedCombinedRegimen] = useState([]);\r\n    const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    //const [selectedOption, setSelectedOption] = useState([]);\r\n    const [selectedOptionAdr, setSelectedOptionAdr] = useState();\r\n    const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n    const [mmdType, setmmdType]=useState();\r\n    const [dsdModelType, setDsdModelType] = useState([]);\r\n    const [showmmdType, setShowmmdType]=useState(false);\r\n    // const [showDsdModel, setShowDsdModel] = useState(false);\r\n    // const [showAdr, setShowAdr] = useState(false);\r\n    const [showRegimen, setShowRegimen] = useState(false);\r\n    const [regimen, setRegimen] = useState([]);\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [regimenTypeOI, setRegimenTypeOI] = useState([]);\r\n    const [regimenTypeTB, setRegimenTypeTB] = useState([]);\r\n    const [regimenDrug, setRegimenDrug] = useState([]);\r\n    const [regimenDrugList, setRegimenDrugList] = useState([]);\r\n    const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\r\n    // const [currentVitalSigns, setcurrentVitalSigns] = useState({})\r\n    // const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [adultArtRegimenLine, setAdultArtRegimenLine] = useState([]);\r\n    const [oIRegimenLine, setOIRegimenLine] = useState([]);\r\n    const [tbRegimenLine, setTbRegimenLine] = useState([]);\r\n    //const [othersRegimenLine, setOthersRegimenLine] = useState([]);\r\n    const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n    const [iptType, setIPT_TYPE] = useState([]);\r\n    const [showIptType, setIptType] = useState(false);\r\n    const [childrenOI, setChildrenOI] = useState([]);\r\n    const [childrenTB, setChildrenTB] = useState([]);\r\n    const [otherDrugs, setOtherDrugs] = useState([]);\r\n    const [regimenTypeOther, setRegimenTypeOther] = useState([]);\r\n    const [iptEligibilty, setIptEligibilty] = useState(\"\");\r\n    const [objValues, setObjValues] = useState({\r\n            adherence: \"\",\r\n            adrScreened: \"\",\r\n            adverseDrugReactions: {},\r\n            dsdModel:\"\",\r\n            isDevolve:\"\",\r\n            extra: {},\r\n            facilityId: 2,\r\n            mmdType:null,\r\n            nextAppointment: null,\r\n            personId: props.patientObj.id,\r\n            refillPeriod:null,\r\n            prescriptionError: null,\r\n            regimenId: [],\r\n            regimenTypeId:\"\",\r\n            visitDate: null,\r\n            visitId: 0,\r\n            refill:\"\",\r\n            refillType:\"\",\r\n            dsdModelType,\r\n            switch:\"\",\r\n            substitute:\"\",\r\n            iptType:\"\",\r\n            visitType:''\r\n    });\r\n    const [vital, setVitalSignDto]= useState({\r\n        bodyWeight: \"\",\r\n        diastolic:\"\",\r\n        encounterDate: \"\",\r\n        facilityId: 1,\r\n        height: \"\",\r\n        personId: props.patientObj.id,\r\n        serviceTypeId: 1,\r\n        systolic:\"\",\r\n        pulse:\"\",\r\n        temperature:\"\",\r\n        respiratoryRate:\"\" \r\n    })\r\n    const [disabledField, setDisabledField] = useState(false);\r\n    useEffect(() => {\r\n        RegimenLine();\r\n        PrepSideEffect();\r\n        VitalSigns();\r\n        AdultRegimenLine();\r\n        PharmacyRefillDetail();\r\n        CheckEACStatus();\r\n        IPT_TYPE();\r\n        VitalSigns();\r\n        ChildRegimenLine();\r\n        OtherDrugs();\r\n        GetIptEligibilty();\r\n        if(props.activeContent && props.activeContent.actionType==='view'){\r\n            setDisabledField(true)\r\n        } \r\n    }, [props.activeContent.obj, props.activeContent.id, objValues.dsdModelType]);\r\n    const IPT_TYPE =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/IPT_TYPE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setIPT_TYPE(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const GetIptEligibilty =()=>{//GET IPT ELIGIBILITY\r\n        axios\r\n        .get(`${baseUrl}observation/check-ipt-eligible/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setIptEligibilty(response.data)\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //GET Other Drugd \r\n    const OtherDrugs =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/other/drugs`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n              setOtherDrugs(Object.entries(response.data).map(([key, value]) => ({\r\n                label: value.description,\r\n                value: value.id,\r\n                })));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m;\r\n                }\r\n                return age_now;\r\n    };\r\n    const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n    //GET ChildRegimenLine \r\n    const ChildRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/children`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setChildRegimenLine(response.data.filter((x)=> (x.id===3 || x.id===4 )));\r\n                setChildrenOI(response.data.filter((x)=> (x.id===15 || x.id===9 || x.id===8)))\r\n                setChildrenTB(response.data.filter((x)=> (x.id===11 )))\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get Pharmacy refill Detail\r\n    const PharmacyRefillDetail =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/art/pharmacy/${props.activeContent.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const data=response.data\r\n                console.log(data);\r\n                setObjValues(data);\r\n                setRegimenDrugList(data && data.extra ? data.extra.regimens : [])\r\n                DsdModelType(objValues.dsdModel)\r\n                objValues.dsdModelType=data.dsdModelType\r\n                //}\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get list of DSD Model Type\r\n    function DsdModelType (dsdmodel) {\r\n        const dsd = dsdmodel ==='Facility' ? 'DSD_MODEL_FACILITY' : 'DSD_MODEL_COMMUNITY'\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/${dsd}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setDsdModelType(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n     //GET AdultRegimenLine \r\n     const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //const filterRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===3 || x.id===4 || x.id===14))\r\n                const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14))\r\n                const tbRegimen=response.data.filter((x)=> (x.id===10 ))\r\n                const oIRegimen=response.data.filter((x)=> (x.id===9 || x.id===15 || x.id===8))\r\n                const othersRegimen=response.data.filter((x)=> (x.id!==1 || x.id===2 || x.id===3 || x.id===4 || x.id===14))\r\n               setAdultArtRegimenLine(artRegimen);\r\n               setTbRegimenLine(tbRegimen);\r\n               setOIRegimenLine(oIRegimen);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n      }\r\n\r\n    //Check for the last Vital Signs\r\n    const VitalSigns = () => {\r\n        axios\r\n          .get(`${baseUrl}patient/vital-sign/person/${props.patientObj.id}`,\r\n            { headers: { \"Authorization\": `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n             const lastVitalSigns = response.data[response.data.length - 1]\r\n             //console.log(lastVitalSigns)\r\n            if (lastVitalSigns.captureDate >= moment(new Date()).format(\"YYYY-MM-DD\")) {\r\n                setVitalSignDto(lastVitalSigns)\r\n              setShowCurrentVitalSigns(true)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            //console.log(error);\r\n          });\r\n        }\r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               console.log(response.data);\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenLine =()=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/types`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            \r\n            setRegimen(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //Get list of PrepSideEffect\r\n    const PrepSideEffect =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setPrepSideEffect(Object.entries(response.data).map(([key, value]) => ({\r\n                label: value.display,\r\n                value: value.id,\r\n              })));\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    function RegimenType(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenType(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenTypeOI(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeOI(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenTypeTB(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeTB(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenDrug(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenType.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenDrugOI(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenTypeOI.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenDrugTB(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenTypeTB.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenDrugOther(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenTypeOther.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        //console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenTypeOther(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeOther(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    const handleInputChange = e => {\r\n        if(e.target.name==='dsdModel' && e.target.value!==''){\r\n            DsdModelType(e.target.value)\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n       \r\n    }\r\n    const handleSelectedRegimen = e => {\r\n        const regimenId= e.target.value\r\n        \r\n        if(regimenId!==\"\"){\r\n            \r\n            RegimenType(regimenId)\r\n            setShowRegimen(true)\r\n        }else{\r\n            setRegimenType([])\r\n            setShowRegimen(false)\r\n        }\r\n    }\r\n    const handleSelectedRegimenOther = e => {\r\n        const regimenId= e.target.value\r\n        //console.log(regimenId)\r\n        if(regimenId!==\"\"){\r\n            RegimenTypeOther(regimenId)\r\n        }else{\r\n            setRegimenTypeOther([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenOI = e => {\r\n        const regimenId= e.target.value\r\n        \r\n        if(regimenId!==\"\"){\r\n            RegimenTypeOI(regimenId)\r\n            if(regimenId==='15'){\r\n                setIptType(true)\r\n            }else{\r\n                setIptType(false)\r\n            }\r\n        }else{\r\n            setRegimenTypeOI([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenTB = e => {\r\n        const regimenId= e.target.value\r\n        \r\n        if(regimenId!==\"\"){\r\n            RegimenTypeTB(regimenId)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenCombination = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrug(regimenId)\r\n            //setShowRegimen(true)\r\n        }else{\r\n            setRegimenType([])\r\n            //setShowRegimen(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationOI = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugOI(regimenId)\r\n            //setShowRegimen(true)\r\n        }else{\r\n            setRegimenTypeOI([])\r\n            //setShowRegimen(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationTB = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugTB(regimenId)\r\n            //setShowRegimen(true)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n            //setShowRegimen(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationOthers = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugOther(regimenId)\r\n            //setShowRegimenOthers(true)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n            //setShowRegimenOthers(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleCheckBoxRegimen =e =>{\r\n        const originalCombination=regimenDrug\r\n        if(e.target.checked){\r\n            const newObjCombination = selectedCombinedRegimen.map(x => {\r\n                x['dispense']=\"\"\r\n                x['prescribed']=\"\"\r\n                x['dosage']=\"\"\r\n                //x['freqency']=\"\"\r\n                x['duration']=objValues.refillPeriod\r\n                x['regimenId']=regimenDrug[0].regimenId\r\n                x['regimenName']= regimenDrug[0].regimenName\r\n                return x;\r\n            })\r\n            setRegimenDrug(newObjCombination)\r\n            \r\n        }else{\r\n            RegimenDrug(objValues.regimenId)\r\n        } \r\n    } \r\n    // const handlePrescriptionErrorCheckBox =e =>{\r\n    //     if(e.target.checked){\r\n    //         setObjValues ({...objValues,  prescriptionError: true});\r\n    //     }else{\r\n    //         setObjValues ({...objValues,  prescriptionError: false});\r\n    //     }\r\n    // } \r\n    // const handleCheckBoxAdverseDrugReactions =e =>{\r\n    //     if(e.target.checked){\r\n    //         setShowAdr(true)\r\n    //         setObjValues ({...objValues,  adrScreened:true});\r\n    //     }else{\r\n    //         setShowAdr(false)\r\n    //         setObjValues ({...objValues,  adrScreened:false});\r\n    //     }\r\n    // } \r\n    const handlRefillPeriod = e =>{\r\n        let refillcount= \"\"\r\n        if(e.target.value===\"30\"){\r\n             refillcount= e.target.value -2\r\n        }else if(e.target.value===\"60\"){\r\n            refillcount= e.target.value -4\r\n        }else if(e.target.value===\"90\"){\r\n        refillcount= e.target.value - 6\r\n        }else if(e.target.value===\"120\"){\r\n            refillcount= e.target.value -8\r\n        }else if(e.target.value===\"160\"){\r\n            refillcount= e.target.value -10\r\n        }else if(e.target.value===\"180\"){\r\n            refillcount= e.target.value -12\r\n        }else{\r\n            refillcount= e.target.value\r\n        }\r\n        refillPeriodValue=refillcount\r\n        const visitDate = objValues.visitDate\r\n        const nextrefillDate= moment(visitDate, \"YYYY-MM-DD\").add(refillcount, 'days').toDate();\r\n        const nextDate =moment(nextrefillDate).format(\"YYYY-MM-DD\")\r\n        objValues.refillPeriod= e.target.value\r\n        setObjValues ({...objValues,  refillPeriod: e.target.value})\r\n        setObjValues ({...objValues,  nextAppointment: nextDate})\r\n\r\n        if(refillcount===\"90\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-3\")\r\n        }else if(refillcount===\"120\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-4\")\r\n        }else if(refillcount===\"150\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-5\")\r\n        }else if(refillcount===\"180\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-6\")\r\n        }else{\r\n            setShowmmdType(false)\r\n            setmmdType(\"\")\r\n        }\r\n\r\n    }\r\n    const handleCheckBox =e =>{\r\n        \r\n        if(e.target.checked){\r\n            console.log(e.target.value)\r\n            setObjValues ({...objValues,  [e.target.name] :true});\r\n        }\r\n    }\r\n    const handleFormChange = (index, event) => {\r\n        let data = [...regimenDrug];\r\n        data[index][event.target.name] = event.target.value;\r\n        data[index]['prescribed'] = data[index]['frequency'] * data[index]['duration']\r\n        setRegimenDrug (data);\r\n     }\r\n     const addDrug = e => {\r\n        setRegimenDrugList([...regimenDrugList, ...regimenDrug])            \r\n        \r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        regimenDrugList.splice(index, 1);\r\n        setRegimenDrugList([...regimenDrugList]);        \r\n    }; \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        setSaving(true);\r\n        objValues.adverseDrugReactions=selectedOptionAdr\r\n        objValues.personId=props.patientObj.id\r\n        objValues.extra['regimens']=regimenDrugList \r\n        objValues.mmdType=mmdType\r\n        //delete regimenList['name']\r\n        objValues.regimen=regimenDrugList\r\n\r\n        axios.put(`${baseUrl}hiv/art/pharmacy/${props.activeContent.obj.id}`,objValues,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n        .then(response => {\r\n            setSaving(false);\r\n            //props.PharmacyList();\r\n            //props.PatientCurrentObject();\r\n            toast.success(\"Pharmacy drug refill successful\", {position: toast.POSITION.BOTTOM_CENTER});           \r\n            props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"history\" })\r\n            setObjValues({\r\n                adherence: \"\",\r\n                adrScreened: \"\",\r\n                adverseDrugReactions: {},\r\n                dsdModel:\"\",\r\n                isDevolve:\"\",\r\n                extra: {},\r\n                facilityId: 2,\r\n                mmdType:null,\r\n                nextAppointment: null,\r\n                personId: props.patientObj.id,\r\n                refillPeriod:null,\r\n                prescriptionError: null,\r\n                regimenId: [],\r\n                regimenTypeId:\"\",\r\n                visitDate: null,\r\n                visitId: 0,\r\n                refill:\"\",\r\n                refillType:\"\",\r\n                switch:\"\",\r\n                substitute:\"\",\r\n                dsdModelType:\"\",\r\n                iptType:\"\"\r\n            });\r\n            setRegimenDrugList([])\r\n        })\r\n        .catch(error => {\r\n          \r\n            setSaving(false);\r\n            if(error.response && error.response.data){\r\n                let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                  toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                }else{\r\n                  toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n      \r\n            }else{\r\n                toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n            }\r\n                       \r\n        }); \r\n    }\r\n   \r\n    let TotalDispensed = regimenDrug.reduce(function(prev, current) {\r\n        return prev + +current.dispense\r\n      }, 0);\r\n      let TotalPrescribed = regimenDrug.reduce(function(prev, current) {\r\n        const duration = (current && current.frequency ? current.frequency : \"\") * current.duration\r\n        return prev + +duration\r\n      }, 0);\r\n\r\n  return (      \r\n      <div>\r\n \r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Pharmacy Drug Refill</h2> \r\n        </div>\r\n\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            <form >\r\n            <div className=\"row\">\r\n            <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label for=\"artDate\">Encounter Date <span style={{ color:\"red\"}}> *</span> </Label>\r\n                    <Input\r\n                        type=\"date\"\r\n                        name=\"visitDate\"\r\n                        id=\"visitDate\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.visitDate}\r\n                        min={enrollDate}\r\n                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={disabledField}\r\n                    />\r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n            {vital.bodyWeight!=='' && vital.height!=='' && (<>\r\n                <div className=\"row\">\r\n                <div className=\" mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                    <Label >Body Weight</Label>\r\n                    <InputGroup> \r\n                        <Input \r\n                            type=\"text\"\r\n                            name=\"bodyWeight\"\r\n                            id=\"bodyWeight\"\r\n                            min=\"3\"\r\n                            value={vital.bodyWeight}\r\n                            max=\"150\"\r\n                            disabled\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                        />\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            kg\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    \r\n                    </FormGroup>\r\n                </div>                                   \r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                    <Label >Height</Label>\r\n                    <InputGroup> \r\n                    <InputGroupText\r\n                            addonType=\"append\"\r\n                            \r\n                            style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            >\r\n                            cm\r\n                    </InputGroupText>\r\n                        <Input \r\n                            type=\"text\"\r\n                            name=\"height\"\r\n                            id=\"height\"\r\n                            disabled\r\n                            value={vital.height}\r\n                            min=\"48.26\"\r\n                            max=\"216.408\"\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                        />\r\n                            <InputGroupText\r\n                            addonType=\"append\"\r\n                            \r\n                            style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                            >\r\n                            {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                    {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                        <FormGroup>\r\n                        <Label> </Label>\r\n                        <InputGroup> \r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            BMI : {(vital.bodyWeight/((vital.height * vital.height)/100)).toFixed(2)}\r\n                        </InputGroupText>                   \r\n                        \r\n                        </InputGroup>                \r\n                        </FormGroup>\r\n                    )}\r\n                </div>\r\n                {/* <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Pregnant Status  : Yes</Label>                                    \r\n                    </FormGroup>\r\n                </div> */}\r\n                </div>\r\n            </>)}\r\n            <div className=\"row\">\r\n            <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                    <Label >Visit Type</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"visitType\"\r\n                        id=\"visitType\"\r\n                        value={objValues.visitType}\r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}  \r\n                        disabled={disabledField}               \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Initial Visit\">Initial Visit</option>\r\n                        <option value=\"Follow Up Visit\">Follow Up Visit </option>\r\n                    \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                    <Label >Refill</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refill\"\r\n                        id=\"refill\"\r\n                        value={objValues.refill}\r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}} \r\n                        disabled={disabledField}                \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Yes\">Yes</option>\r\n                        <option value=\"No\">No </option>\r\n                    \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label for=\"artDate\">Encounter Date <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                        type=\"date\"\r\n                        name=\"visitDate\"\r\n                        id=\"visitDate\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.visitDate}\r\n                        min={enrollDate!=='' ? enrollDate : \"\"}\r\n                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={disabledField}\r\n                    />\r\n                    </FormGroup>\r\n                </div>\r\n                {/* <div className=\"mt-4 col-md-2\" > \r\n                      \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"radio\"\r\n                            className=\"form-check-input\"                       \r\n                            name=\"switch\"\r\n                            id=\"switch\"\r\n                            value=\"switch\"\r\n                            onChange={handleCheckBox}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Switch\r\n                            </label>\r\n                        </div>\r\n                   \r\n                </div>\r\n                <div className=\"mt-4 col-md-2\">        \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"radio\"\r\n                            className=\"form-check-input\"                       \r\n                            name=\"switch\"\r\n                            id=\"switch\"\r\n                            value=\"Substitution\"\r\n                            onChange={handleCheckBox}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Substitution\r\n                            </label>\r\n                        </div>\r\n                </div> */}\r\n                 <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label >Substitution/Switch </Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refillType\"\r\n                        id=\"refillType\"\r\n                        value={objValues.refillType}\r\n                        disabled={disabledField}\r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        \r\n                        <option value=\"Switch\">Switch</option>\r\n                        <option value=\"Substitution\">Substitution </option>\r\n                        <option value=\"None\">None </option>\r\n                        \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label >Refill Period(days) <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refillPeriod\"\r\n                        id=\"refillPeriod\"\r\n                        value={objValues.refillPeriod}\r\n                        disabled={objValues.visitDate!==null? false : true}\r\n                        onChange={handlRefillPeriod}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}   \r\n                                     \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"30\">30 </option>\r\n                        <option value=\"60\">60 </option>\r\n                        <option value=\"90\">90 </option>\r\n                        <option value=\"120\">120 </option>\r\n                        <option value=\"150\">150 </option>\r\n                        <option value=\"180\">180 </option>\r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                \r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label for=\"artDate\"> Date of Next Appointment <span style={{ color:\"red\"}}> *</span> </Label>\r\n                    <Input\r\n                        type=\"date\"\r\n                        name=\"nextAppointment\"\r\n                        id=\"nextAppointment\"\r\n                        min={enrollDate}\r\n                        disabled={objValues.refillPeriod!==null? false : true}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.nextAppointment}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                    />\r\n                    </FormGroup>\r\n                </div>\r\n                {showmmdType &&(\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label >MMD Type</Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"mmdType\"\r\n                        id=\"mmdType\"\r\n                        disabled=\"true\"\r\n                        value={mmdType}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    />\r\n                     \r\n                    </FormGroup>\r\n                </div>\r\n                )}\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                    <Label >DSD Model</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"dsdModel\"\r\n                        id=\"dsdModel\"\r\n                        value={objValues.dsdModel}\r\n                        onChange={handleInputChange} \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}   \r\n                        disabled={disabledField}                \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Facility\">Facility </option>\r\n                        <option value=\"Community\">Community </option>\r\n                        \r\n                    </Input>\r\n                    \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                    <Label >DSD Model Type </Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"dsdModelType\"\r\n                        id=\"dsdModelType\"\r\n                        value={objValues.dsdModelType}\r\n                        onChange={handleInputChange} \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}  \r\n                        disabled={disabledField}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        {dsdModelType.map((value) => (\r\n                            <option key={value.code} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        \r\n                    </Input>\r\n                    \r\n                </FormGroup>\r\n            </div>\r\n            \r\n             {eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' && (<>\r\n                <h3>Ehanced Adherance Counseling</h3>\r\n                <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Viral Load Result</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"deliveryPoint\"\r\n                            id=\"deliveryPoint\"\r\n                            disabled\r\n                        />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Date of Last Viral Load</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"deliveryPoint\"\r\n                            id=\"deliveryPoint\"\r\n                            disabled\r\n                    />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                \r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >EAC Status</Label>\r\n                        <p>Second Session</p>\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Date of EAC</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"deliveryPoint\"\r\n                            id=\"deliveryPoint\"\r\n                            disabled\r\n                        />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                </div>\r\n            </>)}\r\n            <hr/>\r\n            <LabelSui as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>ART DRUGS</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >Select Regimen Line </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimen}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    {patientAge >15 &&  (\r\n                          <>\r\n                            {adultArtRegimenLine.map((value) => (\r\n                              <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                              </option>\r\n                            ))}\r\n                          </>\r\n                    )}\r\n                    {patientAge <=15 &&  (\r\n                        <>\r\n                        {childRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                            {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>\r\n                    )}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >Regimen </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombination}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {regimenType.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <LabelSui as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>OI DRUGS</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >OI's</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenOI}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {patientAge >15 &&  (\r\n                        <>  \r\n                        {iptEligibilty.IPTEligibility===true ? //Logic to check for TPT eligibility to filter TPT drugs\r\n                        (<>\r\n                            {oIRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            {oIRegimenLine.filter((x)=> x.id!==15).map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                       }             \r\n                        \r\n                      </>\r\n                    )}\r\n                    {patientAge <=15 &&  (\r\n                    <>\r\n                    {iptEligibilty.IPTEligibility===true ? //Logic to check for TPT eligibility to filter TPT drugs for children\r\n                        (<>\r\n                            {oIRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            {oIRegimenLine.filter((x)=> x.id!==15).map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                       }   \r\n                    </>\r\n                    )}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >Drugs</Label>                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationOI}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {regimenTypeOI.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n\r\n            { iptEligibilty.IPTEligibility===true  && ( //iptEligibilty check to display Visit type\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Visit Type</Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"iptType\"\r\n                    id=\"iptType\"\r\n                    value={objValues.iptType}\r\n                    onChange={handleInputChange} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    \r\n                    {iptType.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                            {value.display}\r\n                        </option>\r\n                    ))}\r\n                        \r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            )}\r\n               \r\n            <LabelSui as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>TB DRUG</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >TB Treatment </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenTB}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                        {patientAge >15 &&  (\r\n                        <>            \r\n                        {tbRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                      </>\r\n                    )}\r\n                    {patientAge <=15 &&  (\r\n                    <>\r\n                    {childrenTB.map((value) => (\r\n                        <option key={value.id} value={value.id}>\r\n                        {value.description}\r\n                        </option>\r\n                    ))}\r\n                    </>\r\n                    )}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                <Label >Drugs </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationTB} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {regimenTypeTB.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <LabelSui as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>OTHER DRUG</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Other Drugs </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenOther} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {otherDrugs.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Drug</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationOthers}   \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\" >Select </option>\r\n                    {regimenTypeOther.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            \r\n            {regimenDrug && regimenDrug.length >0 ? \r\n\r\n                (\r\n                    <>\r\n                        <Card>\r\n                        <CardBody>\r\n                        <h4>Drugs Information </h4>\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"devolvePatient\"\r\n                        id=\"devolvePatient\"\r\n                        onChange={handleCheckBoxRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        As no combination\r\n                        </label>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  >Regimen Name </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Frequency </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Duration </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Prescribed</div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Dispensed</div>\r\n                        </div>\r\n                        {regimenDrug.map((input, index) => (\r\n                            <>\r\n                                <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\"  >\r\n                                    <FormGroup>\r\n                                    <Label ><b>{input.name } {input.strength!==\"\" ? input.strength :\"\"}</b></Label>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        name=\"id\"\r\n                                        id=\"id\"\r\n                                        value={input.id}  \r\n                                        onChange={event => handleFormChange(index, event)}                                    \r\n                                        required\r\n                                        >                                       \r\n                                    </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"frequency\"\r\n                                        id=\"frequency\"\r\n                                        value={input.frequency}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                    >\r\n                                        <option value=''>Select</option>\r\n                                        <option value='2'>BD</option>\r\n                                        <option value='1'>OD</option>\r\n                                        <option value='4'>2BD</option>\r\n                                        <option value='6'>OD/BD</option>\r\n                                        <option value='8'>QDS</option>\r\n                                        <option value='10'>3ce/Week</option>\r\n                                    </Input>\r\n                                \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={input.duration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        //disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"prescribed\"\r\n                                        id=\"prescribed\"\r\n                                        value={(input.frequency && input.frequency!==\"\"? input.frequency * input.duration : 0)}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"dispense\"\r\n                                        id=\"dispense\"\r\n                                        value={input.dispense}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                \r\n                                    </FormGroup>\r\n                                </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        ))}\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  ></div>\r\n                           \r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalPrescribed}</b></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalDispensed}</b></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addDrug}  size='small' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                        </div>\r\n                           \r\n                        </div>\r\n                        </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                        <br/>\r\n                    </>                  \r\n                    )\r\n                    :\r\n                    \"\"\r\n                }\r\n                {regimenDrugList.length >0 \r\n                ?\r\n                    <List>\r\n                    <Table  striped responsive>\r\n                        <thead >\r\n                            <tr>\r\n                                <th>Regimen Drug</th>\r\n                                <th>Frequency</th>\r\n                                <th>Duration</th>\r\n                                <th>Quantity Prescribed</th>\r\n                                <th>Quantity Dispensed </th>\r\n                                \r\n                                <th ></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {regimenDrugList.map((regimenDrugObj, index) => (\r\n\r\n                        <DrugDispensedLists\r\n                            key={index}\r\n                            index={index}\r\n                            regimenDrugObj={regimenDrugObj}\r\n                            removeAttempt={removeAttempt}\r\n                        />\r\n                        ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    </List>\r\n                    :\r\n                    \"\"\r\n                }  \r\n            </div>                              \r\n            {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n                {regimenDrugList.length >0 && (\r\n                <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    hidden={disabledField}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={saving}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                    )}\r\n                </MatButton>\r\n                )}\r\n                </form>\r\n            </CardBody>\r\n        </Card> \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DrugDispensedLists({\r\n    regimenDrugObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n    function FrequencyLabel(count){\r\n        if(count==='1'){\r\n            return 'OD'\r\n        }else if(count==='2'){\r\n            return 'BD'\r\n        }else if(count==='4'){\r\n            return '2BD'\r\n        }else if(count==='6'){\r\n            return 'OD/BD'\r\n        }else if(count==='8'){\r\n            return 'QDS'\r\n        }else if(count==='10'){\r\n            return '3ce/Week'\r\n        }else{\r\n            return ''\r\n        }\r\n    }\r\n    return (\r\n            <tr>\r\n                <th>{regimenDrugObj.name ? regimenDrugObj.name : regimenDrugObj.regimenName} {regimenDrugObj.strength!==\"\"? regimenDrugObj.strength :\"\"}</th>\r\n                <th>{FrequencyLabel(regimenDrugObj.frequency)}</th>\r\n                <th>{regimenDrugObj.duration}</th>\r\n                <th>{regimenDrugObj.prescribed}</th>\r\n                <th>{regimenDrugObj.dispense}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Pharmacy;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ViewArtCommencement.js",["914","915","916","917","918","919","920","921","922","923","924"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label,InputGroup,\r\n        InputGroupText,\r\n\r\n        Input,\r\n      } from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Message} from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst ArtCommencement = (props) => {\r\n    const patientObj = props.patientObj;\r\n    //let history = useHistory();\r\n    //console.log(props.activeContent.id)\r\n    let gender=\"\"\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\r\n    const [splitButtonOpen, setSplitButtonOpen] = React.useState(false);\r\n    const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\r\n    const toggleSplit = () => setSplitButtonOpen(!splitButtonOpen);\r\n    const classes = useStyles()\r\n    const [clinicalStage, setClinicalStage] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [viraLoadStart, setViraLoadStart] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [tbStatus, setTbStatus] = useState([]);\r\n    const [regimenLine, setRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [pregnancyStatus, setpregnancyStatus] = useState([]);\r\n    const [functionalStatus, setFunctionalStatus] = useState([]);\r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n    const [disabledField, setDisabledField] = useState(false);\r\n    const [objValues, setObjValues] = useState({\r\n                                                personId:props.patientObj.id,\r\n                                                visitDate: \"\",\r\n                                                viralLoad: \"\",\r\n                                                whoStagingId:\"\",\r\n                                                clinicalStageId:\"\",\r\n                                                cd4: \"\",\r\n                                                cd4Percentage: \"\",\r\n                                                isCommencement: true,\r\n                                                functionalStatusId: \"\",\r\n                                                clinicalNote: \"\",\r\n                                                hivEnrollmentId: \"\",\r\n                                                vitalSignDto:\"\",\r\n                                                facilityId:1,\r\n                                                regimenTypeId: \"\",\r\n                                                regimenId:\"\",\r\n                                                viralLoadAtStartOfArt:\"\",\r\n                                                isViralLoadAtStartOfArt :null,\r\n                                                dateOfViralLoadAtStartOfArt: null,\r\n                                                cd4Count:\"\",\r\n                                                cd4SemiQuantitative:\"\",\r\n                                                cd4FlowCyteometry:\"\",\r\n                                                cd4Type:\"\"\r\n\r\n                                                });\r\n\r\n    const [vital, setVitalSignDto]= useState({\r\n                                                bodyWeight: \"\",\r\n                                                diastolic:\"\",\r\n                                                encounterDate: \"\",\r\n                                                facilityId: 1,\r\n                                                height: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                serviceTypeId: 1,\r\n                                                systolic:\"\",\r\n                                                pulse:\"\",\r\n                                                temperature:\"\",\r\n                                                respiratoryRate:\"\",\r\n                                                headCircumference:\"\",\r\n                                                surfaceArea:\"\",\r\n                                                muac:\"\"  \r\n                                            })\r\n      //Vital signs clinical decision support \r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                                                        bodyWeight: \"\",\r\n                                                                        diastolic: \"\",\r\n                                                                        height: \"\",\r\n                                                                        systolic: \"\",\r\n                                                                        pulse:\"\",\r\n                                                                        temperature:\"\",\r\n                                                                        respiratoryRate:\"\" \r\n                                                                    })\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m;\r\n                }\r\n                return age_now;\r\n    };\r\n    const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n\r\n    useEffect(() => {\r\n        FunctionalStatus();\r\n        WhoStaging();\r\n        TBStatus();\r\n        PreganacyStatus();\r\n        RegimenLine();\r\n        GetARTCommencement();\r\n        AdultRegimenLine();\r\n        ChildRegimenLineObj();\r\n        PatientCurrentObject();\r\n        if(props.activeContent && props.activeContent.actionType==='view'){\r\n            setDisabledField(true)\r\n        }\r\n        gender =props.patientObj.gender && props.patientObj.gender.display ? props.patientObj.gender.display : null\r\n    }, [props.activeContent.id]);\r\n    //GET  Patients\r\n    async function PatientCurrentObject() {\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setEnrollDate(response.data.enrollment.entryPointId===21 ? response.data.enrollment.dateConfirmedHiv : response.data.enrollment.dateOfRegistration)\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n    axios\r\n    .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n        const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14))\r\n        setAdultRegimenLine(artRegimen);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });        \r\n    }\r\n    //GET ChildRegimenLine \r\n    const ChildRegimenLineObj =()=>{\r\n    axios\r\n    .get(`${baseUrl}hiv/regimen/arv/children`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    const artRegimenChildren=response.data.filter((x)=> (x.id===3 || x.id===4 ))\r\n    setChildRegimenLine(artRegimenChildren);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });        \r\n    }\r\n    //Get ART Object\r\n    const GetARTCommencement =()=>{\r\n    axios\r\n    .get(`${baseUrl}hiv/art/commencement/${props.activeContent.id}`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => { \r\n    //console.log(response.data);     \r\n    setObjValues(response.data)\r\n    if(response.data.isViralLoadAtStartOfArt===true){\r\n    setViraLoadStart(true)\r\n    }\r\n    RegimenType(response.data.regimenTypeId)\r\n    setVitalSignDto(response.data.vitalSignDto)\r\n    if(response.data.clinicalStageId!==\"\"){\r\n    objValues.whoStagingId=response.data.clinicalStageId\r\n        setObjValues({...objValues, ['whoStagingId']:response.data.clinicalStageId})\r\n    }\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n    //Get list of WhoStaging\r\n    const WhoStaging =()=>{\r\n    axios\r\n    .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    //console.log(response.data);\r\n    setClinicalStage(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenLine =()=>{\r\n    axios\r\n    .get(`${baseUrl}hiv/regimen/types`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    //console.log(response.data);\r\n    setRegimenLine(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n    axios\r\n    .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    //console.log(response.data);\r\n    setRegimenType(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n    //Get list of PREGANACY_STATUS\r\n    const PreganacyStatus =()=>{\r\n    axios\r\n    .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    //console.log(response.data);\r\n    setpregnancyStatus(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n    ///GET LIST OF FUNCTIONAL%20_STATUS\r\n    async function FunctionalStatus() {\r\n    axios\r\n    .get(`${baseUrl}application-codesets/v2/FUNCTIONAL%20_STATUS`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n\r\n    setFunctionalStatus(response.data);\r\n    //setValues(response.data)\r\n    })\r\n    .catch((error) => {    \r\n    });        \r\n    }\r\n    // TB STATUS\r\n    const TBStatus =()=>{\r\n    axios\r\n    .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n    //console.log(response.data);\r\n    setTbStatus(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n\r\n    }\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name==='isViralLoadAtStartOfArt' && e.target.value!==\"\"){\r\n            if(e.target.value==='true'){\r\n                setViraLoadStart(true)\r\n                setObjValues ({...objValues,  [e.target.name]: true});\r\n            }else{\r\n                setObjValues({...objValues, [e.target.name]:false})\r\n                setViraLoadStart(false)\r\n            }\r\n        }\r\n        if(e.target.name==='cd4Percentage' && e.target.value!==\"\"){\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        }\r\n        if(e.target.name==='cd4' && e.target.value!==\"\"){\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        }\r\n            //This logic is to clear the value of field that is hidden\r\n        //  if(e.target.name==='cd4Count' && e.target.value===\"Semi-Quantitative\"){\r\n        //     objValues.cd4FlowCytometry=\"\"\r\n        //     setObjValues ({...objValues,  [\"cd4FlowCytometry\"]: \" \" });\r\n        //     setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n\r\n        // }else if(e.target.name==='cd4Count' && e.target.value===\"Flow Cyteometry\"){\r\n        //     objValues.cd4SemiQuantitative=\"\"\r\n        //     setObjValues ({...objValues,  [\"cd4SemiQuantitative\"]: \" \" });\r\n        //     setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        // }\r\n        if(e.target.name==='isViralLoadAtStartOfArt' && e.target.value===\"false\"){\r\n            objValues.viralLoadAtStartOfArt=\"\"\r\n            objValues.dateOfViralLoadAtStartOfArt=\"\"\r\n            setObjValues ({...objValues,  [\"viralLoadAtStartOfArt\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"dateOfViralLoadAtStartOfArt\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n\r\n        }\r\n    }\r\n    const handleInputChangeVitalSignDto = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})\r\n        setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n        // if(e.target.name==='muac'){\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value});\r\n        // } else{\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        // }\r\n    }\r\n    const handleSelecteRegimen = e => { \r\n\r\n        let regimenID=  e.target.value\r\n            //regimenTypeId regimenId\r\n        setObjValues ({...objValues, regimenTypeId:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight =(e)=>{\r\n        if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight =(e)=>{\r\n        if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n        const message =\"Body weight must not be greater than 150 and less than 3\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckSystolic =(e)=>{\r\n        if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n        const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckDiastolic =(e)=>{\r\n        if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n        const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckPulse =(e)=>{\r\n        if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n        const message =\"Pulse must not be greater than 120 and less than 40\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckRespiratoryRate =(e)=>{\r\n        if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n        const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckTemperature =(e)=>{\r\n        if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n        const message =\"Temperature must not be greater than 47 and less than 35\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n        }\r\n    }\r\n    const handleInputChangeVitalStart =(e)=>{\r\n        if(e.target.value===\"YES\" ){\r\n            setViraLoadStart(true)\r\n            setObjValues({...objValues, viralLoad:e.target.value})\r\n        }else{\r\n            setObjValues({...objValues, viralLoad:e.target.value})\r\n            setViraLoadStart(false)\r\n        }\r\n    }\r\n\r\n    //FORM VALIDATION\r\n    const validate = () => {\r\n        temp.visitDate = objValues.visitDate ? \"\" : \"This field is required\"\r\n        temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\"\r\n        temp.regimenTypeId = objValues.regimenTypeId ? \"\" : \"This field is required\"\r\n        temp.whoStagingId = objValues.whoStagingId ? \"\" : \"This field is required\"\r\n        temp.functionalStatusId = objValues.functionalStatusId ? \"\" : \"This field is required\"\r\n        //temp.tbStatusId = objValues.tbStatusId ? \"\" : \"This field is required\"\r\n        temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n        temp.height = vital.height ? \"\" : \"This field is required\"\r\n        //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n        //temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {                  \r\n        e.preventDefault(); \r\n        if(validate()){                    \r\n        objValues.personId = props.patientObj.id\r\n        vital.encounterDate = objValues.visitDate\r\n        vital.personId=props.patientObj.id\r\n        objValues.vitalSignDto= vital\r\n        objValues.hivEnrollmentId= props.patientObj.enrollmentId\r\n        objValues.clinicalStageId = objValues.whoStagingId \r\n        //Logic for cd4 value\r\n        if(objValues.cd4Type===\"Flow Cyteometry\"){\r\n            objValues.cd4 = objValues.cd4Count\r\n        }\r\n        //Getting pragnancy value from the ID \r\n        if(objValues.pregnancyStatus!==\"\"){\r\n            const pregnancyDisplay=pregnancyStatus.find((x)=> x.id===objValues.pregnancyStatus)\r\n            objValues.pregnancyStatus = pregnancyDisplay.display\r\n        }else{\r\n            objValues.pregnancyStatus = objValues.pregnancyStatus\r\n\r\n        } \r\n        setSaving(true);\r\n        axios.put(`${baseUrl}hiv/art/commencement/${props.activeContent.id}`,objValues,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n        \r\n        )\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Record updated successful\");\r\n                props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage);\r\n                }\r\n                else{\r\n                toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n            });\r\n        }\r\n        \r\n    }\r\n    function BmiCal (bmi){\r\n        if(bmi<18.5){\r\n            return (\r\n            <Message        \r\n                size='mini'\r\n                color='brown'\r\n                content='Underweight'\r\n            />\r\n            )      \r\n        }else if(bmi >=18.5 && bmi<=24.9){\r\n            <Message        \r\n                size='mini'\r\n                color='olive'\r\n                content='Well nourished'\r\n            />\r\n        }\r\n        else if( bmi>25){\r\n            <Message        \r\n                size='mini'\r\n                color='blue'\r\n                content='Overweight/Obese'\r\n            />\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n  return (      \r\n      <div >\r\n                  \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <h2>ART Commencement</h2>\r\n                    </div>\r\n                    <div className=\"col-md-6\"></div>\r\n                    <br/>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"artDate\">ART Start Date <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"visitDate\"\r\n                                id=\"visitDate\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.visitDate}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                                {errors.visitDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.visitDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"cd4\">CD4 at start of ART </Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"cd4\"\r\n                                id=\"cd4\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.cd4}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType==='update' ? false :true}\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                     */}\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"cd4Percentage\">CD4%</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"cd4Percentage\"\r\n                            id=\"cd4Percentage\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.cd4Percentage}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            disabled={disabledField}\r\n                        />\r\n                        \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group  col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>CD4 Count (Type)</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"cd4Type\"\r\n                                        id=\"cd4Type\"\r\n                                        value={objValues.cd4Type}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Semi-Quantitative\">Semi-Quantitative</option>\r\n                                        <option value=\"Flow Cyteometry\">Flow Cyteometry</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                        </div>\r\n                        {objValues.cd4Type ==='Semi-Quantitative' && (\r\n                        <div className=\"form-group  col-md-6\">\r\n                            <FormGroup>\r\n                                <Label>CD4 Count Value(Semi-Quantitative)</Label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    name=\"cd4Count\"\r\n                                    id=\"cd4Count\"\r\n                                    value={objValues.cd4Count}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"<200\">{\"<200\"}</option>\r\n                                    <option value=\">=200\">{\">=200\"}</option>\r\n                                    \r\n                                </select>\r\n                                \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.cd4Type ==='Flow Cyteometry' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">CD4 Count Value (Flow Cyteometry)</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                min={1}\r\n                                name=\"cd4Count\"\r\n                                id=\"cd4Count\"\r\n                                value={objValues.cd4Count}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                                \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Original Regimen Line <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <Input\r\n                                type=\"select\"\r\n                                name=\"regimenTypeId\"\r\n                                id=\"regimenTypeId\"\r\n                                value={objValues.regimenTypeId}\r\n                                onChange={handleSelecteRegimen}\r\n                                required\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\"> Select</option>\r\n                                    {patientAge && patientAge >15 &&  (\r\n                                    <>\r\n                                        {adultRegimenLine.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                        ))}\r\n                                    </>\r\n                                    )}\r\n                                    {patientAge && patientAge <=15 &&  (\r\n                                    <>\r\n                                        {childRegimenLine.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                        ))}\r\n                                    </>\r\n                                    )}\r\n                            </Input>\r\n                            {errors.regimenTypeId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.regimenTypeId}</span>\r\n                                ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>                    \r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Original Regimen <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <Input\r\n                                type=\"select\"\r\n                                name=\"regimenId\"\r\n                                id=\"regimenId\"\r\n                                value={objValues.regimenId}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\"> Select</option>\r\n            \r\n                                    {regimenType.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.regimenId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.regimenId}</span>\r\n                                ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                    \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Viral Load at Start of ART </Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"isViralLoadAtStartOfArt\"\r\n                            id=\"isViralLoadAtStartOfArt\"\r\n                            onChange={handleInputChange}                                            \r\n                            value={objValues.isViralLoadAtStartOfArt}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            disabled={disabledField}\r\n                            \r\n                        >\r\n                            <option value=\"\"> Select</option>\r\n                            <option value=\"true\"> YES</option>\r\n                            <option value=\"false\"> NO</option>\r\n                        </Input>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                        {viraLoadStart && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Viral Load at Start of ART Result</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name=\"viralLoadAtStartOfArt\"\r\n                                id=\"viralLoadAtStartOfArt\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.viralLoadAtStartOfArt}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                \r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Date of Viral Load at Start of ART</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfViralLoadAtStartOfArt\"\r\n                                id=\"dateOfViralLoadAtStartOfArt\"\r\n                               \r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateOfViralLoadAtStartOfArt}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >WHO Staging <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"whoStagingId\"\r\n                                id=\"whoStagingId\"\r\n                                value={objValues.whoStagingId}\r\n                                onChange={handleInputChange}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\"> Select</option>\r\n            \r\n                                    {clinicalStage.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.whoStagingId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.whoStagingId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Functional Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"functionalStatusId\"\r\n                                id=\"functionalStatusId\"\r\n                                value={objValues.functionalStatusId}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                                >\r\n                                    <option value=\"\"> Select</option>\r\n            \r\n                                    {functionalStatus.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.functionalStatusId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.functionalStatusId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >TB Status</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"tbStatusId\"\r\n                                id=\"tbStatusId\"\r\n                                value={objValues.tbStatusId}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                    <option value=\"\"> Select</option>\r\n            \r\n                                    {tbStatus.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.tbStatusId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div> */}\r\n                        {(props.patientObj.sex===\"Female\" || props.patientObj.sex===\"FEMALE\" || props.patientObj.sex===\"female\")  ? (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Pregnancy Status</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"pregnancyStatus\"\r\n                                id=\"pregnancyStatus\"\r\n                                \r\n                                onChange={handleInputChange}\r\n                                value={objValues.pregnancyStatus}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n        \r\n                                {pregnancyStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        {props.patientObj.enrollment && props.patientObj.enrollment.pregnancyStatusId==='\"Pregnant\"' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >LMP</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"LMPDate\"\r\n                                id=\"LMPDate\"\r\n                                onChange={handleInputChange}\r\n                                value={props.patientObj.enrollment.dateOfLpm}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Pulse</Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Respiratory Rate </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Temperature </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Body Weight <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <Label >Height <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                                isOpen={dropdownOpen}\r\n                                toggle={toggleDropDown}\r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                               \r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                                <InputGroupText\r\n                                addonType=\"append\"\r\n                                isOpen={dropdownOpen}\r\n                                toggle={toggleDropDown}\r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                        {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                            <FormGroup>\r\n                            <Label > {\" \"}</Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    {vital.bodyWeight!=='' && vital.height!=='' &&(\r\n                      <div className=\"form-group mb-3 mt-2 col-md-12\">\r\n                            {\r\n                              BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\r\n                            }\r\n                      </div>\r\n                     )}\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-8\">\r\n                        <FormGroup>\r\n                        <Label >Blood Pressure</Label>\r\n                        <InputGroup>\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                systolic(mmHg)\r\n                        </InputGroupText> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"systolic\"\r\n                                id=\"systolic\"\r\n                                min=\"90\"\r\n                                max=\"240\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.systolic}\r\n                                onKeyUp={handleInputValueCheckSystolic}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            diastolic(mmHg)\r\n                            </InputGroupText>\r\n                                <Input \r\n                                type=\"number\"\r\n                                name=\"diastolic\"\r\n                                id=\"diastolic\"\r\n                                min={0}\r\n                                max={140}\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.diastolic}\r\n                                onKeyUp={handleInputValueCheckDiastolic} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                                />\r\n                            \r\n                            \r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.systolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.systolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.systolic}</span>\r\n                        ) : \"\" }  \r\n                        {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.diastolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.diastolic}</span>\r\n                        ) : \"\" }          \r\n                        </FormGroup>\r\n                    </div>\r\n\r\n                    </div>\r\n                    {patientAge && patientAge<14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Head Circumference </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Surface Area </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >MUAC</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        value={vital.muac} \r\n                                        disabled={disabledField}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n                                    <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        cm\r\n                                    </InputGroupText>\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                    {gender===\"Female\" || gender===\"Transgebder(Female)\"? (\r\n                        <>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Pregnancy Status</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"pregnantStatus\"\r\n                                id=\"pregnantStatus\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.pregnantStatus}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                disabled={disabledField}\r\n\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n        \r\n                                {pregnancyStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >LMP</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"LMPDate\"\r\n                                id=\"LMPDate\"\r\n                                onChange={handleInputChange}\r\n                                value={values.LMPDate}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={disabledField}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        </>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                        <FormGroup>\r\n                        <Label >Clinical Notes</Label>\r\n                        <Input\r\n                            type=\"textarea\"\r\n                            name=\"clinicalNote\"\r\n                            rows=\"3\" cols=\"50\"\r\n                            id=\"clinicalNote\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.clinicalNote}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            disabled={disabledField}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                        {props.activeContent.actionType==='update' ? (\r\n                            <>\r\n                            <MatButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={handleSubmit}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            >\r\n                                {!saving ? (\r\n                                <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                ) : (\r\n                                <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                )}\r\n                            </MatButton>\r\n{/*                         \r\n                            <MatButton\r\n                                variant=\"contained\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon style={{color:'#fff'}}/>}  \r\n                                style={{backgroundColor:'#992E62'}}                              \r\n                            >\r\n                                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                            </MatButton> */}\r\n                            </>\r\n                            ):\"\"}\r\n                \r\n                </form>\r\n                </CardBody>\r\n            </Card> \r\n                    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtCommencement;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\MentalHealthScreening\\ViewMhs.js",["925","926","927"],"import React, {useState, useEffect} from 'react';\r\nimport {  Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ViewMentalHealthScreening = (props) => {\r\n    const patientObj = props.patientObj;\r\n    //let history = useHistory();\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles()\r\n    const [objValues, setObjValues] = useState({mhs1:\"\",mhs2:\"\" ,mhs3:\"\" ,mhs4:\"\",mhs5:\"\", dateOfObservation:\"\"});\r\n    const [saving, setSaving] = useState(false);\r\n    const [referrer, setReferrer] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [observation, setObservation]=useState({\r\n                                                    data: {},\r\n                                                    dateOfObservation: \"\",\r\n                                                    facilityId: null,\r\n                                                    personId: 0,\r\n                                                    type: \"Mental health\",\r\n                                                    visitId: null\r\n                                                })\r\n    useEffect(() => {\r\n        GetMHSDetail();\r\n        GetPatientDTOObj();\r\n    }, [props.activeContent.id]);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               //setEnrollDate (patientDTO.dateOfRegistration)\r\n               setEnrollDate(patientDTO.entryPointId===21 ? patientDTO.dateConfirmedHiv : patientDTO.dateOfRegistration)\r\n               //\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n          \r\n    }                                            \r\n    //Get Mental Health Object\r\n    const GetMHSDetail =()=>{\r\n    axios\r\n       .get(`${baseUrl}observation/person/${props.patientObj.id}`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n       )\r\n       .then((response) => {            \r\n            const mentalObj= response.data.find((x)=> x.type==='Mental health') \r\n            console.log(mentalObj)\r\n            setObjValues({...mentalObj.data})\r\n            setObservation(mentalObj)\r\n            //objValues.dateOfObservation=observation.dateOfObservation\r\n              //setViralLoad(LabObject)\r\n       })\r\n       .catch((error) => {\r\n       //console.log(error);\r\n       });\r\n   \r\n    }\r\n    const handleInputChangeKP = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault(); \r\n          observation.dateOfObservation= moment(new Date()).format(\"YYYY-MM-DD\")       \r\n          observation.personId =patientObj.id\r\n          observation.data=objValues\r\n          setSaving(true);\r\n          axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.patientObj.mentalHealth=true\r\n                  toast.success(\"Mental health screening save successful.\\nPlease refer patient to psychiatric hospital\");\r\n                  if(objValues.mhs1===\"YES\" || objValues.mhs2===\"YES\" || objValues.mhs4===\"YES\" || objValues.mhs4===\"YES\" || objValues.mhs5===\"YES\" ){\r\n                    setReferrer(true)\r\n                  }else{\r\n                    setReferrer(false)\r\n                  }\r\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                  //history.push(\"/\")\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage);\r\n              });\r\n          \r\n    }\r\n\r\n    \r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <h2>Mental Health Screening Form -{props.activeContent.actionType ==='update' ? \"Update \" : \"View\" }</h2>\r\n                    </div>\r\n                    {/* <div className=\"col-md-6\">\r\n                        <Button icon color='teal' className='float-end'><Icon name='eye' /> Previous History</Button>\r\n                    </div> */}\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    {referrer && (\r\n                        <>\r\n                        <Alert\r\n                        variant=\"warning\"\r\n                        className=\"alert-dismissible solid fade show\"\r\n                        >\r\n                        <p>Please refer patient to psychiatric hospital</p>\r\n                        </Alert>\r\n                        \r\n                        </>\r\n                    )}\r\n                    <div className=\"m-3 col-md-12\"></div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation !==\"\" && observation.dateOfObservation!==null ? observation.dateOfObservation : objValues.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChangeKP}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you ever been depressed for weeks at a time, lost interest, or pleasure in most activities, had trouble concentrating and making decisions, or thought about killing yourself ? <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs1\"\r\n                                id=\"mhs1\"\r\n                                value={objValues.mhs1}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you ever had spells or attacks when you suddenly felt anxious, frightened, uneasy to the extent that you began sweating, your heart began to beat rapidly, you were shaking or trembling, your stomach was upset, you felt dizzy or unsteady, as if you would faint ? <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs2\"\r\n                                id=\"mhs2\"\r\n                                value={objValues.mhs2}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Have you ever had nightmares or flashbacks because of being involved in some traumatic/terrible event? For example, domestic violence, rape, police raid or arrest, blackmail.<sup style={{ color:\"red\"}}> *</sup></Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"mhs3\"\r\n                            id=\"mhs3\"\r\n                            value={objValues.mhs3}\r\n                            onChange={handleInputChangeKP}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                            >\r\n                            <option value=\"\"> Select</option>\r\n                            <option value=\"YES\"> YES</option>\r\n                            <option value=\"NO\"> NO</option>\r\n                        </Input>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you used drugs other than those required for medical reasons? For example, cannabis, cocaine, stimulants, or narcotics (e.g., heroin). May equally ask about the abuse of alcohol and other local drugs or psychoactive substances. <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs4\"\r\n                                id=\"mhs4\"\r\n                                value={objValues.mhs4}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >In recent time, has any one punched, slapped, kicked, bit, or caused you any type of physical or sexual harm ? <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs5\"\r\n                                id=\"mhs5\"\r\n                                value={objValues.mhs5}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled={props.activeContent.actionType !=='update' ? true : false}\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>                        \r\n                    </div>\r\n                    \r\n                    {props.activeContent.actionType ==='update' ?\r\n                        (\r\n                   \r\n                            <MatButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            startIcon={<SaveIcon />}\r\n                            disabled={(objValues.mhs1===\"\" || objValues.mhs2===\"\" || objValues.mhs4===\"\" || objValues.mhs4===\"\" || objValues.mhs5===\"\" || objValues.dateOfObservation===\"\") && !saving ? true : false}\r\n                            onClick={handleSubmit}\r\n                            \r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                            )}\r\n                            </MatButton>\r\n                            )\r\n                        :\"\"\r\n                        }\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default ViewMentalHealthScreening;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\LabOrderResultHistory.js",["928","929"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react';\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst LabHistory = (props) => {    \r\n    \r\n  const [open, setOpen] = React.useState(false)\r\n  const [saving, setSaving] = useState(false)\r\n  const [record, setRecord] = useState(null)\r\n   const toggle = () => setOpen(!open);\r\n\r\n    useEffect(() => {\r\n        //CheckLabModule();\r\n        //LabOrders()\r\n      }, [props.orderList]);\r\n\r\n      const onClickHome = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'lab-view-order-result', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n\r\n     const LoadDeletePage = (row) =>{  \r\n      setSaving(true)  \r\n      axios.delete(`${baseUrl}laboratory/rde-orders/tests/${row.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              toast.success(\"Record deleted successfully\");\r\n              props.LabOrders()\r\n              toggle()\r\n              setSaving(false)\r\n          })\r\n          .catch((error) => {\r\n              if(error.response && error.response.data){\r\n                  let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                  toast.error(errorMessage);\r\n                }\r\n                else{\r\n                  toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n          }); \r\n   }\r\n   const LoadModal =(row)=>{\r\n    toggle()\r\n    setRecord(row)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n            <br/>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n              <MaterialTable\r\n              icons={tableIcons}\r\n                title=\"Laboratory Order History\"\r\n                columns={[\r\n                // { title: \" ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Test Group\",\r\n                    field: \"testGroup\",\r\n                  },\r\n                  { title: \"Test Name\", field: \"testName\", filtering: false },\r\n                  { title: \"Lab Number\", field: \"labNumber\", filtering: false },\r\n                  { title: \"Sample Number\", field: \"sampleNumber\", filtering: false },\r\n                  { title: \"Date Sample Collected\", field: \"sampleCollectionDate\", filtering: false },\r\n                  // { title: \"Date Assayed\", field: \"dateAssayed\", filtering: false },\r\n                  { title: \"Date Result Received\", field: \"dateResultReceived\", filtering: false },\r\n                  // { title: \"VL Indication\", field: \"viralLoadIndication\", filtering: false },\r\n                  { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n                ]}\r\n                //isLoading={loading}\r\n                data={ props.orderList.map((row) => ({\r\n                    //Id: manager.id,\r\n                    testGroup:row.labTestGroupName,\r\n                    testName: row.labTestName,\r\n                    labNumber: row.labNumber,\r\n                    sampleNumber: row.sampleNumber,\r\n                    sampleCollectionDate: row.sampleCollectionDate,    \r\n                    //dateAssayed: row.dateAssayed,\r\n                    dateResultReceived: row.dateResultReceived, \r\n                    //viralLoadIndication: row.viralLoadIndicationName,\r\n                    Action: \r\n                   \r\n                    <div>\r\n                              <Menu.Menu position='right'  >\r\n                              <Menu.Item >\r\n                                  <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                  <Dropdown item text='Action'>\r\n\r\n                                  <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'view')}><Icon name='eye' />View</Dropdown.Item>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                                      <Dropdown.Item  onClick={()=>LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                              </Dropdown>\r\n                                  </Button>\r\n                              </Menu.Item>\r\n                              </Menu.Menu>\r\n                          </div>\r\n                    }))}\r\n              \r\n                          options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n              />\r\n              <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Notification!\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4>Are you Sure you want to delete  - <b>{record && record.sampleNumber}</b></h4>\r\n                        \r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n                    <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n                    \r\n                </Modal.Footer>\r\n              </Modal> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\ReproductiveIntentions.js",["930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\n    InputGroupText,\n\n} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport {  Modal } from \"react-bootstrap\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst ReproductiveIntentions = (props) => {\n\n    // const [errors, setErrors] = useState({});\n    // let temp = { ...errors } \n    useEffect(() => { \n       \n    }, []);  \n    \n    const handleReproductive =e =>{\n        props.setReproductive({...props.reproductive, [e.target.name]: e.target.value})\n        \n    }\n\n\n        \nreturn (\n        <>  \n        \n            <Card >\n                <CardBody>   \n                <h2 style={{color:'#000'}}>Reproductive Intentions</h2>\n                <br/>\n                    <form >\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Have you been screened for cervical cancer in the last one year?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"cervicalCancer\"\n                                        id=\"cervicalCancer\"\n                                        onChange={handleReproductive} \n                                        value={props.reproductive.cervicalCancer} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                   \n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Do you intend to get pregnant within the next one year?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"pregnantWithinNextYear\"\n                                        id=\"pregnantWithinNextYear\"\n                                        onChange={handleReproductive} \n                                        value={props.reproductive.pregnantWithinNextYear} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Are you currently using a contraceptive?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"contraceptive\"\n                                        id=\"contraceptive\"\n                                        onChange={handleReproductive} \n                                        value={props.reproductive.contraceptive} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                    </div>\n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default ReproductiveIntentions","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Eligibilty.js",["948","949","950","951"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, } from \"@material-ui/core\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        },\n        \n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst Eligibility = (props) => {\n    const classes = useStyles();\n    const [clientType, setClientType]= useState([])\n    const [pregnancyStatus, setPregnancyStatus]= useState([])\n    const [who, setWho]= useState([])\n    const [artStatus, setArtStatus]= useState([])\n    const handleEligibility =e =>{\n        props.setEligibility({...props.eligibility, [e.target.name]: e.target.value})        \n    }\n    useEffect(() => {\n        CHRONIC_CARE_CLIENT_TYPE();\n        PREGNANCY_STATUS();\n        ART_STATUS();\n        WHO_STAGING_CRITERIA();\n    }, []);\n    const CHRONIC_CARE_CLIENT_TYPE =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/CHRONIC_CARE_CLIENT_TYPE`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setClientType(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const ART_STATUS =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/ART_STATUS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setArtStatus(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const PREGNANCY_STATUS =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setPregnancyStatus(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const WHO_STAGING_CRITERIA =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/WHO_STAGING_CRITERIA`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setWho(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m;\n                }\n                return age_now;\n      };\n      const patientAge=calculate_age(moment(props.patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\n\n    return (\n        <>  \n        \n            <Card className={classes.root}>\n                <CardBody>   \n                <h2 style={{color:'#000'}}>Eligibility Assessment</h2>\n                <br/>\n                    <form >\n     \n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-8\"></div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Type Of Client</Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"typeOfClient\"\n                                id=\"typeOfClient\"\n                                onChange={handleEligibility} \n                                value={props.eligibility.typeOfClient} \n                            >\n                            <option value=\"\">Select</option>\n                            {clientType.map((value) => (\n                                <option key={value.id} value={value.display}>\n                                    {value.display}\n                                </option>\n                            ))}\n                            \n                            </Input>\n                        </InputGroup>                    \n                        </FormGroup>\n                    </div>\n                    { patientAge>=10 && (props.patientObj.sex==='Female') && (\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Pregnancy/Breastfeeding Status</Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"pregnantStatus\"\n                                id=\"pregnantStatus\"\n                                onChange={handleEligibility} \n                                value={props.eligibility.pregnantStatus} \n                            >\n                            <option value=\"\">Select</option>\n                            {pregnancyStatus.map((value) => (\n                                <option key={value.id} value={value.display}>\n                                    {value.display}\n                                </option>\n                            ))}\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div> \n                    )}\n                    <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >ART Status</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"select\"\n                                    name=\"artStatus\"\n                                    id=\"artStatus\"\n                                    onChange={handleEligibility} \n                                    value={props.eligibility.artStatus}  \n                                >\n                                <option value=\"\">Select</option>\n                                {artStatus.map((value) => (\n                                    <option key={value.id} value={value.display}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                                </Input>\n\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>\n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Current Clinical Status(WHO Statging)</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"select\"\n                                    name=\"whoStaging\"\n                                    id=\"whoStaging\"\n                                    onChange={handleEligibility} \n                                    value={props.eligibility.whoStaging}  \n                                >\n                                <option value=\"\">Select</option>\n                                {who.map((value) => (\n                                    <option key={value.id} value={value.display}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                                </Input>\n\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>  \n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Last CD4 Result</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"text\"\n                                    name=\"lastCd4Result\"\n                                    id=\"lastCd4Result\"\n                                    value={props.eligibility.lastCd4Result} \n                                />\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>\n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Last CD4 Result Date</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"date\"\n                                    name=\"lastCd4ResultDate\"\n                                    id=\"lastCd4ResultDate\"\n                                    value={props.eligibility.lastCd4ResultDate} \n                                    min={props.encounterDate}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                />\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>\n                     \n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Last Viral Load Result</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"text\"\n                                    name=\"lastViralLoadResult\"\n                                    id=\"lastViralLoadResult\"\n                                    value={props.eligibility.lastViralLoadResult}  \n                                />\n                            </InputGroup>\n                            </FormGroup>\n                     </div>\n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Last Viral Load Result Date</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"date\"\n                                    name=\"lastViralLoadResultDate\"\n                                    id=\"lastViralLoadResultDate\"\n                                    value={props.eligibility.lastViralLoadResultDate} \n                                    min={props.encounterDate}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                />\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>\n                     <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Eligible for Viral Load</Label>\n                            <InputGroup> \n                                <Input \n                                type=\"select\"\n                                name=\"eligibleForViralLoad\"\n                                id=\"eligibleForViralLoad\"\n                                onChange={handleEligibility} \n                                value={props.eligibility.eligibleForViralLoad} \n                                >\n                                <option value=\"\">Select</option>\n                                <option value=\"Yes\">Yes</option>\n                                <option value=\"No\">No</option>\n                                </Input>\n                            </InputGroup>\n                        \n                            </FormGroup>\n                     </div>\n                     </div>\n                    <br/>\n                    \n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default Eligibility","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\GenderBase.js",["952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\n    InputGroupText,\n\n} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport {  Modal } from \"react-bootstrap\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst GenderBase = (props) => {\n    \n    const handleGenderBase =e =>{\n        props.setGenderBase({...props.genderBase, [e.target.name]: e.target.value})        \n    }\n\n        \nreturn (\n        <>  \n        \n            <Card >\n                <CardBody>   \n                <h2 style={{color:'#000'}}>Gender Base Violence Screening</h2>\n                <br/>\n                    <form >\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \n                    </div>\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Has your partner ever hit, kicked, slapped, or otherwise physically hurt you</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"partnerEverPhysically\"\n                                        id=\"partnerEverPhysically\"\n                                        onChange={handleGenderBase} \n                                        value={props.genderBase.partnerEverPhysically} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                   \n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Have you been beaten, sexually coerced, raped or threathened by your partner or anyone else</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"haveBeenBeaten\"\n                                        id=\"haveBeenBeaten\"\n                                        onChange={handleGenderBase} \n                                        value={props.genderBase.haveBeenBeaten} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                   \n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Does Your partner/family deny you food, shelter, freedom of movement livelihood or finance to access health care</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"partnerLivelihood\"\n                                        id=\"partnerLivelihood\"\n                                        onChange={handleGenderBase} \n                                        value={props.genderBase.partnerLivelihood} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                    </div>\n                    <br/>\n                    \n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default GenderBase","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\NutritionalStatus.js",["971","972","973","974","975","976","977","978","979","980","981"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\n    InputGroupText,\n\n} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport {  Message} from 'semantic-ui-react'\nimport DualListBox from \"react-dual-listbox\";\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const [errors, setErrors] = useState({});\n    const [selectedOptions1,setSelectedOptions1] = useState([]);\n    const [selectedOptions2,setSelectedOptions2] = useState([]);\n    const [nutrition,setNutrition] = useState([]);\n    const [nutritionSupport,setNutritionSupport] = useState([]);\n    useEffect(() => {\n        NUTRITION_EDUCATION_COUNSELLED();\n        NUTRITION_SUPPORT()\n    }, []);\n    //Get list of NUTRITION_EDUCATION_COUNSELLED\n    const NUTRITION_EDUCATION_COUNSELLED =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/NUTRITION_EDUCATION_COUNSELLED`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n\n                setNutrition(Object.entries(response.data).map(([key, value]) => ({\n                    label: value.display,\n                    value: value.display,\n                })));\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    //Get list of NUTRITION_SUPPORT\n    const NUTRITION_SUPPORT =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/NUTRITION_SUPPORT`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n\n                setNutritionSupport(Object.entries(response.data).map(([key, value]) => ({\n                    label: value.display,\n                    value: value.display,\n                })));\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const [vital, setVitalSignDto]= useState({\n        bodyWeight: \"\",\n        height: \"\",\n    })\n    //Vital signs clinical decision support \n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\n                                bodyWeight: \"\",\n                                height: \"\",\n\n                            })\n    const handleInputChangeVitalSignDto = e => {\n        setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\n    }\n    //to check the input value for clinical decision \n    const handleInputValueCheckHeight =(e)=>{\n        if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\n        }else{\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\n        }\n        BmiCal()\n    }\n    const handleInputValueCheckBodyWeight =(e)=>{\n        if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \n        const message =\"Body weight must not be greater than 150 and less than 3\"\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\n        }else{\n\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\n        }\n        BmiCal()\n    }\n \n    const onSelectedOption = (selectedValues) => {\n        //setWho({...who, stage2ValueOption: selectedValues})\n        setSelectedOptions1(selectedValues);\n    }; \n    const onSelectedOption2 = (selectedValues) => {\n        //setWho({...who, stage2ValueOption: selectedValues})\n        setSelectedOptions2(selectedValues);\n    }; \n\n    function BmiCal (){\n        \n        const bmi = ((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\n        if(bmi < 18.5){\n            return (\n            <Message        \n                size='mini'\n                color='brown'\n                content='Underweight'\n            />\n            )      \n        }else if( bmi >= 25){\n            //console.log(\"test\")\n            <Message        \n                size='mini'\n                color='blue'\n                content='Overweight/Obese'\n            />\n        }else if((bmi > 18.4 && bmi <=24.9)){\n            <Message        \n                size='mini'\n                color='olive'\n                content='Well nourished'\n            />\n        }\n        \n    }\n    const options1 = [\n        { value: 'Nutrition Education', label: 'Nutrition Education' },\n        { value: 'Nutrition Counseling', label: 'Nutrition Counseling' },\n        { value: 'Client agreed to action plan', label: 'Client agreed to action plan' },\n        \n    ];\n    const options2 = [\n        { value: 'Nutrition Supplement', label: 'Nutrition Supplement' },\n        { value: 'Referred to Other clinical services', label: 'Referred to Other clinical services' },\n        { value: 'Referred to community support', label: 'Referred to community support' },\n        \n    ];\n    \n    return (\n        <>  \n        \n            <Card >\n                <CardBody>   \n                <h2 style={{color:'#000'}}>Nutritional Status Assessment Using Body Mass Index</h2>\n                <br/>\n                    <form >\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \n                    </div>\n                    <div className=\"row\">\n                  \n                    <div className=\"row\">\n                    <div className=\" mb-3 col-md-4\">\n                        <FormGroup>\n                        <Label >Body Weight</Label>\n                        <InputGroup> \n                            <Input \n                                type=\"number\"\n                                name=\"bodyWeight\"\n                                id=\"bodyWeight\"\n                                onChange={handleInputChangeVitalSignDto}\n                                min=\"3\"\n                                max=\"150\"\n                                value={vital.bodyWeight}\n                                onKeyUp={handleInputValueCheckBodyWeight} \n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\n                            />\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\n                                kg\n                            </InputGroupText>\n                        </InputGroup>\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\n                        ) : \"\"}\n                        {errors.bodyWeight !==\"\" ? (\n                            <span className={classes.error}>{errors.bodyWeight}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>                                   \n                    <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                        <Label >Height</Label>\n                        <InputGroup> \n                        <InputGroupText\n                                addonType=\"append\"\n                                \n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\n                                >\n                                cm\n                        </InputGroupText>\n                            <Input \n                                type=\"number\"\n                                name=\"height\"\n                                id=\"height\"\n                                onChange={handleInputChangeVitalSignDto}\n                                value={vital.height}\n                                min=\"48.26\"\n                                max=\"216.408\"\n                                onKeyUp={handleInputValueCheckHeight} \n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\n                            />\n                                <InputGroupText\n\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\n                                >\n                                {vital.height!=='' && vital.height!==undefined ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\n                            </InputGroupText>\n                        </InputGroup>\n                        {vitalClinicalSupport.height !==\"\" ? (\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\n                        ) : \"\"}\n                        {errors.height !==\"\" ? (\n                            <span className={classes.error}>{errors.height}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 mt-2 col-md-4\">\n                        {vital.bodyWeight!==\"\" && vital.height!=='' && (\n                            <FormGroup>\n                            <Label > {\" \"}</Label>\n                            <InputGroup> \n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\n                                BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\n                            </InputGroupText>                   \n                           \n                            </InputGroup>                \n                            </FormGroup>\n                        )}\n                    </div>\n                    </div>\n                    {vital.bodyWeight!=='' && vital.height!=='' && (\n                      <div className=\"form-group mb-3 mt-2 col-md-12\">\n                            {\n                              BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\n                            }\n                      </div>\n                     )}\n                    <br/>\n                    <div className=\"form-group mb-3 col-md-12\">                                    \n                        <FormGroup>\n                        <Label >Nutrition Education and Counselled</Label>\n                        <DualListBox\n                            //canFilter\n                            options={nutrition}\n                            onChange={onSelectedOption}\n                            selected={selectedOptions1}\n                        />\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-12\">                                    \n                        <FormGroup>\n                        <Label >Nutrition Support</Label>\n                        <DualListBox\n                            //canFilter\n                            options={nutritionSupport}\n                            onChange={onSelectedOption2}\n                            selected={selectedOptions2}\n                        />\n                        </FormGroup>\n                    </div>\n                    </div>\n                    <br/>\n                    \n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\PositiveHealthDignity.js",["982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\n    InputGroupText,\n\n} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport {  Modal } from \"react-bootstrap\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst PositiveHealthDignity = (props) => {\n\n\n    const handleInputChange =e =>{\n        props.setPreventive({...props.preventive, [e.target.name]: e.target.value})   \n    }\n        \nreturn (\n        <>  \n        \n            <Card >\n                <CardBody>   \n               \n                    <form >\n\n                    <div className=\"row\">\n                        <h3>Prevent HIV Transmission</h3>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>How many doses of ARV's have you missed since the last appointment (if on ART)?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"lastAppointment\"\n                                        id=\"lastAppointment\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.lastAppointment} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"≤3\">≤ 3</option>\n                                    <option value=\"4-8\">4-8</option>\n                                    <option value=\"≥9\">≥ 9</option>\n                                    \n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Medication adherence counseling done?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"medication\"\n                                        id=\"medication\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.medication} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                   \n                                    </Input>\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Have you disclosed your status to your parent(s)?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"parentStatus\"\n                                        id=\"parentStatus\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.parentStatus} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        \n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Do you use condoms during every sexual encounter?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"condoms\"\n                                        id=\"condoms\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.condoms} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Condom use counseling done?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"condomCounseling\"\n                                        id=\"condomCounseling\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.condomCounseling} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        \n                        <div className=\"row\">\n                        <br/>\n                        <h3>Prevent Diseases/Optimistic Infections</h3>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Do you/partner have genital sores/rash/pain/discharge/bleeding?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"preventDiseases\"\n                                        id=\"preventDiseases\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.preventDiseases} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>How many doses of Cotrimoxazole have you missed since the last appointment?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"cotrimoxazole\"\n                                        id=\"cotrimoxazole\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.cotrimoxazole} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        </div>\n                        <div className=\"row\">\n                        <br/>\n                        <h3>Promote Health Living</h3>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>How regularly do you take alcohol in a week?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"alcohol\"\n                                        id=\"alcohol\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.alcohol} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div> \n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Nutrituional counseling done?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"nutrituional\"\n                                        id=\"nutrituional\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.nutrituional} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>WASH counseling done?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"wash\"\n                                        id=\"wash\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.wash} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Additional PHDP services provided?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"phdp\"\n                                        id=\"phdp\"\n                                        onChange={handleInputChange} \n                                        value={props.preventive.phdp} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Insecticide treated nets\">Insecticide treated nets</option>\n                                    <option value=\"Intermittent prophylactic treatment\">Intermittent prophylactic treatment </option>\n                                    <option value=\"Cervical Cancer Screening\">Cervical Cancer Screening </option>\n                                    <option value=\"Active member of SG\">Active member of SG</option>\n                                    <option value=\"Family Planning\">Family Planning </option>\n                                    <option value=\"Basic care kits\">Basic care kits</option>\n                                    <option value=\"Disclosure counseling\">Disclosure counseling</option>\n                                    <option value=\"Social Services\">Social Services</option>\n                                    <option value=\"Linkage to IGAs\">Linkage to IGAs</option>\n\n                                    <option value=\"Leg \">Leg </option>\n                                    <option value=\"Mental Health\">Mental Health</option>\n                                    <option value=\"Others\">Others</option>\n                                    </Input>\n\n                            </FormGroup>\n                        </div>\n                        </div>\n                    </div>\n                    <br/>\n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default PositiveHealthDignity","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\ChronicConditions.js",["1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\n    InputGroupText,\n\n} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst ChronicConditions = (props) => {\n    const classes = useStyles();\n    //const history = useHistory();\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors }\n\n    useEffect(() => { \n       \n    }, []); \n    \n\n    const handleInputChange =e =>{\n        props.setChronicConditions({...props.chronicConditions, [e.target.name]: e.target.value})   \n    }\n\n    \nreturn (\n        <>  \n        \n            <Card >\n                <CardBody>   \n                <h2 style={{color:'#000'}}>Screening for Chronic Conditions(Hypertension & Diabetics)</h2>\n                <br/>\n                    <form >\n                    {/* Medical History form inputs */}\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \n                    </div>\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>Known Hypertensive </Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"hypertensive\"\n                                        id=\"hypertensive\"\n                                        onChange={handleInputChange} \n                                        value={props.chronicConditions.hypertensive} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>First time identified within the programme?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"firstTimeHypertensive\"\n                                        id=\"firstTimeHypertensive\"\n                                        onChange={handleInputChange} \n                                        value={props.chronicConditions.firstTimeHypertensive}\n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                    </div>\n                    <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-12\">\n                        <FormGroup>\n                        <Label >Blood Pressure</Label>\n                        <InputGroup>\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\n                                systolic(mmHg)\n                        </InputGroupText> \n                            <Input \n                                type=\"number\"\n                                name=\"systolic\"\n                                id=\"systolic\"\n                                min=\"90\"\n                                max=\"2240\"\n                                onChange={handleInputChange}\n                                value={props.chronicConditions.systolic}\n                                //onKeyUp={handleInputValueCheckSystolic}\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \n                            />\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\n                            diastolic(mmHg)\n                            </InputGroupText>\n                                <Input \n                                type=\"number\"\n                                name=\"diastolic\"\n                                id=\"diastolic\"\n                                min={0}\n                                max={140}\n                                onChange={handleInputChange}\n                                value={props.chronicConditions.diastolic}\n                                //onKeyUp={handleInputValueCheckDiastolic} \n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\n                                />\n                            \n                            \n                        </InputGroup>\n                                \n                        </FormGroup>\n                    </div>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">                                    \n                            <FormGroup>\n                            <Label>BP above 14080mmHg?</Label>\n                                    <Input \n                                        type=\"select\"\n                                        name=\"bp\"\n                                        id=\"bp\"\n                                        onChange={handleInputChange} \n                                        value={props.chronicConditions.bp}\n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n\n                            </FormGroup>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                                <FormGroup>\n                                <Label>Know diabetic?</Label>\n                                        <Input \n                                            type=\"select\"\n                                            name=\"diabetic\"\n                                            id=\"diabetic\"\n                                            onChange={handleInputChange} \n                                            value={props.chronicConditions.diabetic}\n                                        >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        </Input>\n\n                                </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                                <FormGroup>\n                                <Label>First time identified within the programme?</Label>\n                                        <Input \n                                            type=\"select\"\n                                            name=\"firstTimeDiabetic\"\n                                            id=\"firstTimeDiabetic\"\n                                            onChange={handleInputChange} \n                                            value={props.chronicConditions.firstTimeDiabetic}\n                                        >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        </Input>\n\n                                </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                                <FormGroup>\n                                <Label>Increased frequency of urination</Label>\n                                        <Input \n                                            type=\"select\"\n                                            name=\"frequencyUrination\"\n                                            id=\"frequencyUrination\"\n                                            onChange={handleInputChange} \n                                            value={props.chronicConditions.frequencyUrination}\n                                        >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        </Input>\n\n                                </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                                <FormGroup>\n                                <Label>Increased water(fluid) intake?</Label>\n                                        <Input \n                                            type=\"select\"\n                                            name=\"increaseWater\"\n                                            id=\"increaseWater\"\n                                            onChange={handleInputChange} \n                                            value={props.chronicConditions.increaseWater}\n                                        >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        </Input>\n\n                                </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">                                    \n                                <FormGroup>\n                                <Label>Increased food intake (without weight gain)</Label>\n                                        <Input \n                                            type=\"select\"\n                                            name=\"increaseFood\"\n                                            id=\"increaseFood\"\n                                            onChange={handleInputChange} \n                                            value={props.chronicConditions.increaseFood}\n                                        >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        </Input>\n\n                                </FormGroup>\n                        </div>\n                    </div>\n                    </div>\n                    \n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default ChronicConditions","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\TrackingHistory.js",["1015","1016","1017","1018"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react';\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst TrackingHistory = (props) => {    \r\n    const [open, setOpen] = React.useState(false)\r\n    const [saving, setSaving] = useState(false)\r\n    const [record, setRecord] = useState(null)\r\n    const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n        //CheckLabModule();\r\n        //LabOrders()\r\n      }, [props.orderList]);\r\n\r\n      const onClickHome = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'client-tracker', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n\r\n     const LoadDeletePage = (row) =>{  \r\n        setSaving(true) \r\n      axios.delete(`${baseUrl}patient-tracker/patient/delete/${row.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              toast.success(\"Record deleted successfully\");\r\n              props.TrackingDetails()\r\n              toggle()\r\n              setSaving(false)\r\n          })\r\n          .catch((error) => {\r\n            toggle()\r\n              setSaving(false)\r\n              if(error.response && error.response.data){\r\n                  let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                  toast.error(errorMessage);\r\n                }\r\n                else{\r\n                  toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n          }); \r\n   }\r\n   const LoadModal =(row)=>{\r\n    toggle()\r\n    setRecord(row)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n            <br/>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n              <MaterialTable\r\n              icons={tableIcons}\r\n                title=\"Tracking History\"\r\n                columns={[\r\n                // { title: \" ID\", field: \"Id\" },\r\n                  {\r\n                    title: \" Care in Facility Discontinued\",\r\n                    field: \"careInFacilityDiscountinued\",\r\n                  },\r\n                  { title: \"Attempts\", field: \"attempts\", filtering: false },\r\n                  { title: \"Date Last Appointment\", field: \"dateLastAppointment\", filtering: false },\r\n                  { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n                ]}\r\n                //isLoading={loading}\r\n                data={ props.trackingList.map((row) => ({\r\n                    //Id: manager.id,\r\n                    careInFacilityDiscountinued:row.careInFacilityDiscountinued,\r\n                    attempts: row.attempts.length + \" Attempts\",\r\n                    dateLastAppointment: row.dateLastAppointment,\r\n                   \r\n                    Action: \r\n                   \r\n                    <div>\r\n                              <Menu.Menu position='right'  >\r\n                              <Menu.Item >\r\n                                  <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                  <Dropdown item text='Action'>\r\n\r\n                                  <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'view')}><Icon name='eye' />View</Dropdown.Item>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                                      <Dropdown.Item  onClick={()=>LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                              </Dropdown>\r\n                                  </Button>\r\n                              </Menu.Item>\r\n                              </Menu.Menu>\r\n                          </div>\r\n                    }))}\r\n              \r\n                          options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n              />\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Notification!\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4>Are you Sure you want to delete  record</h4>\r\n                        \r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n                    <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n                    \r\n                </Modal.Footer>\r\n              </Modal> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackingHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\TrackingForm\\Tracking.js",["1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } ,\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n      },\r\n}))\r\n\r\nconst Tracking = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    //const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [reasonTracking, setReasonTracking] = useState([]);\r\n    const [reasonDiscountinuation, setreasonDiscountinuation] = useState([]);\r\n    const [causeDeath, setcauseDeath] = useState([]);\r\n    const [reasonLostToFollowUp, setreasonLostToFollowUp] = useState([]);\r\n    const [reasonDefaulting, setreasonDefaulting] = useState([]);\r\n    const [personContact, setpersonContact] = useState([]);\r\n    const [modeCommunication, setmodeCommunication] = useState([]);\r\n    const [vaCauseOfDeathType, setvaCauseOfDeathType] = useState([]);\r\n    const [dsdStatus, setdsdStatus] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\"); \r\n    const [vaCauseOfDeathTypeAdult, setvaCauseOfDeathTypeAdult] = useState([]);\r\n    const [vaCauseOfDeathTypeAdultNonCommunicableDiseases, setvaCauseOfDeathTypeAdultNonCommunicableDiseases] = useState([]);\r\n    const [vaCauseOfDeathTypeAdultInjuries, setvaCauseOfDeathTypeAdultInjuries] = useState([]);\r\n    const [vaCauseOfDeathTypeChild, setvaCauseOfDeathTypeChild] = useState([]);\r\n    const [vaCauseOfDeathTypeChildNonCommunicableDiseases, setvaCauseOfDeathTypeChildNonCommunicableDiseases] = useState([]);\r\n    const [vaCauseOfDeathTypeNeonate, setvaCauseOfDeathTypeNeonate] = useState([]);\r\n    const [vaCauseOfDeathTypeChildInjuries, setvaCauseOfDeathTypeChildInjuries] = useState([]);\r\n    let history = useHistory();\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Tracking form\",\r\n        visitId: null\r\n    })\r\n    const [objValues, setObjValues]=useState({\r\n            durationOnART:\"\", \r\n            dsdStatus:\"\", \r\n            dsdModel:\"\", \r\n            reasonForTracking:\"\",\r\n            dateLastAppointment:\"\",\r\n            dateMissedAppointment :\"\",\r\n            careInFacilityDiscountinued :\"\",\r\n            dateOfDiscontinuation :\"\",\r\n            reasonForDiscountinuation:\"\",\r\n            reasonForLossToFollowUp :\"\",\r\n            causeOfDeath :\"\",\r\n            dateReturnToCare :\"\",\r\n            referredFor:\"\",\r\n            referredForOthers:\"\",\r\n            reasonForTrackingOthers:\"\",\r\n            causeOfDeathOthers:\"\",\r\n            reasonForLossToFollowUpOthers:\"\",\r\n            attempts:\"\",\r\n            patientId:props.patientObj.id,\r\n            vaCauseOfDeathType:\"\",\r\n            vaCauseOfDeath:\"\",\r\n            statusTracker: {\r\n                agreedDate: \"\",\r\n                causeOfDeath: \"\",\r\n                facilityId: \"\",\r\n                hivStatus: \"\",\r\n                personId:props.patientObj.id,\r\n                reasonForInterruption: \"\",\r\n                statusDate: \"\",\r\n                trackDate: \"\",\r\n                trackOutcome: \"\",\r\n                visitId: \"\",\r\n                vaCauseOfDeathType:\"\",\r\n                vaCauseOfDeath:\"\"\r\n              },\r\n            dateOfObservation:\"\"\r\n\r\n            })\r\n    useEffect(() => {\r\n        ReasonForTracking();\r\n        LostToFollowUp();\r\n        ReasonForDiscountinuation();\r\n        CauseOfDeath();\r\n        ReasonForDefaulting();\r\n        DsdStatus();\r\n        ModeOfCommunication();\r\n        PersonContact();\r\n        GetPatientDTOObj();\r\n        VA_CAUSE_OF_DEATH();\r\n        VA_ADULT_CAUSES();\r\n        VA_ADULT_CAUSES_NON_COMMUNICABLE_DISEASES();\r\n        VA_ADULT_CAUSES_INJURIES();\r\n        VA_CHILD_CAUSES();\r\n        VA_CHILD_CAUSES_NON_COMMUNICABLE_DISEASES();\r\n        VA_CHILD_CAUSES_INJURIES();\r\n        VA_NEONATE_CAUSES();\r\n    }, []);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               //console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const ReasonForTracking =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_TRACKING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setReasonTracking(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //TRACKING_DSD_STATUS\r\n    const DsdStatus =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/TRACKING_DSD_STATUS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setdsdStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //MODE_OF_COMMUNICATION\r\n    const ModeOfCommunication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/MODE_OF_COMMUNICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setmodeCommunication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }//MODE_OF_COMMUNICATION\r\n    const PersonContact =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PERSON_CONTACTED`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setpersonContact(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //\r\n    const VA_CAUSE_OF_DEATH =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_CAUSE_OF_DEATH`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_ADULT_CAUSES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_ADULT_CAUSES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeAdult(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_ADULT_CAUSES_NON_COMMUNICABLE_DISEASES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_ADULT_CAUSES_NON_COMMUNICABLE_DISEASES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeAdultNonCommunicableDiseases(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_ADULT_CAUSES_INJURIES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_ADULT_CAUSES_INJURIES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeAdultInjuries(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_CHILD_CAUSES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_CHILD_CAUSES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeChild(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_CHILD_CAUSES_NON_COMMUNICABLE_DISEASES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_CHILD_CAUSES_NON-COMMUNICABLE_DISEASES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeChildNonCommunicableDiseases(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_CHILD_CAUSES_INJURIES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_CHILD_CAUSES_INJURIES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeChildInjuries(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const VA_NEONATE_CAUSES =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VA_NEONATE_CAUSES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setvaCauseOfDeathTypeNeonate(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const ReasonForDefaulting =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_DEFAULTING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonDefaulting(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const ReasonForDiscountinuation =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_DISCONTINUATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonDiscountinuation(response.data)\r\n                //setreasonDiscountinuation(response.data.filter((x)=> x.code!=='REASON_DISCONTINUATION_INTERRUPTION_IN_TREATMENT'));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const CauseOfDeath =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setcauseDeath(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const LostToFollowUp =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_TRACKING`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setreasonLostToFollowUp(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        //The logics below is to make sure that no value is save if the options are not selected\r\n        if(e.target.name==='dsdStatus' && e.target.value!=='TRACKING_DSD_STATUS_DEVOLVED'){\r\n            objValues.dsdModel=\"\"\r\n            setObjValues ({...objValues,  [\"dsdModel\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value===''){\r\n            objValues.dateOfDiscontinuation=\"\"\r\n            objValues.dateReturnToCare=\"\"\r\n            objValues.referredFor=\"\"\r\n            objValues.reasonForDiscountinuation=\"\"\r\n            setObjValues ({...objValues,  [\"dateOfDiscontinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"dateReturnToCare\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredFor\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"reasonForDiscountinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='reasonForDiscountinuation' && e.target.value!=='Death'){\r\n            objValues.causeOfDeath=\"\"\r\n            objValues.causeOfDeathOthers=\"\"\r\n            setObjValues ({...objValues,  [\"causeOfDeath\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='reasonForDiscountinuation' && e.target.value!=='Interruption in Treatment'){\r\n            objValues.reasonForLossToFollowUp=\"\"\r\n            objValues.reasonForLossToFollowUpOthers=\"\"\r\n            setObjValues ({...objValues,  [\"reasonForLossToFollowUpOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        \r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value==='No'){\r\n            objValues.reasonForDiscountinuation=\"\"\r\n            objValues.causeOfDeathOthers=\"\"\r\n            objValues.causeOfDeath=\"\"\r\n            objValues.dateOfDiscontinuation=\"\"\r\n            setObjValues ({...objValues,  [\"reasonForLossToFollowUp\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeath\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"dateOfDiscontinuation\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"causeOfDeathOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='careInFacilityDiscountinued' && e.target.value==='Yes'){\r\n            objValues.dateReturnToCare=\"\"\r\n            objValues.referredFor=\"\"\r\n            objValues.referredForOthers=\"\"\r\n            setObjValues ({...objValues,  [\"dateReturnToCare\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredFor\"]: \" \" });\r\n            setObjValues ({...objValues,  [\"referredForOthers\"]: \" \" });\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        \r\n    } \r\n    const handleInputChangeObservation = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        //setObservation ({...observation,  [e.target.name]: e.target.value});\r\n        setObjValues ({...objValues,  dateOfObservation: e.target.value});\r\n    }  \r\n    const [attempt, setAttempt] = useState({ attemptDate: \"\", whoAttemptedContact: \"\", \r\n                modeOfConatct: \"\", personContacted: \"\", reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n    });\r\n    const [attemptList, setAttemptList] = useState([])          \r\n    const handleInputChangeAttempt = e => {\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setAttempt ({...attempt,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n    temp.durationOnART = objValues.durationOnART ? \"\" : \"This field is required\"\r\n    temp.dsdStatus = objValues.dsdStatus ? \"\" : \"This field is required\"\r\n    {objValues.dsdStatus==='Devolved' && (temp.dsdModel = objValues.dsdModel ? \"\" : \"This field is required\")}\r\n    temp.reasonForTracking = objValues.reasonForTracking ? \"\" : \"This field is required\"\r\n    temp.dateLastAppointment = objValues.dateLastAppointment ? \"\" : \"This field is required\"\r\n    temp.dateMissedAppointment = objValues.dateMissedAppointment ? \"\" : \"This field is required\"\r\n\r\n    temp.careInFacilityDiscountinued = objValues.careInFacilityDiscountinued ? \"\" : \"This field is required\"\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.dateOfDiscontinuation = objValues.dateOfDiscontinuation ? \"\" : \"This field is required\")}\r\n    {objValues.careInFacilityDiscountinued==='Yes' && (temp.reasonForDiscountinuation = objValues.reasonForDiscountinuation ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Loss to follow-up' && (temp.reasonForLossToFollowUp = objValues.reasonForLossToFollowUp ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForDiscountinuation==='Death' && (temp.causeOfDeath = objValues.causeOfDeath ? \"\" : \"This field is required\")}\r\n   // objValues.careInFacilityDiscountinued==='Yes' && (temp.dateReturnToCare = objValues.dateReturnToCare ? \"\" : \"This field is required\")\r\n    objValues.careInFacilityDiscountinued==='No' && objValues.dateReturnToCare!==\"\" && (temp.referredFor = objValues.referredFor ? \"\" : \"This field is required\")\r\n    {objValues.referredFor==='Others' && (temp.referredForOthers = objValues.referredForOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForTracking==='Others' && (temp.reasonForTrackingOthers = objValues.reasonForTrackingOthers ? \"\" : \"This field is required\")}\r\n    {objValues.causeOfDeath==='Unknown' || objValues.causeOfDeath==='Other cause of death' || objValues.causeOfDeath==='Suspected Opportunistic Infection' && (temp.causeOfDeathOthers = objValues.causeOfDeathOthers ? \"\" : \"This field is required\")}\r\n    {objValues.reasonForLossToFollowUp==='Others' && ( temp.reasonForLossToFollowUpOthers = objValues.reasonForLossToFollowUpOthers ? \"\" : \"This field is required\")}\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Validations of the forms\r\n    const validateAttempt = () => {        \r\n    temp.attemptDate = attempt.attemptDate ? \"\" : \"This field is required\"\r\n    temp.whoAttemptedContact = attempt.whoAttemptedContact ? \"\" : \"This field is required\"\r\n    temp.modeOfConatct = attempt.modeOfConatct ? \"\" : \"This field is required\"\r\n    temp.personContacted = attempt.personContacted ? \"\" : \"This field is required\"\r\n    temp.reasonForDefaulting = attempt.reasonForDefaulting ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addAttempt = e => {\r\n        if(validateAttempt()){ \r\n            setAttemptList([...attemptList, attempt])\r\n            setAttempt({attemptDate: \"\", whoAttemptedContact: \"\", \r\n                        modeOfConatct: \"\", personContacted: \"\", \r\n                        reasonForDefaulting: \"\", reasonForDefaultingOthers:\"\"\r\n            })\r\n        }else{\r\n            toast.error(\"Please fill the required fields\");\r\n        }\r\n      }\r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        attemptList.splice(index, 1);\r\n        setAttemptList([...attemptList]);        \r\n    }; \r\n    \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            if(attemptList.length >0){\r\n                objValues.attempts=attemptList\r\n                //observation.dateOfObservation= observation.dateOfObservation !==\"\" ? observation.dateOfObservation : moment(new Date()).format(\"YYYY-MM-DD\")                  \r\n                observation.personId =patientObj.id\r\n                observation.data=objValues \r\n                objValues.statusTracker.causeOfDeath=objValues.causeOfDeath\r\n                objValues.statusTracker.hivStatus=objValues.reasonForDiscountinuation\r\n                objValues.statusTracker.reasonForInterruption=objValues.reasonForDiscountinuation\r\n                objValues.statusTracker.statusDate=objValues.dateOfDiscontinuation!==null && objValues.dateOfDiscontinuation!==\"\" ? objValues.dateOfDiscontinuation : objValues.dateReturnToCare\r\n                objValues.statusTracker.trackDate=objValues.dateOfDiscontinuation!==null && objValues.dateOfDiscontinuation!==\"\" ? objValues.dateOfDiscontinuation : objValues.dateReturnToCare\r\n                objValues.statusTracker.trackOutcome=objValues.reasonForTracking\r\n                //Adding VACAUSE OF DEATH \r\n                objValues.statusTracker.vaCauseOfDeathType=objValues.vaCauseOfDeathType\r\n                objValues.statusTracker.vaCauseOfDeath=objValues.vaCauseOfDeath\r\n                if(objValues.careInFacilityDiscountinued==='No'){\r\n                    objValues.statusTracker=null\r\n                }\r\n                setSaving(true);\r\n                axios.post(`${baseUrl}patient-tracker`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        //props.TrackingDetails();\r\n                        //props.PatientCurrentObject()\r\n                        toast.success(\"Tracking from save successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                        props.setActiveContent({...props.activeContent, route:'tracking-form', activeTab:\"history\", })\r\n                        //props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                        //props.setActiveContent('recent-history')\r\n                        if(objValues.reasonForDiscountinuation==='Death'){\r\n                            history.push('/')\r\n                        }\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                                toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }else{\r\n                                toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }\r\n\r\n                        }\r\n                        else{\r\n                            toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    });\r\n                }else{\r\n                    toast.error(\"Attempt to Contact can not be empty\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n            }  \r\n    }\r\n\r\n  //console.log(props.patientObj.age)\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Client Tracking & Discontinuation Form</h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={objValues.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChangeObservation}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Duration on ART <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"durationOnART\"\r\n                                    id=\"durationOnART\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.durationOnART} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"<3months\">{\"<\"} 3 months</option>\r\n                                    <option value=\">=3months\">{\">=\"} 3 months</option>\r\n                                </Input>\r\n                                {errors.durationOnART !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.durationOnART}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">DSD Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdStatus\"\r\n                                    id=\"dsdStatus\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdStatus} \r\n                                >\r\n                                   <option value=\"\">Select</option>\r\n                                    {dsdStatus.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                    \r\n                                </Input>\r\n                                {errors.dsdStatus !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdStatus}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.dsdStatus==='TRACKING_DSD_STATUS_DEVOLVED' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">DSD Model <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"dsdModel\"\r\n                                    id=\"dsdModel\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.dsdModel} \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"FBM\">FBM</option>\r\n                                    <option value=\"CBM\">CBM</option>\r\n                                </Input>\r\n                                {errors.dsdModel !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dsdModel}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Tracking <span style={{ color:\"red\"}}> *</span></Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"reasonForTracking\"\r\n                                    id=\"reasonForTracking\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTracking} \r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {reasonTracking.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.reasonForTracking !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTracking}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.reasonForTracking==='REASON_TRACKING_OTHER_(SPECIFY)' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Tracking Others</Label>\r\n\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"reasonForTrackingOthers\"\r\n                                    id=\"reasonForTrackingOthers\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.reasonForTrackingOthers} \r\n                                />\r\n                                 {errors.reasonForTrackingOthers !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForTrackingOthers}</span>\r\n                                    ) : \"\" }\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Last Actual Contact/ Appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateLastAppointment\"\r\n                                id=\"dateLastAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateLastAppointment} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateLastAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateLastAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Missed Scheduled Appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateMissedAppointment\"\r\n                                id=\"dateMissedAppointment\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateMissedAppointment} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateMissedAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateMissedAppointment}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <hr/>\r\n                        <h3>Attempted to Contact</h3>\r\n                        <div className=\"form-group mb-3 col-md-3\">        \r\n                            <FormGroup>\r\n                                <Label >Attempt Date</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"attemptDate\"\r\n                                    id=\"attemptDate\"\r\n                                    value={attempt.attemptDate}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.attemptDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.attemptDate}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                            </div> \r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Who Attempted Contact?</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"whoAttemptedContact\"\r\n                                    id=\"whoAttemptedContact\"\r\n                                    value={attempt.whoAttemptedContact}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                {errors.whoAttemptedContact !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.whoAttemptedContact}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Mode Of Contact</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"modeOfConatct\"\r\n                                    id=\"modeOfConatct\"\r\n                                    value={attempt.modeOfConatct}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {modeCommunication.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input> \r\n                                {errors.modeOfConatct !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.modeOfConatct}</span>\r\n                                ) : \"\" }   \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Person Contacted</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"personContacted\"\r\n                                    id=\"personContacted\"\r\n                                    value={attempt.personContacted}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {personContact.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.personContacted !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.personContacted}</span>\r\n                                ) : \"\" }  \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Reason for Defaulting</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    value={attempt.reasonForDefaulting}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option>\r\n                                    {reasonDefaulting.map((value) => (\r\n                                        <option key={value.code} value={value.code}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.reasonForDefaulting !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.reasonForDefaulting}</span>\r\n                                ) : \"\" }  \r\n                                </FormGroup>\r\n                            </div>\r\n                            {attempt.reasonForDefaulting==='REASON_DEFAULTING_OTHERS_(PLS_SPECIFY)' && (\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Reason for Defaulting</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"reasonForDefaultingOthers\"\r\n                                    id=\"reasonForDefaultingOthers\"\r\n                                    value={attempt.reasonForDefaultingOthers}\r\n                                    onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                {errors.reasonForDefaultingOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForDefaultingOthers}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            <div className=\"form-group mb-3 col-md-2\">\r\n                            <LabelSui as='a' color='black'  onClick={addAttempt}  size='tiny' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                            </div>\r\n\r\n                            {attemptList.length >0 \r\n                            ?\r\n                                <List>\r\n                                <Table  striped responsive>\r\n                                    <thead >\r\n                                        <tr>\r\n                                            <th>Attempted Date</th>\r\n                                            <th>Who Attempted Contact</th>\r\n                                            <th>Mode Of Conatct</th>\r\n                                            <th>Person Contacted</th>\r\n                                            <th>Reason For Defaulting</th>\r\n                                            <th ></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {attemptList.map((attemptObj, index) => (\r\n\r\n                                    <AttemptedLists\r\n                                        key={index}\r\n                                        index={index}\r\n                                        attemptObj={attemptObj}\r\n                                        removeAttempt={removeAttempt}\r\n                                    />\r\n                                    ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </List>\r\n                                :\r\n                                \"\"\r\n                            }       \r\n                        <hr/>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Patient Care in Facility Discontinued ? <span style={{ color:\"red\"}}> *</span> </Label>\r\n\r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"careInFacilityDiscountinued\"\r\n                                    id=\"careInFacilityDiscountinued\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.careInFacilityDiscountinued}  \r\n                                >\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                </Input>\r\n                                {errors.careInFacilityDiscountinued !==\"\" ? (\r\n                                <span className={classes.error}>{errors.careInFacilityDiscountinued}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div> \r\n                        {objValues.careInFacilityDiscountinued==='No' && (<>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date Returned to Care</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateReturnToCare\"\r\n                                id=\"dateReturnToCare\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateReturnToCare} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateReturnToCare !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateReturnToCare}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referred for</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"referredFor\"\r\n                                id=\"referredFor\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.referredFor} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            >\r\n                                <option value=\"\"></option>\r\n                                <option value=\"Adherence Counselling\">Adherence Counselling</option>\r\n                                <option value=\"Others\">Others</option>\r\n                            </Input>\r\n                            {errors.referredFor !==\"\" ? (\r\n                                <span className={classes.error}>{errors.referredFor}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.referredFor==='Others' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referred for - (Others specify ) </Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"referredForOthers\"\r\n                                id=\"referredForOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.referredForOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                             {errors.referredForOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.referredForOthers}</span>\r\n                                ) : \"\" } \r\n                            </FormGroup>\r\n                        </div>\r\n                      )}\r\n                        </>)} \r\n                        \r\n                        {objValues.careInFacilityDiscountinued==='Yes' && (<>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label for=\"\"> Date of Discontinuation</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfDiscontinuation\"\r\n                                id=\"dateOfDiscontinuation\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateOfDiscontinuation} \r\n                                min={enrollDate!=='' ? enrollDate : \"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.dateOfDiscontinuation !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfDiscontinuation}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Discontinuation</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonForDiscountinuation\"\r\n                                id=\"reasonForDiscountinuation\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForDiscountinuation} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                    {reasonDiscountinuation.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.reasonForDiscountinuation !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForDiscountinuation}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>)} \r\n                        {objValues.reasonForDiscountinuation==='Death' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Cause of Death</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"causeOfDeath\"\r\n                                id=\"causeOfDeath\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.causeOfDeath} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                 {causeDeath.map((value) => (\r\n                                        <option key={value.code} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.causeOfDeath !==\"\" ? (\r\n                                <span className={classes.error}>{errors.causeOfDeath}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeathType\"\r\n                            id=\"vaCauseOfDeathType\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeathType} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathType.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeathType !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeathType}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        {/* Start of VA Cause of Death  base on selection */}\r\n                        {objValues.vaCauseOfDeathType==='Adult Causes' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeAdult.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Adult Causes -Non-communicable diseases' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeAdultNonCommunicableDiseases.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Adult Causes - Injuries' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeAdultInjuries.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Child Causes' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeChild.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Child Causes - Non-communicable diseases' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeChildNonCommunicableDiseases.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Neonates Causes' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeNeonate.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.vaCauseOfDeathType==='Child Causes - Injuries' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">VA Cause of Death - ({objValues.vaCauseOfDeathType})</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"vaCauseOfDeath\"\r\n                            id=\"vaCauseOfDeath\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.vaCauseOfDeath} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                             {vaCauseOfDeathTypeChildInjuries.map((value) => (\r\n                                    <option key={value.code} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.vaCauseOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.vaCauseOfDeath}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {/* End of VA Cause of Death  base on selection  */}\r\n                        </>\r\n                        )} \r\n                        {(objValues.causeOfDeath==='Natural Cause' || objValues.causeOfDeath==='Unknown cause' ) && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Cause of Death  (specify)</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"causeOfDeathOthers\"\r\n                                id=\"causeOfDeathOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.causeOfDeathOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                            {errors.causeOfDeathOthers !==\"\" ? (\r\n                                <span className={classes.error}>{errors.causeOfDeathOthers}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.reasonForDiscountinuation==='Interruption in Treatment' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Interruption in Treatment</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonForLossToFollowUp\"\r\n                                id=\"reasonForLossToFollowUp\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForLossToFollowUp} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Travel/Relocation\">Travel/Relocation</option>\r\n                                <option value=\"Spiritual/Cultural beliefs\">Spiritual/Cultural beliefs</option>\r\n                                <option value=\"Pill burden/ARV side effects\">Pill burden/ARV side effects</option>\r\n                                <option value=\"Stigma/Conduct of staff\">Stigma/Conduct of staff</option>\r\n                                <option value=\"Distance/Economic reasons\">Distance/Economic reasons</option>\r\n                                <option value=\"Others\">Others</option>\r\n                            </Input>\r\n                            {errors.reasonForLossToFollowUp !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonForLossToFollowUp}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.reasonForLossToFollowUp==='Others' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Reason for Interruption in Treatment - Others specify</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"reasonForLossToFollowUpOthers\"\r\n                                id=\"reasonForLossToFollowUpOthers\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonForLossToFollowUpOthers} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                              \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        \r\n                       \r\n                       \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={saving}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nfunction AttemptedLists({\r\n    attemptObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n  \r\n  \r\n    return (\r\n            <tr>\r\n                <th>{attemptObj.attemptDate}</th>\r\n                <th>{attemptObj.whoAttemptedContact}</th>\r\n                <th>{attemptObj.modeOfConatct}</th>\r\n                <th>{attemptObj.personContacted}</th>\r\n                <th>{attemptObj.reasonForDefaulting==='' ? attemptObj.reasonForDefaultingOthers : attemptObj.reasonForDefaulting}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Tracking;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Index.js",["1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068"],"import React, { useState } from 'react';\r\n\r\nimport { Col, Form,CardBody,  Row,CardTitle, CardText,\r\n   } from \"reactstrap\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Highcharts from 'highcharts';\r\n import HighchartsReact from 'highcharts-react-official';\r\nimport {NewlyEnrolledArtBySex} from './Highcharts/NewlyEnrolledArtBySex';\r\nimport {NewlyEnrolledArtByAge} from './Highcharts/NewlyEnrolledArtByAge';\r\nimport {ReceivingArtByAge}  from './Highcharts/ReceivingArtByAge';\r\nimport {ReceivingArtBySex} from './Highcharts/ReceivingArtBySex';\r\nimport { Progress } from 'reactstrap';\r\n\r\n\r\n// Load Highcharts modules\r\n//require(\"highcharts/modules/exporting\")(Highcharts);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n        margin: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n},\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst SummaryView = (props) => {\r\n  const classes = useStyles();\r\n  const [chartValue, setChartValue] = useState(\"\");\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const [state, setState] = useState({ activeItem: 'gamepad' })\r\n\r\n  const handleItemClick = (e, { name }) => setState({ activeItem: name })\r\n  const { activeItem } = state\r\n  const chartPage  = e => {\r\n\r\n    setChartValue(e)\r\n  }\r\n\r\n  //Menu Icon \r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div  spacing={5} style={{ padding: 20 }} >\r\n      <Row>\r\n        <Col md={12}>\r\n          {/* The second Column Card Layout  */}\r\n        <Row>\r\n                 \r\n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\r\n                  <Card><CardBody>\r\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtBySex} />\r\n                  </CardBody></Card>\r\n                  </Col>\r\n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\r\n                  <Card><CardBody>\r\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtByAge} />\r\n                  </CardBody></Card>\r\n                  </Col>\r\n              </Row>\r\n\r\n           \r\n        </Col>\r\n      </Row>\r\n\r\n      \r\n\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SummaryView;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtBySex.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtBySex.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtByAge.js",[],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtByAge.js",["1069","1070"],"import Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\n\r\n\r\nexport const NewlyEnrolledArtByAge = {\r\n    chart: {\r\n        \r\n        plotBackgroundColor: null,\r\n        plotBorderWidth: null,\r\n        plotShadow: false,\r\n        type: 'pie'\r\n    },\r\n    title: {\r\n        text: 'Number of Adults and Children newly enrolled on ART '\r\n    },\r\n    tooltip: {\r\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n    },\r\n    accessibility: {\r\n        point: {\r\n            valueSuffix: '%'\r\n        }\r\n    },\r\n    plotOptions: {\r\n        pie: {\r\n            allowPointSelect: true,\r\n            cursor: 'pointer',\r\n            dataLabels: {\r\n                enabled: true,\r\n                format: '<b>{point.name}</b>: {point.percentage:.1f} %',\r\n                connectorColor: 'black'\r\n            },\r\n            showInLegend: true\r\n        }\r\n    },\r\n    series: [{\r\n        name: 'Newly Enrolled on ART by Age',\r\n        data: [\r\n            \r\n            { name: '25 + ', sliced: true, y: 61.41 },\r\n            { name: '20-24 ', y: 11.84 },\r\n            { name: '10-19 ', y: 10.85 },\r\n            { name: '≤ 9 ', y: 4.67 },\r\n        ]\r\n    }]\r\n};","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult.js",["1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\nimport {Alert } from \"react-bootstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    const [test, setTest] = useState([]);\r\n    const [vlRequired, setVlRequired]=useState(false)\r\n    const [priority, setPriority]=useState([])\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    const [showVLIndication, setShowVLIndication] = useState(false);\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        testOrder: \"\",\r\n                                        dateAssayed: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateResultReceived:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: 0,\r\n                                        visitId:\"\" \r\n                                    })\r\n    useEffect(() => {\r\n           \r\n            CheckLabModule();\r\n         \r\n                TestGroup();\r\n                PriorityOrder();\r\n                ViraLoadIndication();\r\n                //PatientVisit();\r\n            \r\n        }, [props.patientObj.id]);\r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtestgroups`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setTestGroup(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get list of Test Group\r\n    const PriorityOrder =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/TEST_ORDER_PRIORITY`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPriority(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get Patiet Visit \r\n    // const PatientVisit =()=>{\r\n    //     axios\r\n    //         .get(`${baseUrl}patient/visit/visit-detail/${props.patientObj.id}`,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //             const lastVisit = response.data[response.data.length - 1]\r\n    //             if(lastVisit.status===\"PENDING\"){\r\n    //                 visitId= lastVisit.id\r\n    //                 //setCurrentVisit(true)\r\n    //                 setButtonHidden(false)\r\n    //             }else{\r\n    //                 toast.error(\"Patient do not have any active visit\")\r\n    //                 setButtonHidden(true)\r\n    //                 //setCurrentVisit(false)\r\n    //             }\r\n\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });        \r\n    // }\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleSelectedTestGroup = e =>{\r\n        setTests ({...tests,  labTestGroupId: e.target.value});\r\n        const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n        setTest(getTestList[0].labTests)\r\n        // if(e.target.value==='4'){            \r\n        //     setVlRequired(true)\r\n        // }else{\r\n        //     setVlRequired(false) \r\n        // }\r\n    }\r\n    const handleInputChangeObject = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n                      \r\n    }\r\n    const handleInputChangeTest = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        \r\n        if(e.target.value===\"16\"){\r\n            setShowVLIndication(true)\r\n            setVlRequired(true)\r\n            setErrors({...temp, viralLoadIndication:\"\"})\r\n            \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }else{\r\n            setShowVLIndication(false)\r\n            setVlRequired(false) \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }\r\n        //setObjValues ({...objValues,  [e.target.name]: e.target.value});       \r\n    }\r\n\r\n    const addOrder = e => {  \r\n        console.log(errors) \r\n        if(validate()){\r\n            \r\n            tests.visitId=visitId\r\n            setTestOrderList([...testOrderList, tests])\r\n        }\r\n      }\r\n      /* Remove ADR  function **/\r\n      const removeOrder = index => {       \r\n        testOrderList.splice(index, 1);\r\n        setTestOrderList([...testOrderList]);\r\n         \r\n      };\r\n      //Validations of the forms\r\n      const validate = () => {        \r\n        //temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n        temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        //temp.labNumber = tests.labNumber ? \"\" : \"This field is required\"\r\n        //temp.dateResultReceived =  tests.dateResultReceived ? \"\" : \"This field is required\"\r\n        vlRequired && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")\r\n        if(tests.dateResultReceived!==\"\"){\r\n            temp.result = tests.result ? \"\" : \"This field is required\"\r\n        }\r\n        if(tests.dateResultReceived!==\"\"){\r\n            temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        }\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();            \r\n        setSaving(true);\r\n        axios.post(`${baseUrl}laboratory/rde-orders`,testOrderList,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Laboratory test order created successful\");\r\n                props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage); \r\n                }                  \r\n            }); \r\n    }\r\n\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Laboratory Order and Result Form</h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {moduleStatus===\"1\" && (\r\n                <form >\r\n                <div className=\"row\">\r\n\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"\">Test Order*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"testOrder\"\r\n                                    id=\"testOrder\"\r\n                                    value={tests.testOrder}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.testOrder !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.testOrder}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\"> Date Sample Collected*</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"sampleCollectionDate\"\r\n                                id=\"sampleCollectionDate\"\r\n                                value={tests.sampleCollectionDate}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.sampleCollectionDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Result*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"result\"\r\n                                    id=\"result\"\r\n                                    value={tests.result}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.result !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.result}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\"> Date Result Received*</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"resultDate\"\r\n                                id=\"resultDate\"\r\n                                value={tests.resultDate}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.resultDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.resultDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={12}>                  \r\n                        <LabelSui as='a' color='black'  className=\"float-end\" onClick={addOrder}  size='tiny' style={{ marginTop:20, marginBottom:20}}>\r\n                            <Icon name='plus' /> Add Test\r\n                        </LabelSui>\r\n                        \r\n                    </Col>\r\n                        <hr/>\r\n                        {/* List of Test Order */}\r\n                        {testOrderList.length >0 \r\n                            ?\r\n                            \r\n                            <List>\r\n                            <Table  striped responsive>\r\n                                <thead >\r\n                                    <tr>\r\n                                        <th>Test Order</th>\r\n                                        <th>Date Sample Collected</th>\r\n                                        <th>Result</th>\r\n                                        <th>Date Result Received</th>                                        \r\n                                        <th ></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {testOrderList.map((tests,index) => (\r\n\r\n                                <TestOrdersList\r\n                                    key={index}\r\n                                    index={index}\r\n                                    order={tests}\r\n                                    testGroupObj={testGroup}\r\n                                    vLIndicationObj={vLIndication}\r\n                                    removeOrder={removeOrder}\r\n                                />\r\n                                ))}\r\n                                </tbody>\r\n                                </Table>\r\n                            </List>\r\n                            :\r\n                            \"\"\r\n                        } \r\n                </div>\r\n                <div className=\"row\">\r\n                <Col md={6} className=\"form-group mb-3\">\r\n                    <FormGroup>\r\n                        <Label for=\"encounterDate\">Reported by</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"reportedBy\"\r\n                            id=\"reportedBy\"\r\n                            value={tests.reportedBy}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        {errors.reportedBy !==\"\" ? (\r\n                            <span className={classes.error}>{errors.reportedBy}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md={6} className=\"form-group mb-3\">\r\n                    <FormGroup>\r\n                        <Label for=\"encounterDate\">Reported Date</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"clinicianName\"\r\n                            id=\"clinicianName\"\r\n                            value={tests.clinicianName}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        {errors.clinicianName !==\"\" ? (\r\n                            <span className={classes.error}>{errors.clinicianName}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md={6} className=\"form-group mb-3\">\r\n                    <FormGroup>\r\n                        <Label for=\"encounterDate\">Checked by</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"reportedBy\"\r\n                            id=\"reportedBy\"\r\n                            value={tests.reportedBy}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        {errors.reportedBy !==\"\" ? (\r\n                            <span className={classes.error}>{errors.reportedBy}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md={6} className=\"form-group mb-3\">\r\n                    <FormGroup>\r\n                        <Label for=\"encounterDate\">Checked Date</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"clinicianName\"\r\n                            id=\"clinicianName\"\r\n                            value={tests.clinicianName}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        {errors.clinicianName !==\"\" ? (\r\n                            <span className={classes.error}>{errors.clinicianName}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md={6} className=\"form-group mb-3\">\r\n                    <FormGroup>\r\n                        <Label for=\"encounterDate\">Clinician Name</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"clinicianName\"\r\n                            id=\"clinicianName\"\r\n                            value={tests.clinicianName}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        {errors.clinicianName !==\"\" ? (\r\n                            <span className={classes.error}>{errors.clinicianName}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </Col>\r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={buttonHidden}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={testOrderList.length >0 ? false : true}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n            )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )} \r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\nfunction TestOrdersList({\r\n    order,\r\n    index,\r\n    removeOrder,\r\n    testGroupObj,\r\n    vLIndicationObj,\r\n  }) {\r\n    \r\n    const testGroupName= testGroupObj.find((x)=> x.id===parseInt(order.labTestGroupId))\r\n    const testName= testGroupName.labTests.find((x)=> x.id===parseInt(order.labTestId))\r\n    const vLIndication=vLIndicationObj.length>0 ?\r\n    vLIndicationObj.find((x)=> x.id===parseInt(order.viralLoadIndication)) : {}\r\n\r\n    return (\r\n            <tr>\r\n                <th>{testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th>\r\n                <th>{testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? vLIndication.display :  testName.labTestName}</th>\r\n                <th>{order.sampleCollectionDate}</th>\r\n                <th>{order.dateAssayed}</th>\r\n                <th>{order.dateResultReceived}</th>\r\n                <th>{vLIndication && vLIndication.display ? vLIndication.display : \"\"}</th>\r\n                <th>{order.result}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult.js",["1083","1084","1085","1086","1087","1088","1089","1090"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\nimport {Alert } from \"react-bootstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    const [test, setTest] = useState([]);\r\n    const [vlRequired, setVlRequired]=useState(false)\r\n    const [priority, setPriority]=useState([])\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    const [showVLIndication, setShowVLIndication] = useState(false);\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        comments: \"\",\r\n                                        dateAssayed: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateResultReceived:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: 0,\r\n                                        visitId:\"\" \r\n                                    })\r\n    useEffect(() => {\r\n           \r\n            CheckLabModule();\r\n         \r\n                TestGroup();\r\n                PriorityOrder();\r\n                ViraLoadIndication();\r\n                //PatientVisit();\r\n            \r\n        }, [props.patientObj.id]);\r\n        \r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtestgroups`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setTestGroup(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get list of Test Group\r\n    const PriorityOrder =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/TEST_ORDER_PRIORITY`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPriority(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get Patiet Visit \r\n    // const PatientVisit =()=>{\r\n    //     axios\r\n    //         .get(`${baseUrl}patient/visit/visit-detail/${props.patientObj.id}`,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //             const lastVisit = response.data[response.data.length - 1]\r\n    //             if(lastVisit.status===\"PENDING\"){\r\n    //                 visitId= lastVisit.id\r\n    //                 //setCurrentVisit(true)\r\n    //                 setButtonHidden(false)\r\n    //             }else{\r\n    //                 toast.error(\"Patient do not have any active visit\")\r\n    //                 setButtonHidden(true)\r\n    //                 //setCurrentVisit(false)\r\n    //             }\r\n\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });        \r\n    // }\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleSelectedTestGroup = e =>{\r\n        setTests ({...tests,  labTestGroupId: e.target.value});\r\n        const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n        setTest(getTestList[0].labTests)\r\n        // if(e.target.value==='4'){            \r\n        //     setVlRequired(true)\r\n        // }else{\r\n        //     setVlRequired(false) \r\n        // }\r\n    }\r\n    const handleInputChangeObject = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n                      \r\n    }\r\n    const handleInputChangeTest = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        \r\n        if(e.target.value===\"16\"){\r\n            setShowVLIndication(true)\r\n            setVlRequired(true)\r\n            setErrors({...temp, viralLoadIndication:\"\"})\r\n            \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }else{\r\n            setShowVLIndication(false)\r\n            setVlRequired(false) \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }\r\n        //setObjValues ({...objValues,  [e.target.name]: e.target.value});       \r\n    }\r\n\r\n    const addOrder = e => {  \r\n        console.log(errors) \r\n        if(validate()){\r\n            \r\n            tests.visitId=visitId\r\n            setTestOrderList([...testOrderList, tests])\r\n        }\r\n      }\r\n      /* Remove ADR  function **/\r\n      const removeOrder = index => {       \r\n        testOrderList.splice(index, 1);\r\n        setTestOrderList([...testOrderList]);\r\n         \r\n      };\r\n      //Validations of the forms\r\n      const validate = () => {        \r\n        //temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n        temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        //temp.labNumber = tests.labNumber ? \"\" : \"This field is required\"\r\n        //temp.dateResultReceived =  tests.dateResultReceived ? \"\" : \"This field is required\"\r\n        vlRequired && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")\r\n        if(tests.dateResultReceived!==\"\"){\r\n            temp.result = tests.result ? \"\" : \"This field is required\"\r\n        }\r\n        if(tests.dateResultReceived!==\"\"){\r\n            temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        }\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();            \r\n        setSaving(true);\r\n        axios.post(`${baseUrl}laboratory/rde-orders`,testOrderList,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                toast.success(\"Laboratory test order created successful\");\r\n                props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage); \r\n                }                  \r\n            }); \r\n    }\r\n\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Viral Load Order and Result</h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {moduleStatus===\"1\" && (\r\n                <form >\r\n                <div className=\"row\">\r\n                    \r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test Group*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestGroupId\"\r\n                                    id=\"labTestGroupId\"\r\n                                    value={tests.labTestGroupId}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestGroupId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestId\"\r\n                                    id=\"labTestId\"\r\n                                    value={tests.labTestId}\r\n                                    onChange={handleInputChangeTest} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {test.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.labTestName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\"> Date Sample Collected*</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"sampleCollectionDate\"\r\n                                    id=\"sampleCollectionDate\"\r\n                                    value={tests.sampleCollectionDate}\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.sampleCollectionDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">PCR Sample No.</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    //min={0}\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Type</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    //min={0}\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample logged remotely</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    //min={0}\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Sample logged remotely</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    //min={0}\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Sample Received at PCR Lab</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateResultReceived\"\r\n                                    id=\"dateResultReceived\"\r\n                                    value={tests.dateResultReceived}\r\n                                    min={tests.sampleCollectionDate}\r\n                                    onChange={handleInputChange}\r\n                                    //min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\") }\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateResultReceived !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Result </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Result Received </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Order by </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Order by</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Collected by </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Collected by</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Asseyed by </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Asseyed by</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Checked by </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Checked by</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Approved by </Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Date Approved by</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateAssayed\"\r\n                                    id=\"dateAssayed\"\r\n                                    value={tests.dateAssayed}\r\n                                    min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                    onChange={handleInputChange}\r\n                                    //min={tests.sampleCollectionDate}\r\n                                    max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.dateAssayed !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateAssayed}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {tests.dateResultReceived!==\"\" ? (\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"priority\">Result *</Label>\r\n                                <InputGroup>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"result\"\r\n                                    id=\"result\"\r\n                                    value={tests.result}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}                 \r\n                                />\r\n\r\n                                {/* <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                   \r\n                                </InputGroupText> */}\r\n                                </InputGroup>\r\n                                {errors.result !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.result}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                        </Col>\r\n                       ):\"\"\r\n                    }\r\n                    {vlRequired && (\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"vlIndication\">VL Indication*</Label>\r\n                                    <Input\r\n                                    type=\"select\"\r\n                                    name=\"viralLoadIndication\"\r\n                                    id=\"viralLoadIndication\"\r\n                                    value={tests.viralLoadIndication}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {vLIndication.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.viralLoadIndication !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                        </Col>\r\n                        )}\r\n                        <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"priority\">Comment</Label>\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    name=\"comments\"\r\n                                    id=\"comments\"\r\n                                    value={tests.comments}\r\n                                    onChange={handleInputChange}  \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                    >\r\n                                    \r\n                                </Input>\r\n                                \r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={12}>                  \r\n                            <LabelSui as='a' color='black'  className=\"float-end\" onClick={addOrder}  size='tiny' style={{ marginTop:20, marginBottom:20}}>\r\n                                <Icon name='plus' /> Add Test\r\n                            </LabelSui>\r\n                            \r\n                        </Col>\r\n                        <hr/>\r\n                        {/* List of Test Order */}\r\n                        {testOrderList.length >0 \r\n                            ?\r\n                            \r\n                            <List>\r\n                            <Table  striped responsive>\r\n                                <thead >\r\n                                    <tr>\r\n                                        <th>Test Group</th>\r\n                                        <th>Test</th>\r\n                                        <th>Date Sample Collected</th>\r\n                                        <th>Date Asseyed</th>\r\n                                        <th>Date Result Received</th>\r\n                                        <th>VL Indication</th>\r\n                                        <th>Result</th>                                        \r\n                                        <th ></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {testOrderList.map((tests,index) => (\r\n\r\n                                <TestOrdersList\r\n                                    key={index}\r\n                                    index={index}\r\n                                    order={tests}\r\n                                    testGroupObj={testGroup}\r\n                                    vLIndicationObj={vLIndication}\r\n                                    removeOrder={removeOrder}\r\n                                />\r\n                                ))}\r\n                                </tbody>\r\n                                </Table>\r\n                            </List>\r\n                            :\r\n                            \"\"\r\n                        } \r\n                    </Row>\r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={buttonHidden}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={testOrderList.length >0 ? false : true}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n            )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )} \r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\nfunction TestOrdersList({\r\n    order,\r\n    index,\r\n    removeOrder,\r\n    testGroupObj,\r\n    vLIndicationObj,\r\n  }) {\r\n    \r\n    const testGroupName= testGroupObj.find((x)=> x.id===parseInt(order.labTestGroupId))\r\n    const testName= testGroupName.labTests.find((x)=> x.id===parseInt(order.labTestId))\r\n    const vLIndication=vLIndicationObj.length>0 ?\r\n    vLIndicationObj.find((x)=> x.id===parseInt(order.viralLoadIndication)) : {}\r\n\r\n    return (\r\n            <tr>\r\n                <th>{testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th>\r\n                <th>{testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? vLIndication.display :  testName.labTestName}</th>\r\n                <th>{order.sampleCollectionDate}</th>\r\n                <th>{order.dateAssayed}</th>\r\n                <th>{order.dateResultReceived}</th>\r\n                <th>{vLIndication && vLIndication.display ? vLIndication.display : \"\"}</th>\r\n                <th>{order.result}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabOrderResult\\LabOrderResult.js",["1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Edit from '@material-ui/icons/Edit'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\nimport { Icon,} from 'semantic-ui-react'\r\nimport Select from 'react-select'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    //let =\"\"\r\n    const patientObj = props.patientObj;\r\n    //const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    //const [test, setTest] = useState([]);\r\n    //const [vlRequired, setVlRequired]=useState(false)\r\n    const [priority, setPriority]=useState([])\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    //const [labNumberOption, setLabNumberOption] = useState(\"\")\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    //const [showVLIndication, setShowVLIndication] = useState(false);\r\n    const [labNumbers, setLabNumbers] = useState([]);//\r\n    const [selectedOption, setSelectedOption] = useState([]);\r\n    const [labTestOptions, setLabTestOptions] = useState([]);\r\n    let testsOptions=[]\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        comments: \"\",\r\n                                        dateAssayed: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateResultReceived:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: \"\",\r\n                                        visitId:\"\" ,\r\n                                        checkedBy: \"\",\r\n                                        clinicianName: \"\",\r\n                                        dateChecked: \"\",\r\n                                        dateResultReported: \"\",\r\n                                        id: \"\",\r\n                                        orderId: \"\",\r\n                                        resultReportedBy: \"\",\r\n                                        sampleNumber:\"\"\r\n\r\n                                    })\r\n                                    \r\n    useEffect(() => {           \r\n        CheckLabModule();\r\n        TestGroup();\r\n        PriorityOrder();\r\n        ViraLoadIndication();\r\n        GetPatientDTOObj(); \r\n        CheckEACStatus();  \r\n        LabNumbers();\r\n    }, [props.patientObj.id, tests.labTestId]);\r\n    const GetPatientDTOObj =()=>{\r\n            axios\r\n               .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                   const patientDTO= response.data.enrollment\r\n                   setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n                   //setEacStatusObj(response.data);\r\n                   //console.log(enrollDate)\r\n               })\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n    } \r\n    //Get list of LabNumbers\r\n    const LabNumbers =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/lab-numbers`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLabNumbers(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtestgroups`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setTestGroup(response.data);                \r\n                response.data.map((x)=> {                    \r\n                    x.labTests.map((x2)=>{\r\n                        testsOptions.push({ value: x2.id, label: x2.labTestName,testGroupId:x.id, testGroupName:x.groupName, sampleType:x2.sampleType },)\r\n                    })\r\n                    //console.log(testsOptions)\r\n                })\r\n                setLabTestOptions(testsOptions)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Load the tests of all Laboratory\r\n    //Get list of Test Group\r\n    const PriorityOrder =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/TEST_ORDER_PRIORITY`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPriority(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    // const handleSelectedTestGroup = e =>{\r\n    //     setTests ({...tests,  labTestGroupId: e.target.value});\r\n    //     const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n    //     setTest(getTestList[0].labTests.filter((x)=> x.id!==16))\r\n    //     // if(e.target.value==='4'){            \r\n    //     //     setVlRequired(true)\r\n    //     // }else{\r\n    //     //     setVlRequired(false) \r\n    //     // }\r\n    // }\r\n    const handleInputChangeObject = e => {\r\n        setSelectedOption(e)\r\n        tests.labTestGroupId=e.testGroupId\r\n        tests.labTestId = e.value               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n                      \r\n    }\r\n    // const handleInputChangeLabNumber = e => {\r\n    //     labNumberOption=e.target.value\r\n    //     setLabNumberOption(labNumberOption)\r\n                      \r\n    // }\r\n    // const handleInputChangeTest = e => {\r\n    //     setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        \r\n    //     if(e.target.value===\"16\"){\r\n    //         setShowVLIndication(true)\r\n    //         setVlRequired(true)\r\n    //         setErrors({...temp, viralLoadIndication:\"\"})\r\n            \r\n    //         setTests ({...tests,  labTestId: e.target.value});\r\n    //     }else{\r\n    //         setShowVLIndication(false)\r\n    //         setVlRequired(false) \r\n    //         setTests ({...tests,  labTestId: e.target.value});\r\n    //     }\r\n    //     //setObjValues ({...objValues,  [e.target.name]: e.target.value});       \r\n    // }\r\n\r\n    const addOrder = e => {  \r\n        if(validate()){\r\n            tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\") \r\n            tests.dateResultReceived = tests.dateResultReceived !==\"\" ? moment(tests.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\") :\"\"\r\n            \r\n            tests.visitId=visitId\r\n            \r\n            setTestOrderList([...testOrderList, tests])\r\n            setTests({\r\n                comments: \"\",\r\n                dateAssayed: \"\",\r\n                labNumber: \"\",\r\n                sampleNumber:\"\",\r\n                labTestGroupId: \"\",\r\n                labTestId: \"\",\r\n                dateResultReceived:\"\",\r\n                patientId:props.patientObj?props.patientObj.id:\"\",\r\n                result: \"\",\r\n                sampleCollectionDate: \"\",\r\n                viralLoadIndication: \"\",\r\n                visitId:\"\" ,\r\n                checkedBy: \"\",\r\n                clinicianName: \"\",\r\n                dateChecked: \"\",\r\n                dateResultReported: \"\",\r\n                id: \"\",\r\n                orderId: \"\",\r\n                resultReportedBy: \"\",\r\n            })\r\n        }\r\n    }\r\n    /* Remove ADR  function **/\r\n    const removeOrder = index => {       \r\n    testOrderList.splice(index, 1);\r\n    setTestOrderList([...testOrderList]);\r\n        \r\n    };\r\n    /* Remove ADR  function **/\r\n    const editTestOrder = (order, index) => { \r\n        //console.log(order)\r\n        setTests({...order})      \r\n        testOrderList.splice(index, 1);\r\n        setTestOrderList([...testOrderList]);\r\n            \r\n    };\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n        //temp.dateAssayed = tests.dateAssayed ? \"\" : \"This field is required\"\r\n        temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n        temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        temp.sampleNumber = tests.sampleNumber ? \"\" : \"This field is required\"\r\n        temp.sampleCollectionDate =  tests.sampleCollectionDate ? \"\" : \"This field is required\"\r\n        tests.labTestId==='16' && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")\r\n        {tests.dateResultReceived!==\"\" && (temp.result = tests.result ? \"\" : \"This field is required\")}\r\n        {tests.result!==\"\" && (temp.dateResultReceived = tests.dateResultReceived ? \"\" : \"This field is required\")}\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();            \r\n        setSaving(true);\r\n        tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\") \r\n        tests.dateResultReceived = tests.dateResultReceived !==\"\" ? moment(tests.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\") :\"\"\r\n        axios.post(`${baseUrl}laboratory/rde-orders`,testOrderList,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                props.LabOrders();\r\n                toast.success(\"Laboratory order & result created successful!\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                setTests({\r\n                    comments: \"\",\r\n                    dateAssayed: \"\",\r\n                    labNumber: \"\",\r\n                    sampleNumber:\"\",\r\n                    labTestGroupId: \"\",\r\n                    labTestId: \"\",\r\n                    dateResultReceived:\"\",\r\n                    patientId:props.patientObj?props.patientObj.id:\"\",\r\n                    result: \"\",\r\n                    sampleCollectionDate: \"\",\r\n                    viralLoadIndication: \"\",\r\n                    visitId:\"\" ,\r\n                    checkedBy: \"\",\r\n                    clinicianName: \"\",\r\n                    dateChecked: \"\",\r\n                    dateResultReported: \"\",\r\n                    id: \"\",\r\n                    orderId: \"\",\r\n                    resultReportedBy: \"\",\r\n                })\r\n                props.setActiveContent({...props.activeContent, route:'laboratoryOrderResult', activeTab:\"history\"})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }else{\r\n                    toast.error(\"Something went wrong, please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                }                  \r\n            }); \r\n    }\r\n\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Laboratory Order and Result </h2>\r\n        </div>\r\n        \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n                <form >\r\n                <div className=\"row\">\r\n                <Row>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">laboratory Number</Label>                                \r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                >\r\n                                     <option value=\"\">Select </option>\r\n                                        \r\n                                        {labNumbers.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.labNumber}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                </Input>\r\n                                \r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Number <span style={{ color:\"red\"}}> *</span></Label>                                \r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"sampleNumber\"\r\n                                    id=\"sampleNumber\"\r\n                                    //min={0}\r\n                                    value={tests.sampleNumber}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.sampleNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    {/* <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"testGroup\">Select Test Group*</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"labTestGroupId\"\r\n                                    id=\"labTestGroupId\"\r\n                                    value={tests.labTestGroupId}\r\n                                    onChange={handleSelectedTestGroup} \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                    >\r\n                                    <option value=\"\">Select </option>\r\n                                                    \r\n                                        {testGroup.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.groupName}\r\n                                            </option>\r\n                                        ))}\r\n                                </Input>\r\n                                {errors.labTestGroupId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col> */}\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"testGroup\">Select Test <span style={{ color:\"red\"}}> *</span></Label>\r\n                           \r\n                            <Select\r\n                                //value={selectedOption}\r\n                                onChange={handleInputChangeObject}\r\n                                options={labTestOptions}\r\n                                theme={(theme) => ({\r\n                                    ...theme,\r\n                                    borderRadius: '0.25rem',\r\n                                    border: \"1px solid #014D88\",\r\n                                    colors: {\r\n                                      ...theme.colors,\r\n                                      primary25: '#014D88',\r\n                                      primary: '#014D88',\r\n                                    },\r\n                                  })}\r\n                            />\r\n                            {errors.labTestId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.labTestId}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col> \r\n                    {tests.labTestId==='16' && (\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">VL Indication <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"viralLoadIndication\"\r\n                                id=\"viralLoadIndication\"\r\n                                value={tests.viralLoadIndication}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                                \r\n                                    {vLIndication.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.viralLoadIndication !==\"\" ? (\r\n                                <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    )}                   \r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\"> Date Sample Collected <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"sampleCollectionDate\"\r\n                                id=\"sampleCollectionDate\"\r\n                                value={tests.sampleCollectionDate}\r\n                                onChange={handleInputChange}\r\n                                //min={eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' ? eacStatusObj.eacsessionDate :enrollDate}\r\n                                min={moment(enrollDate).format(\"YYYY-MM-DDTHH:mm\")}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DDTHH:mm\")}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.sampleCollectionDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"\">Date Result Received {tests.result!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"\" }</Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"dateResultReceived\"\r\n                                id=\"dateResultReceived\"\r\n                                value={tests.dateResultReceived}\r\n                                //min={tests.sampleCollectionDate}\r\n                                min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DDTHH:mm\")}\r\n                                onChange={handleInputChange}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DDTHH:mm\")}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateResultReceived !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    { tests.labTestId===50 ? \r\n                        (<>\r\n                            <div className=\"form-group  col-md-3\">\r\n                                <FormGroup>\r\n                                    <Label>Result  {tests.dateResultReceived!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"\" }</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"<200\">{\"<200\"}</option>\r\n                                        <option value=\">=200\">{\">=200\"}</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            <Col md={4} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Result {tests.dateResultReceived!==\"\"? (<span style={{ color:\"red\"}}> *</span> ) : \"test\" }</Label>\r\n                                    <InputGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}                 \r\n                                    />\r\n\r\n                                    {/* <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        \r\n                                    </InputGroupText> */}\r\n                                    </InputGroup>\r\n                                    {errors.result !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.result}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </>)\r\n                    }\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Reported by</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"resultReportedBy\"\r\n                                id=\"resultReportedBy\"\r\n                                value={tests.resultReportedBy}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.resultReportedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.resultReportedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Reported Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateResultReported\"\r\n                                id=\"dateResultReported\"\r\n                                value={tests.dateResultReported}\r\n                                min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\")}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateResultReported !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateResultReported}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Checked by</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"checkedBy\"\r\n                                id=\"checkedBy\"\r\n                                value={tests.checkedBy}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.checkedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.checkedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Checked Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateChecked\"\r\n                                id=\"dateChecked\"\r\n                                value={tests.dateChecked}\r\n                                min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\")}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateChecked !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateChecked}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Clinician Name</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"clinicianName\"\r\n                                id=\"clinicianName\"\r\n                                value={tests.clinicianName}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.clinicianName !==\"\" ? (\r\n                                <span className={classes.error}>{errors.clinicianName}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={12}>                  \r\n                        <LabelSui as='a' color='black'  className=\"float-end\" onClick={addOrder}  size='small' style={{ marginTop:20, marginBottom:20}}>\r\n                            <Icon name='plus' /> Add Test\r\n                        </LabelSui>\r\n                        \r\n                    </Col>\r\n                    <hr/>\r\n                    <br/>\r\n                    {/* List of Test Order */}\r\n                    {testOrderList.length >0 \r\n                        ?\r\n                        \r\n                        <List>\r\n                        <Table  striped responsive>\r\n                            <thead >\r\n                                <tr>\r\n                                    <th>Test Group</th>\r\n                                    <th>Test</th>\r\n                                    <th>Date Sample Collected</th>\r\n                                    <th>Date Result Received</th>\r\n                                    <th>Result</th>                                        \r\n                                    <th ></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {testOrderList.map((tests,index) => (\r\n\r\n                            <TestOrdersList\r\n                                key={index}\r\n                                index={index}\r\n                                order={tests}\r\n                                testGroupObj={testGroup}\r\n                                removeOrder={removeOrder}\r\n                                editTestOrder={editTestOrder}\r\n                            />\r\n                            ))}\r\n                            </tbody>\r\n                            </Table>\r\n                            <br/>\r\n                            <br/>\r\n                        </List>\r\n                        :\r\n                        \"\"\r\n                    } \r\n                </Row>\r\n\r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={buttonHidden}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={testOrderList.length >0 && !saving ? false : true}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n            {/* )} */}\r\n            {/* {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )}  */}\r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\nfunction TestOrdersList({\r\n    order,\r\n    index,\r\n    removeOrder,\r\n    testGroupObj,\r\n    editTestOrder\r\n  }) {\r\n    \r\n    const testGroupName= testGroupObj.find((x)=> x.id===parseInt(order.labTestGroupId))\r\n    const testName= testGroupName.labTests.find((x)=> x.id===parseInt(order.labTestId))\r\n    \r\n\r\n    return (\r\n            <tr>\r\n                <th>{testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th>\r\n                <th>{testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? testName.labTestName :  testName.labTestName}</th>\r\n                <th>{order.sampleCollectionDate}</th>\r\n                {/* <th>{order.dateAssayed}</th> */}\r\n                <th>{order.dateResultReceived!==\"\" && order.dateResultReceived!=='Invalid date' ? order.dateResultReceived :\"\"}</th>\r\n\r\n                <th>{order.result!==\"\" ? order.result : \"\"}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"info\" onClick={() =>editTestOrder(order, index)}>\r\n                        <Edit fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                </th>\r\n            </tr> \r\n    );\r\n}\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrderResult.js",["1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\n// import IconButton from '@mui/material/IconButton';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\n// import {Alert } from \"react-bootstrap\";\r\n// import { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    //let labNumberOption=\"\"\r\n    const patientObj = props.patientObj;\r\n    //const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [testGroup, setTestGroup] = useState([]);\r\n    const [test, setTest] = useState([]);\r\n    const [vlRequired, setVlRequired]=useState(false)\r\n    const [showResult, setShowResult]=useState(false)\r\n    const [showPcrLabDetail, setShowPcrLabDetail]=useState(false)\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    const [showVLIndication, setShowVLIndication] = useState(false);\r\n    const [labTestDetail, setLabTestDetail]=useState([])\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [labNumberOption, setLabNumberOption] = useState(\"\")\r\n    const [labNumbers, setLabNumbers] = useState([]);//\r\n    const [pcrs, setPcrs] = useState([]);//\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n            approvedBy: \"\",\r\n            assayedBy: \"\",\r\n            checkedBy: \"\",\r\n            comments: \"\",\r\n            dateApproved: \"\",\r\n            dateAssayedBy: \"\",\r\n            dateCheckedBy: \"\",\r\n            dateCollectedBy: \"\",\r\n            dateOrderBy: \"\",\r\n            dateReceivedAtPcrLab: \"\",\r\n            dateResultReceived: \"\",\r\n            dateSampleLoggedRemotely: \"\",\r\n            id: \"\",\r\n            labNumber: \"\",\r\n            labTestGroupId: \"\",\r\n            labTestId: \"\",\r\n            orderBy: \"\",\r\n            patientId: props.patientObj?props.patientObj.id:\"\",\r\n            pcrLabName: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            result: \"\",\r\n            sampleCollectedBy: \"\",\r\n            sampleCollectionDate: \"\",\r\n            sampleLoggedRemotely: \"\",\r\n            sampleTypeId: \"\",\r\n            viralLoadIndication: \"\"\r\n    })\r\n    useEffect(() => {\r\n        GetPatientDTOObj()   \r\n        CheckLabModule();\r\n        ViraLoadIndication();\r\n        LabTestDetail();\r\n        CheckEACStatus();  \r\n        LabNumbers(); \r\n        PCRLabList(); \r\n    }, [props.patientObj.id]);\r\n    //Get list of LabNumbers\r\n    const LabNumbers =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/lab-numbers`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLabNumbers(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n               //setEacStatusObj(response.data);\r\n               console.log(enrollDate)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n} \r\n    //Get list of LabNumbers\r\n    const PCRLabList =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/get-prclabs/`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setPcrs(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    const LabTestDetail =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtests/viral%20load`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {      \r\n                setLabTestDetail(response.data.sampleType);\r\n                setTestOrderList(response.data)\r\n                tests.labTestGroupId= response.data.labTestGroupId\r\n                tests.labTestId= response.data.id \r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }  \r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n   \r\n    // const PatientVisit =()=>{\r\n    //     axios\r\n    //         .get(`${baseUrl}patient/visit/visit-detail/${props.patientObj.id}`,\r\n    //             { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //         )\r\n    //         .then((response) => {\r\n    //             const lastVisit = response.data[response.data.length - 1]\r\n    //             if(lastVisit.status===\"PENDING\"){\r\n    //                 visitId= lastVisit.id\r\n    //                 //setCurrentVisit(true)\r\n    //                 setButtonHidden(false)\r\n    //             }else{\r\n    //                 toast.error(\"Patient do not have any active visit\")\r\n    //                 setButtonHidden(true)\r\n    //                 //setCurrentVisit(false)\r\n    //             }\r\n\r\n    //         })\r\n    //         .catch((error) => {\r\n    //         //console.log(error);\r\n    //         });        \r\n    // }\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const handleSelectedTestGroup = e =>{\r\n        setTests ({...tests,  labTestGroupId: e.target.value});\r\n        const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n        setTest(getTestList[0].labTests)\r\n        // if(e.target.value==='4'){            \r\n        //     setVlRequired(true)\r\n        // }else{\r\n        //     setVlRequired(false) \r\n        // }\r\n    }\r\n    const handleInputChangeObject = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n        if(e.target.name==='dateReceivedAtPcrLab'){\r\n            const dateReceivedAtPcrLab = moment(e.target.value).format(\"YYYY-MM-DD HH:MM:SS\")   //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: dateReceivedAtPcrLab});\r\n        }\r\n        if(e.target.name==='dateResultReceived'){\r\n            const dateResultReceived = moment(e.target.value).format(\"YYYY-MM-DD HH:MM:SS\")   //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: dateResultReceived});\r\n        }\r\n        // if(e.target.name==='pcrLabName'){\r\n        //     setTests ({...tests,  [e.target.name]: e.target.value});\r\n        // }\r\n        //setTests ({...tests,  [e.target.name]: e.target.value});\r\n                      \r\n    }\r\n    const handleInputChangeLabNumber = e => {\r\n        labNumberOption=e.target.value\r\n        setLabNumberOption(labNumberOption)\r\n                      \r\n    }\r\n    const handleInputChangeTest = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        \r\n        if(e.target.value===\"16\"){\r\n            setShowVLIndication(true)\r\n            setVlRequired(true)\r\n            setErrors({...temp, viralLoadIndication:\"\"})\r\n            \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }else{\r\n            setShowVLIndication(false)\r\n            setVlRequired(false) \r\n            setTests ({...tests,  labTestId: e.target.value});\r\n        }\r\n        //setObjValues ({...objValues,  [e.target.name]: e.target.value});       \r\n    }\r\n\r\n      //Validations of the forms\r\n      const validate = () => {  \r\n        \r\n        temp.sampleTypeId = tests.sampleTypeId ? \"\" : \"This field is required\"\r\n        temp.sampleCollectionDate =  tests.sampleCollectionDate ? \"\" : \"This field is required\"\r\n        temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\"\r\n        temp.sampleNumber = tests.sampleNumber ? \"\" : \"This field is required\"\r\n        temp.sampleCollectedBy = tests.sampleCollectedBy ? \"\" : \"This field is required\"\r\n        temp.dateOrderBy = tests.dateOrderBy ? \"\" : \"This field is required\"\r\n        temp.orderBy = tests.orderBy ? \"\" : \"This field is required\"\r\n\r\n        showResult && (temp.dateResultReceived = tests.dateResultReceived ? \"\" : \"This field is required\")\r\n        showResult && (temp.assayedBy = tests.assayedBy ? \"\" : \"This field is required\")\r\n        showResult && (temp.result = tests.result ? \"\" : \"This field is required\")\r\n        showResult && (temp.dateAssayedBy = tests.dateAssayedBy ? \"\" : \"This field is required\")\r\n\r\n\r\n        showPcrLabDetail && ( temp.dateCheckedBy = tests.dateCheckedBy ? \"\" : \"This field is required\")\r\n        //showPcrLabDetail && (temp.dateCollectedBy =  tests.dateCollectedBy ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && tests.sampleLoggedRemotely ==='1' && (temp.dateSampleLoggedRemotely = tests.dateSampleLoggedRemotely ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.dateReceivedAtPcrLab = tests.dateReceivedAtPcrLab ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.pcrLabSampleNumber = tests.pcrLabSampleNumber ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.pcrLabName =  tests.pcrLabName ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.dateApproved = tests.dateApproved ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.sampleLoggedRemotely = tests.sampleLoggedRemotely ? \"\" : \"This field is required\")\r\n        showPcrLabDetail &&  (temp.checkedBy = tests.checkedBy ? \"\" : \"This field is required\")\r\n        showPcrLabDetail && (temp.approvedBy = tests.approvedBy ? \"\" : \"This field is required\")\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){\r\n            //tests.labNumber=labNumberOption+\"/\"+tests.labNumber\r\n            tests.labTestGroupId= testOrderList.labTestGroupId\r\n            tests.labTestId= testOrderList.id\r\n            //tests.pcrLabSampleNumber=tests.pcrLabName\r\n            tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")\r\n            tests.dateResultReceived =tests.dateResultReceived!==null && tests.dateResultReceived!==\"\" ? moment(tests.dateResultReceived).format(\"YYYY-MM-DD HH:MM:SS\") : \"\"\r\n            tests.dateReceivedAtPcrLab =tests.dateReceivedAtPcrLab!==null && tests.dateReceivedAtPcrLab!==\"\" ? moment(tests.dateReceivedAtPcrLab).format(\"YYYY-MM-DD HH:MM:SS\") : \"\"\r\n            setSaving(true);        \r\n            //if(showResult){\r\n                axios.post(`${baseUrl}laboratory/vl-results`,tests,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    props.LabOrders();\r\n                    toast.success(\"Viral Load order & result created successful!\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                    setTests({\r\n                        approvedBy: \"\",\r\n                        assayedBy: \"\",\r\n                        checkedBy: \"\",\r\n                        comments: \"\",\r\n                        dateApproved: \"\",\r\n                        dateAssayedBy: \"\",\r\n                        dateCheckedBy: \"\",\r\n                        dateCollectedBy: \"\",\r\n                        dateOrderBy: \"\",\r\n                        dateReceivedAtPcrLab: \"\",\r\n                        dateResultReceived: \"\",\r\n                        dateSampleLoggedRemotely: \"\",\r\n                        id: \"\",\r\n                        labNumber: \"\",\r\n                        labTestGroupId: \"\",\r\n                        labTestId: \"\",\r\n                        orderBy: \"\",\r\n                        patientId: props.patientObj?props.patientObj.id:\"\",\r\n                        pcrLabName: \"\",\r\n                        pcrLabSampleNumber: \"\",\r\n                        result: \"\",\r\n                        sampleCollectedBy: \"\",\r\n                        sampleCollectionDate: \"\",\r\n                        sampleLoggedRemotely: \"\",\r\n                        sampleTypeId: \"\",\r\n                        viralLoadIndication: \"\",\r\n                        sampleNumber:\"\"\r\n                    })\r\n                    props.setActiveContent({...props.activeContent, route:'laboratoryViralLoadOrderResult', activeTab:\"history\"})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                    }else{\r\n                        toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n                    }                  \r\n                }); \r\n            \r\n           \r\n        }\r\n    }\r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setShowResult(true)\r\n        }else{\r\n            tests.assayedBy=\"\"\r\n            tests.dateAssayedBy=\"\" \r\n            tests.dateResultReceived=\"\"\r\n            tests.result=\"\" \r\n            tests.comments=\"\"\r\n            //Apply to PCR lab fields\r\n            tests.pcrLabName=\"\" \r\n            tests.pcrLabSampleNumber=\"\"\r\n            tests.sampleLoggedRemotely=\"\"\r\n            tests.dateSampleLoggedRemotely=\"\"\r\n            tests.dateSampleLoggedRemotely=\"\"\r\n            tests.dateReceivedAtPcrLab=\"\" \r\n            tests.checkedBy=\"\" \r\n            tests.dateCheckedBy=\"\" \r\n            tests.approvedBy=\"\"\r\n            tests.dateApproved=\"\"\r\n            setShowResult(false)\r\n            setShowPcrLabDetail(false)\r\n        }\r\n    }\r\n    const handleCheckBoxPCR =e =>{\r\n        if(e.target.checked){\r\n            setShowPcrLabDetail(true)\r\n        }else{\r\n            tests.pcrLabName=\"\" \r\n            tests.pcrLabSampleNumber=\"\"\r\n            tests.sampleLoggedRemotely=\"\"\r\n            tests.dateSampleLoggedRemotely=\"\"\r\n            tests.dateSampleLoggedRemotely=\"\"\r\n            tests.dateReceivedAtPcrLab=\"\" \r\n            tests.checkedBy=\"\" \r\n            tests.dateCheckedBy=\"\" \r\n            tests.approvedBy=\"\"\r\n            tests.dateApproved=\"\"\r\n            setShowPcrLabDetail(false)\r\n        }\r\n    }\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Viral Load Order and Result</h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n                <form >\r\n                <div className=\"row\">\r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Laboratory Number</Label>                                \r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"labNumber\"\r\n                                id=\"labNumber\"\r\n                                value={tests.labNumber}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            >\r\n                                    <option value=\"\">Select </option>\r\n                                    \r\n                                    {labNumbers.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.labNumber}\r\n                                        </option>\r\n                                    ))}\r\n\r\n                            </Input>\r\n                            \r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"labNumber\">Sample Number <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"text\"\r\n                                name=\"sampleNumber\"\r\n                                id=\"sampleNumber\"\r\n                                value={tests.sampleNumber}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                >\r\n                                \r\n                            </Input>\r\n                            {errors.sampleNumber !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleNumber}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">VL Indication <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"viralLoadIndication\"\r\n                                id=\"viralLoadIndication\"\r\n                                value={tests.viralLoadIndication}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                                \r\n                                    {vLIndication.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.viralLoadIndication !==\"\" ? (\r\n                                <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Type <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"sampleTypeId\"\r\n                                    id=\"sampleTypeId\"\r\n                                    //min={0}\r\n                                    value={tests.sampleTypeId}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">Select </option>\r\n                                    {labTestDetail.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.sampleTypeName}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.sampleTypeId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleTypeId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Order by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"orderBy\"\r\n                                id=\"orderBy\"\r\n                                value={tests.orderBy}\r\n                                \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.orderBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.orderBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Ordered  <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateOrderBy\"\r\n                                        id=\"dateOrderBy\"\r\n                                        value={tests.dateOrderBy}\r\n                                        onChange={handleInputChange}\r\n                                        min={moment(enrollDate).format(\"YYYY-MM-DD\")}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        required\r\n                                    />\r\n                                    {errors.dateOrderBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOrderBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Collected by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"sampleCollectedBy\"\r\n                                id=\"sampleCollectedBy\"\r\n                                value={tests.sampleCollectedBy}\r\n                                \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.sampleCollectedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\"> Date Sample Collected <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"sampleCollectionDate\"\r\n                                id=\"sampleCollectionDate\"\r\n                                value={tests.sampleCollectionDate}\r\n                                onChange={handleInputChange}\r\n                                min={tests.dateOrderBy!==null && tests.dateOrderBy!==''? moment(tests.dateOrderBy).format(\"YYYY-MM-DD HH:MM:SS\") :moment(enrollDate).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                //min={eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' ? eacStatusObj.eacsessionDate :enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.sampleCollectionDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"mt-4 mb-3\">\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                       \r\n                                name=\"asResult\"\r\n                                id=\"asResult\"\r\n                                value=\"asResult\"\r\n                                onChange={handleCheckBox}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Has Result ?\r\n                                </label>\r\n                        </div>\r\n                    </Col>\r\n                    <hr/>\r\n                    </Row>\r\n                    {showResult && (<>\r\n                        <Row>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Assayed by <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"assayedBy\"\r\n                                        id=\"assayedBy\"\r\n                                        value={tests.assayedBy}                              \r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        required\r\n                                    />\r\n                                    {errors.assayedBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.assayedBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Assayed <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"dateAssayedBy\"\r\n                                        id=\"dateAssayedBy\"\r\n                                        value={tests.dateAssayedBy}\r\n                                        min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\")}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        max= {tests.dateResultReceived!==''? tests.dateResultReceived :moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        required\r\n                                    />\r\n                                    {errors.dateAssayedBy !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateAssayedBy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col> \r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"encounterDate\">Date Result Received <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"datetime-local\"\r\n                                        name=\"dateResultReceived\"\r\n                                        id=\"dateResultReceived\"\r\n                                        value={tests.dateResultReceived}\r\n                                        onChange={handleInputChange}\r\n                                        //min={tests.sampleCollectionDate}\r\n                                        min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        required\r\n                                    />\r\n                                    {errors.dateResultReceived !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateResultReceived}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col> \r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Result <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <InputGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"result\"\r\n                                        id=\"result\"\r\n                                        value={tests.result}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}                 \r\n                                    />\r\n\r\n                                    {/* <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        \r\n                                    </InputGroupText> */}\r\n                                    </InputGroup>\r\n                                    {errors.result !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.result}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6} className=\"form-group mb-3\">\r\n                                <FormGroup>\r\n                                    <Label for=\"priority\">Comment</Label>\r\n                                    <Input\r\n                                        type=\"textarea\"\r\n                                        name=\"comments\"\r\n                                        id=\"comments\"\r\n                                        value={tests.comments}\r\n                                        onChange={handleInputChange}  \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    <Row>\r\n                        <Col md={6} className=\"mt-4 mb-3\">\r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                       \r\n                                    name=\"asResultPCR\"\r\n                                    id=\"asResultPCR\"\r\n                                    value=\"asResultPCR\"\r\n                                    onChange={handleCheckBoxPCR}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Has PCR Lab Details ?\r\n                                    </label>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n                    </>)} \r\n                    {showPcrLabDetail && (<>\r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">PCR Lab Name <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"pcrLabName\"\r\n                                id=\"pcrLabName\"\r\n                                value={tests.pcrLabName}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                {pcrs.map((value) => (\r\n                                        <option key={value.labNo} value={value.labNo}>\r\n                                            {value.name}\r\n                                        </option>\r\n                                    ))}             \r\n                                    \r\n                            </Input>\r\n                            {errors.pcrLabName !==\"\" ? (\r\n                                <span className={classes.error}>{errors.pcrLabName}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        {tests.pcrLabName!==\"\" && (\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">PCR Sample No.</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"pcrLabSampleNumber\"\r\n                                id=\"pcrLabSampleNumber\"\r\n                                value={tests.pcrLabSampleNumber}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                //disabled\r\n                            />\r\n                           \r\n                        </FormGroup>\r\n                        \r\n                        )}\r\n                         {errors.pcrLabSampleNumber !==\"\" ? (\r\n                                <span className={classes.error}>{errors.pcrLabSampleNumber}</span>\r\n                            ) : \"\" }\r\n                    </Col>\r\n                   \r\n                   \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>  \r\n                            <Label for=\"encounterDate\">Sample logged remotely </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"sampleLoggedRemotely\"\r\n                                id=\"sampleLoggedRemotely\"\r\n                                //min={0}\r\n                                value={tests.sampleLoggedRemotely}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                <option value=\"1\">Yes </option>\r\n                                <option value=\"0\">No </option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Col> \r\n                    {tests.sampleLoggedRemotely ==='1' && (\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Sample logged remotely <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateSampleLoggedRemotely\"\r\n                                id=\"dateSampleLoggedRemotely\"\r\n                                //min={0}\r\n                                value={tests.dateSampleLoggedRemotely}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateSampleLoggedRemotely !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateSampleLoggedRemotely}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    )}\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Sample Received at PCR Lab <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                name=\"dateReceivedAtPcrLab\"\r\n                                id=\"dateReceivedAtPcrLab\"\r\n                                value={tests.dateReceivedAtPcrLab}\r\n                                min={tests.sampleCollectionDate}\r\n                                onChange={handleInputChange}\r\n                                //min={moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD HH:MM:SS\")}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateReceivedAtPcrLab !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateReceivedAtPcrLab}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Checked by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"checkedBy\"\r\n                                id=\"checkedBy\"\r\n                                value={tests.checkedBy}\r\n                               \r\n                                onChange={handleInputChange}\r\n                               \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.checkedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.checkedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Checked <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateCheckedBy\"\r\n                                id=\"dateCheckedBy\"\r\n                                value={tests.dateCheckedBy}\r\n                                min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChange}\r\n                                //min={tests.sampleCollectionDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateCheckedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateCheckedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Approved by <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"approvedBy\"\r\n                                id=\"approvedBy\"\r\n                                value={tests.approvedBy}\r\n                               \r\n                                onChange={handleInputChange}\r\n                                \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.approvedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.approvedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Approved <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateApproved\"\r\n                                id=\"dateApproved\"\r\n                                value={tests.dateApproved}\r\n                                min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChange}\r\n                                //min={tests.sampleCollectionDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateApproved !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateApproved}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    </Row>           \r\n                    </>)}   \r\n                    \r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={buttonHidden}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        disabled={saving}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n           \r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Laboratory;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrderResultHistory.js",["1124"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react';\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst LabHistory = (props) => {    \r\n  const [open, setOpen] = React.useState(false)\r\n  const [saving, setSaving] = useState(false)\r\n  const [record, setRecord] = useState(null)\r\n   const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n      //CheckLabModule();\r\n    }, [props.orderList]);\r\n\r\n      const onClickHome = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'lab-view-viral-load-order-result', id:row.id, activeTab:\"\", actionType:actionType, obj:row})\r\n     }\r\n\r\n     const LoadDeletePage = (row) =>{ \r\n      setSaving(true)   \r\n      axios.delete(`${baseUrl}laboratory/rde-orders/tests/${row.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              toast.success(\"Record Deleted Successfully\");\r\n              props.LabOrders()\r\n              toggle()\r\n              setSaving(false)\r\n          })\r\n          .catch((error) => {\r\n              if(error.response && error.response.data){\r\n                  let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                  toast.error(errorMessage);\r\n                }\r\n                else{\r\n                  toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n          }); \r\n   }\r\n   const LoadModal =(row)=>{\r\n    toggle()\r\n    setRecord(row)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n            <br/>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n              <MaterialTable\r\n              icons={tableIcons}\r\n                title=\"Laboratory Viral Load Order and Result  History\"\r\n                columns={[\r\n                // { title: \" ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Test Group\",\r\n                    field: \"testGroup\",\r\n                  },\r\n                  { title: \"Test Name\", field: \"testName\", filtering: false },\r\n                  { title: \"Lab Number\", field: \"labNumber\", filtering: false },\r\n                  { title: \"Sample Number\", field: \"sampleNumber\", filtering: false },\r\n                  { title: \"Date Sample Collected\", field: \"sampleCollectionDate\", filtering: false },\r\n                  \r\n                  { title: \"Date Result Received\", field: \"dateResultReceived\", filtering: false },\r\n                  { title: \"Result\", field: \"result\", filtering: false },\r\n                  { title: \"VL Indication\", field: \"viralLoadIndication\", filtering: false },\r\n                  { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n                ]}\r\n                //isLoading={loading}\r\n                data={ props.orderList.map((row) => ({\r\n                    //Id: manager.id,\r\n                    testGroup:row.labTestGroupName,\r\n                    testName: row.labTestName,\r\n                    labNumber: row.labNumber,\r\n                    sampleNumber: row.sampleNumber,\r\n                    sampleCollectionDate: row.sampleCollectionDate,    \r\n                    \r\n                    dateResultReceived: row.dateResultReceived, \r\n                    result: row.result,\r\n                    viralLoadIndication: row.viralLoadIndicationName,\r\n                    Action: \r\n                    \r\n                    <div>\r\n                              <Menu.Menu position='right'  >\r\n                              <Menu.Item >\r\n                                  <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                  <Dropdown item text='Action'>\r\n\r\n                                  <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'view')}><Icon name='eye' />View</Dropdown.Item>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                                      <Dropdown.Item  onClick={()=>LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                              </Dropdown>\r\n                                  </Button>\r\n                              </Menu.Item>\r\n                              </Menu.Menu>\r\n                          </div>\r\n                    }))}\r\n              \r\n                          options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n              />\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Notification!\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4>Are you Sure you want to delete  - <b>{record && record.sampleNumber}</b></h4>\r\n                        \r\n                    </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n                    <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n                    \r\n                </Modal.Footer>\r\n              </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ThirdEac.js",["1125","1126","1127","1128","1129","1130","1131","1132","1133"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\nimport FirstEAC from './EnhancedAdherenceCounseling';\r\nimport ContinueEAC from './SecondEac';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACHistory()\r\n    }, [props.patientObj.id]);\r\n    ///GET LIST OF EAC\r\n    const EACHistory =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}observation/eac/person/current-eac/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n            setObjValues(response.data)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.status='Third'\r\n          axios.post(`${baseUrl}observation/eac`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setHideThird(false)\r\n                  props.setHideFirst(false)                 \r\n                  props.setEacObj(response.data)\r\n                  toast.success(\" Save successful\");\r\n                  props.setActiveContent({...props.activeContent, route:'final-eac'})\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <h4>Second EAC Date {objValues.dateOfEac2}</h4>\r\n                        <br/>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Third EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac3\"\r\n                                id=\"dateOfEac3\"\r\n                                value={objValues.dateOfEac3}\r\n                                onChange={handleInputChange}\r\n                                min={objValues.dateOfEac2}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac3 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac3}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Good\">Good</option> \r\n                                 <option value=\"Fair\">Fair</option> \r\n                                 <option value=\"Poor\">Poor</option> \r\n                                 \r\n                                </Input>\r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Any missed pharmacy drug pick-ups?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Yes\">Yes</option> \r\n                                 <option value=\"No\">No</option> \r\n                                 \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Forgot\">  Forgot</option> \r\n                                 <option value=\"Knowledge/beliefs\">Knowledge/beliefs</option> \r\n                                 <option value=\"Side effects\">Side effects</option> \r\n                                 <option value=\"Physical illness\">Physical illness</option>\r\n                                 <option value=\"Substance use\">Substance use</option> \r\n                                 <option value=\"Depression\">Depression</option> \r\n                                 <option value=\"Pill burden\">Pill burden</option> \r\n                                 <option value=\"Lost/ran out\">Lost/ran out</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention Services</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Education\">  Education</option> \r\n                                 <option value=\"Counseling (ind)\">Counseling (ind)</option> \r\n                                 <option value=\"Counseling (grp)\">Counseling (grp)</option> \r\n                                 <option value=\"Peer support\">Peer support</option>\r\n                                 <option value=\"Treatment buddy\"> Treatment buddy</option> \r\n                                 <option value=\"Extended Drug pick-up\">Extended Drug pick-up</option> \r\n                                 <option value=\"Community ART Group\">Community ART Group</option> \r\n                                 <option value=\"Directly Observed Therapy\">Directly Observed Therapy</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referrals</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Follow Up Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac3===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\ViralLoadOrderResult\\ViralLoadOrder.js",["1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup,Row, Col , CardBody, Card, Table, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport moment from \"moment\";\r\nimport { List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast} from \"react-toastify\";\r\nimport {Alert } from \"react-bootstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\n\r\nconst Laboratory = (props) => {\r\n    let visitId=\"\"\r\n    const patientObj = props.patientObj;\r\n    //const enrollDate = patientObj && patientObj.artCommence ? patientObj.artCommence.visitDate : null\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [labNumber, setLabNum] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [test, setTest] = useState([]);\r\n    const [vlRequired, setVlRequired]=useState(false)\r\n    const [labTestDetail, setLabTestDetail]=useState([])\r\n    //const [currentVisit, setCurrentVisit]=useState(true)\r\n    const [vLIndication, setVLIndication] = useState([]);\r\n    const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n    const [showVLIndication, setShowVLIndication] = useState(false);\r\n    let temp = { ...errors }\r\n    const [tests, setTests]=useState({\r\n\r\n                                        comments: \"\",\r\n                                        labNumber: \"\",\r\n                                        labTestGroupId: \"\",\r\n                                        labTestId: \"\",\r\n                                        dateCollectedBy:\"\",\r\n                                        patientId:props.patientObj?props.patientObj.id:\"\",\r\n                                        sampleCollectedBy:\"\",\r\n                                        sampleTypeId:\"\",\r\n                                        result: \"\",\r\n                                        sampleCollectionDate: null,\r\n                                        viralLoadIndication: 0,\r\n                                        visitId:\"\" \r\n                                    })\r\n                                    \r\n    useEffect(() => {           \r\n        CheckLabModule();\r\n        LabTestDetail();\r\n        ViraLoadIndication();\r\n        GetPatientDTOObj();  \r\n        }, [props.patientObj.id]);\r\n        \r\n        const GetPatientDTOObj =()=>{\r\n            axios\r\n               .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                   const patientDTO= response.data.enrollment\r\n                   setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n                   //setEacStatusObj(response.data);\r\n                   console.log(enrollDate)\r\n               })\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n        } \r\n    //Get list of Test Group\r\n    const LabTestDetail =()=>{\r\n        axios\r\n            .get(`${baseUrl}laboratory/labtests/viral load`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLabTestDetail(response.data.sampleType);\r\n                tests.labTestGroupId= response.data.labTestGroupId\r\n                tests.labTestId= response.data.id \r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    //Check if Module Exist\r\n    const CheckLabModule =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                setModuleStatus(\"1\")\r\n                setButtonHidden(false)\r\n                }\r\n                else{\r\n                    setModuleStatus(\"2\")\r\n                    //toast.error(\"Laboratory module is not install\")\r\n                    setButtonHidden(true)\r\n                }\r\n            }).catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //Get list of Test Group\r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                \r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n   \r\n    const handleInputChangeObject = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        setTests ({...tests,  [e.target.name]: e.target.value});               \r\n    }\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n        //tests.labNumber\r\n        if(e.target.name==='labNumber'){\r\n            const onlyPositiveNumber = e.target.value //Math.abs(e.target.value)\r\n            setTests ({...tests,  [e.target.name]: onlyPositiveNumber});\r\n        }else{\r\n            setTests ({...tests,  [e.target.name]: e.target.value}); \r\n        }\r\n                      \r\n    }\r\n   \r\n    const addOrder = e => {  \r\n        if(validate()){\r\n        tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\")\r\n        tests.sampleCollectionDate = moment(tests.sampleCollectionDate).format(\"YYYY-MM-DD HH:MM:SS\") \r\n            tests.visitId=visitId\r\n            setTestOrderList([...testOrderList, tests])\r\n        }\r\n      }\r\n      /* Remove ADR  function **/\r\n      const removeOrder = index => {       \r\n        testOrderList.splice(index, 1);\r\n        setTestOrderList([...testOrderList]);\r\n         \r\n      };\r\n      //Validations of the forms\r\n      const validate = () => {        \r\n        temp.sampleCollectedBy = tests.sampleCollectedBy ? \"\" : \"This field is required\"\r\n        temp.labNumber = tests.labNumber ? \"\" : \"This field is required\"\r\n        //temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n        temp.sampleTypeId = tests.sampleTypeId ? \"\" : \"This field is required\"\r\n        temp.sampleCollectionDate = tests.sampleCollectionDate ? \"\" : \"This field is required\"\r\n        //temp.dateCollectedBy =  tests.dateCollectedBy ? \"\" : \"This field is required\"\r\n        temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\"\r\n       \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        if(validate()){         \r\n        setSaving(true);\r\n        \r\n        axios.post(`${baseUrl}laboratory/vl-orders`,tests,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n            .then(response => {\r\n                setSaving(false);\r\n                props.LabOrders();\r\n                console.log(props.activeContent)\r\n                toast.success(\"Viral load order created successful\");\r\n                props.setActiveContent({...props.activeContent, route:'laboratoryViralLoadOrderResult', activeTab:\"history\"})\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage); \r\n                }                  \r\n            }); \r\n        }  \r\n    }\r\n\r\n\r\n  return (      \r\n      <div >\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Viral Load Order </h2>\r\n        </div>\r\n     \r\n        <br/>\r\n        <br/>\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            {/* {moduleStatus===\"1\" && ( */}\r\n                <form >\r\n                <div className=\"row\">\r\n                    \r\n                    <Row>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\"> Lab Number(Sample Number )*</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"labNumber\"\r\n                                    id=\"labNumber\"\r\n                                    value={tests.labNumber}\r\n                                    onChange={handleInputChange}\r\n                                   \r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.labNumber !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.labNumber}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"vlIndication\">VL Indication*</Label>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"viralLoadIndication\"\r\n                                id=\"viralLoadIndication\"\r\n                                value={tests.viralLoadIndication}\r\n                                onChange={handleInputChange}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                                \r\n                                    {vLIndication.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>\r\n                            {errors.viralLoadIndication !==\"\" ? (\r\n                                <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                            ) : \"\" }\r\n                             <Input\r\n                                type=\"text\"\r\n                                name=\"labTestGroupId\"\r\n                                id=\"labTestGroupId\"\r\n                                hidden\r\n                                value={tests.labTestGroupId}\r\n                                                \r\n                            />\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"labTestId\"\r\n                                id=\"labTestId\"\r\n                                hidden\r\n                                value={tests.labTestId}\r\n                                                \r\n                            />\r\n                            </FormGroup>\r\n                    </Col>\r\n                    \r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\">Sample Type</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"sampleTypeId\"\r\n                                    id=\"sampleTypeId\"\r\n                                    //min={0}\r\n                                    value={tests.sampleTypeId}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">Select </option>\r\n                                    {labTestDetail.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.sampleTypeName}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.sampleTypeId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleTypeId}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                            <FormGroup>\r\n                                <Label for=\"encounterDate\"> Date Sample Collected*</Label>\r\n                                <Input\r\n                                    type=\"datetime-local\"\r\n                                    name=\"sampleCollectionDate\"\r\n                                    id=\"sampleCollectionDate\"\r\n                                    value={tests.sampleCollectionDate}\r\n                                    onChange={handleInputChange}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    required\r\n                                />\r\n                                {errors.sampleCollectionDate !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sampleCollectionDate}</span>\r\n                                ) : \"\" }\r\n                            </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"sampleCollectedBy\">Collected by *</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"sampleCollectedBy\"\r\n                                id=\"sampleCollectedBy\"\r\n                                value={tests.sampleCollectedBy}                                \r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.sampleCollectedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.sampleCollectedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {/* <Col md={6} className=\"form-group mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"encounterDate\">Date Collected by *</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateCollectedBy\"\r\n                                id=\"dateCollectedBy\"\r\n                                value={tests.dateCollectedBy}\r\n                                min={tests.sampleCollectionDate!==''? tests.sampleCollectionDate :moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChange}\r\n                                //min={tests.sampleCollectionDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateCollectedBy !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateCollectedBy}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </Col> */}\r\n\r\n                    </Row>\r\n                </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={buttonHidden}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        //disabled={testOrderList.length >0 ? false : true}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                </form>\r\n            {/* )}\r\n            {moduleStatus===\"2\" && (\r\n            <>\r\n            <Alert\r\n                variant=\"warning\"\r\n                className=\"alert-dismissible solid fade show\"\r\n            >\r\n                <p>Laboratory Module is not install</p>\r\n            </Alert>\r\n           \r\n            </>\r\n            )}  */}\r\n            </CardBody>\r\n        </Card> \r\n        </div>             \r\n    </div>\r\n  );\r\n}\r\nfunction TestOrdersList({\r\n    order,\r\n    index,\r\n    removeOrder,\r\n    testGroupObj,\r\n    vLIndicationObj,\r\n  }) {\r\n    \r\n    const testGroupName= testGroupObj.find((x)=> x.id===parseInt(order.labTestGroupId))\r\n    const testName= testGroupName.labTests.find((x)=> x.id===parseInt(order.labTestId))\r\n    const vLIndication=vLIndicationObj.length>0 ?\r\n    vLIndicationObj.find((x)=> x.id===parseInt(order.viralLoadIndication)) : {}\r\n\r\n    return (\r\n            <tr>\r\n                <th>{testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th>\r\n                <th>{testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? vLIndication.display :  testName.labTestName}</th>\r\n                <th>{order.sampleCollectionDate}</th>\r\n                <th>{order.dateAssayed}</th>\r\n                <th>{order.dateResultReceived}</th>\r\n                <th>{vLIndication && vLIndication.display ? vLIndication.display : \"\"}</th>\r\n                <th>{order.result}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default Laboratory;\r\n",["1160","1161"],"C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\SecondEac.js",["1162","1163","1164","1165","1166","1167","1168","1169","1170"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\nimport FirstEAC from './EnhancedAdherenceCounseling';\r\nimport ContinueEAC from './SecondEac';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [loading, setLoading] = useState(true)\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACHistory()\r\n    }, [props.patientObj.id]);\r\n    ///GET LIST OF EAC\r\n    const EACHistory =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}observation/eac/person/current-eac/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n            setObjValues(response.data)\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });    \r\n    }\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          objValues.status='Second'\r\n          axios.post(`${baseUrl}observation/eac`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setHideSecond(false)\r\n                  props.setHideThird(true)\r\n                  props.setEacObj(response.data)\r\n                  toast.success(\" Save successful\");\r\n                  //props.setActiveContent('recent-history')\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <h4>First EAC Date  {objValues.dateOfEac1}</h4>\r\n                        <br/>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of Second EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac2\"\r\n                                id=\"dateOfEac2\"\r\n                                value={objValues.dateOfEac2}\r\n                                onChange={handleInputChange}\r\n                                min={objValues.dateOfEac1}\r\n                                //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac2 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac2}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Good\">Good</option> \r\n                                 <option value=\"Fair\">Fair</option> \r\n                                 <option value=\"Poor\">Poor</option> \r\n                                 \r\n                                </Input>\r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Any missed pharmacy drug pick-ups?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Yes\">Yes</option> \r\n                                 <option value=\"No\">No</option> \r\n                                 \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Forgot\">  Forgot</option> \r\n                                 <option value=\"Knowledge/beliefs\">Knowledge/beliefs</option> \r\n                                 <option value=\"Side effects\">Side effects</option> \r\n                                 <option value=\"Physical illness\">Physical illness</option>\r\n                                 <option value=\"Substance use\">Substance use</option> \r\n                                 <option value=\"Depression\">Depression</option> \r\n                                 <option value=\"Pill burden\">Pill burden</option> \r\n                                 <option value=\"Lost/ran out\">Lost/ran out</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention Services</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Education\">  Education</option> \r\n                                 <option value=\"Counseling (ind)\">Counseling (ind)</option> \r\n                                 <option value=\"Counseling (grp)\">Counseling (grp)</option> \r\n                                 <option value=\"Peer support\">Peer support</option>\r\n                                 <option value=\"Treatment buddy\"> Treatment buddy</option> \r\n                                 <option value=\"Extended Drug pick-up\">Extended Drug pick-up</option> \r\n                                 <option value=\"Community ART Group\">Community ART Group</option> \r\n                                 <option value=\"Directly Observed Therapy\">Directly Observed Therapy</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referrals</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Follow Up Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac2===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                   \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\EnhancedAdherenceCounseling.js",["1171","1172","1173","1174","1175","1176","1177","1178","1179"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Icon,Button, } from 'semantic-ui-react'\r\nimport FirstEAC from './EnhancedAdherenceCounseling';\r\nimport ContinueEAC from './SecondEac';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst EAC = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [eacObj, setEacObj] = useState([]);\r\n    const [errors, setErrors] = useState({});\r\n    const [objValues, setObjValues]=useState({\r\n                                                dateOfEac1: null,\r\n                                                dateOfEac2: null,\r\n                                                dateOfEac3: null,\r\n                                                dateOfLastViralLoad: \"\",\r\n                                                lastViralLoad:\"\",\r\n                                                note: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                status: \"First\",\r\n                                                visitId:\"\"\r\n                                            })\r\n    useEffect(() => {\r\n        EACStatus();\r\n        }, []);\r\n    \r\n        ///GET LIST OF FUNCTIONAL%20_STATUS\r\n        // TB STATUS\r\n        const EACStatus =()=>{\r\n        axios\r\n            .get(`${baseUrl}observation/eac/person/${props.patientObj.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setEacObj(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n \r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();        \r\n          setSaving(true);\r\n          axios.post(`${baseUrl}observation/eac`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setEacObj(response.data)\r\n                  props.setHideFirst(true)\r\n                  props.setHideFirst(true)\r\n                  props.setHideSecond(true)\r\n                  toast.success(\" Save successful\");\r\n                  //props.setActiveContent('recent-history')\r\n\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <h2>Enhanced Adherence Counselling </h2>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date Of Last Viral Load</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfLastViralLoad\"\r\n                                id=\"dateOfLastViralLoad\"\r\n                                value={objValues.dateOfLastViralLoad}\r\n                                onChange={handleInputChange}\r\n                                min={enrollDate}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">last Viral Load</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name=\"lastViralLoad\"\r\n                                id=\"lastViralLoad\"\r\n                                value={objValues.lastViralLoad}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                disabled\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Date of EAC </Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Good\">Good</option> \r\n                                 <option value=\"Fair\">Fair</option> \r\n                                 <option value=\"Poor\">Poor</option> \r\n                                 \r\n                                </Input>\r\n                                 \r\n                        </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Any missed pharmacy drug pick-ups?</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Yes\">Yes</option> \r\n                                 <option value=\"No\">No</option> \r\n                                 \r\n                                </Input>\r\n                                \r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Adherence</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Forgot\">  Forgot</option> \r\n                                 <option value=\"Knowledge/beliefs\">Knowledge/beliefs</option> \r\n                                 <option value=\"Side effects\">Side effects</option> \r\n                                 <option value=\"Physical illness\">Physical illness</option>\r\n                                 <option value=\"Substance use\">Substance use</option> \r\n                                 <option value=\"Depression\">Depression</option> \r\n                                 <option value=\"Pill burden\">Pill burden</option> \r\n                                 <option value=\"Lost/ran out\">Lost/ran out</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Intervention Services</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"reasonForDefaulting\"\r\n                                    id=\"reasonForDefaulting\"\r\n                                    //value={attempt.reasonForDefaulting}\r\n                                    //onChange={handleInputChangeAttempt}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                >\r\n                                 <option value=\"\">Select</option> \r\n                                 <option value=\"Education\">  Education</option> \r\n                                 <option value=\"Counseling (ind)\">Counseling (ind)</option> \r\n                                 <option value=\"Counseling (grp)\">Counseling (grp)</option> \r\n                                 <option value=\"Peer support\">Peer support</option>\r\n                                 <option value=\"Treatment buddy\"> Treatment buddy</option> \r\n                                 <option value=\"Extended Drug pick-up\">Extended Drug pick-up</option> \r\n                                 <option value=\"Community ART Group\">Community ART Group</option> \r\n                                 <option value=\"Directly Observed Therapy\">Directly Observed Therapy</option> \r\n                                 <option value=\"Transport\">Transport</option>\r\n                                 <option value=\"Child behavior/refusing Scheduling\">Child behavior/refusing Scheduling</option>\r\n                                 <option value=\"Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma\">Fear disclosure Family/partner Food insecurity Drug stock out Long wait Stigma</option>\r\n                                 <option value=\"Others\">Others</option>\r\n\r\n                                </Input>\r\n                                  \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Referrals</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Follow Up Date</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfEac1\"\r\n                                id=\"dateOfEac1\"\r\n                                value={objValues.dateOfEac1}\r\n                                onChange={handleInputChange}\r\n                                min= {moment(objValues.dateOfLastViralLoad).format(\"YYYY-MM-DD\") }\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                            />\r\n                            {errors.dateOfEac1 !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dateOfEac1}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">Comments</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"note\"\r\n                                id=\"note\"\r\n                                value={objValues.note}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={objValues.dateOfEac1===\"\" ? true : false}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\ViralLoadList.js",["1180","1181","1182","1183","1184","1185","1186","1187","1188","1189"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\nconst LabHistory = (props) => {    \r\n    const [orderList, setOrderList] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        LabOrders()\r\n      }, [props.patientObj.id]);\r\n    //GET LIST OF Patients\r\n    async function LabOrders() {\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}hiv/eac/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setOrderList(response.data);                \r\n            })\r\n            .catch((error) => {  \r\n                setLoading(false)  \r\n            });        \r\n    }\r\n\r\n\r\n    const onClickHome = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'eac-session', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n\r\n     const LoadDeletePage = (row) =>{  \r\n      axios.delete(`${baseUrl}laboratory/rde-orders/tests/${row.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              toast.success(\"Record Deleted Successfully\");\r\n              LabOrders()\r\n          })\r\n          .catch((error) => {\r\n              if(error.response && error.response.data){\r\n                  let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                  toast.error(errorMessage);\r\n                }\r\n                else{\r\n                  toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n          }); \r\n   }\r\n\r\n   //const LabObj = [{\"id\":16,\"orderId\":13,\"patientId\":9,\"visitId\":0,\"labTestGroupId\":4,\"labTestGroupName\":\"Others\",\"labTestId\":16,\"labTestName\":\"Viral Load\",\"labNumber\":\"788\",\"sampleCollectionDate\":\"2022-09-08\",\"dateAssayed\":\"2022-09-09\",\"result\":\"78\",\"dateResultReceived\":\"2022-09-09\",\"comments\":\"good\",\"viralLoadIndication\":297,\"viralLoadIndicationName\":\"Targeted Monitoring\"}]\r\n\r\n\r\n  return (\r\n    <div>\r\n            <br/>\r\n        \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Laboratory Order\"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                // {\r\n                //   title: \"Test Group\",\r\n                //   field: \"testGroup\",\r\n                // },\r\n                { title: \"Test Name\", field: \"testName\", filtering: false },\r\n                { title: \"Lab Number\", field: \"labNumber\", filtering: false },\r\n                { title: \"Viral Load\", field: \"lastViralLoad\", filtering: false },\r\n                { title: \"Result Date\", field: \"dateOfLastViralLoad\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },              \r\n                { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n              ]}\r\n              isLoading={loading}\r\n              data={ orderList.map((row) => ({\r\n                  //Id: manager.id,\r\n                  //testGroup:row.testGroup,\r\n                  testName: row.testName,\r\n                  labNumber: row.labNumber,\r\n                  lastViralLoad: row.lastViralLoad,    \r\n                  dateOfLastViralLoad: row.dateOfLastViralLoad,\r\n                  status: row.status, \r\n                  viralLoadIndication: row.viralLoadIndicationName,\r\n                  Action: \r\n                  (\r\n                    <ButtonGroup variant=\"contained\" \r\n                        aria-label=\"split button\"\r\n                        style={{backgroundColor:'rgb(153, 46, 98)', height:'30px'}}\r\n                        size=\"large\"\r\n                        onClick={()=>onClickHome(row, 'view')}\r\n                    >\r\n                    <Button\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                    >\r\n                       Eac Session\r\n                    </Button>\r\n                    </ButtonGroup>\r\n                  ), \r\n                  // <div>\r\n                  //           <Menu.Menu position='right'  >\r\n                  //           <Menu.Item >\r\n                  //               <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                  //               <Dropdown item text='Action'>\r\n\r\n                  //               <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                  //                  <Dropdown.Item  onClick={()=>onClickHome(row, 'view')}> EAC SESSIONS</Dropdown.Item>\r\n                  //                  {/* <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                  //                   <Dropdown.Item  onClick={()=>LoadDeletePage(row)}> <Icon name='trash' /> Delete</Dropdown.Item> */}\r\n                  //               </Dropdown.Menu>\r\n                  //           </Dropdown>\r\n                  //               </Button>\r\n                  //           </Menu.Item>\r\n                  //           </Menu.Menu>\r\n                  //        </div>\r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyHistory.js",["1190"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst PharmacyHistory = (props) => {    \r\n    \r\n    const [open, setOpen] = React.useState(false)\r\n    const [saving, setSaving] = useState(false)\r\n    const [record, setRecord] = useState(null)\r\n     const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n\r\n      }, [props.patientObj.id, props.refillList]);\r\n\r\n    const onClickHome = (row, actionType) =>{  \r\n       // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n        props.setActiveContent({...props.activeContent, route:'pharmacy-update', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n    }\r\n    const LoadDeletePage = (row) =>{ \r\n        setSaving(true)  \r\n        axios.delete(`${baseUrl}hiv/art/pharmacy/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                props.PharmacyList()\r\n                toggle()\r\n                setSaving(false)\r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            }); \r\n     }\r\n     const regimenName =(regimenObj)=> {\r\n        let regimenArr = []\r\n        regimenObj.forEach(function (value, index, array) {      \r\n            regimenArr.push(<li key={index}>{value['name']}</li>)\r\n        })\r\n        return regimenArr; \r\n        }\r\n        const LoadModal =(row)=>{\r\n            toggle()\r\n            setRecord(row)\r\n        }\r\n\r\n  return (\r\n    <div>\r\n        \r\n            <br/>\r\n        \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Pharmacy History\"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Visit Date\",\r\n                  field: \"visitDate\",\r\n                },\r\n                { title: \"Refill Period\", field: \"refillPeriod\", filtering: false },\r\n                { title: \"Next Appointment\", field: \"nextAppointment\", filtering: false },\r\n                { title: \"Regimen Name\", field: \"regimenName\", filtering: false },\r\n               // { title: \"Quantity\", field: \"regimenQuantity\", filtering: false },\r\n                // { title: \"isDevolve\", field: \"isDevolve\", filtering: false },\r\n                // { title: \"DSDModel\", field: \"dsdModel\", filtering: false },\r\n                // { title: \"MMD Type\", field: \"mmdType\", filtering: false },\r\n                // { title: \"Prescription Error\", field: \"prescriptionError\", filtering: false },\r\n                // { title: \"ADR Screened\", field: \"adverseDrugReactions\", filtering: false },\r\n                { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n              ]}\r\n              isLoading={props.loading}\r\n              data={ props.refillList.map((row) => ({\r\n                  //Id: manager.id,\r\n                  visitDate:row.visitDate,\r\n                  refillPeriod: row.refillPeriod,\r\n                  nextAppointment: row.nextAppointment,\r\n                  regimenName: (\r\n                                <ul>\r\n                                   {regimenName(row.extra.regimens)}\r\n \r\n                                </ul>\r\n                    \r\n                                ),  \r\n                  regimenQuantity: \"\", \r\n                //   isDevolve: row.isDevolve, \r\n                //   mmdType: row.mmdType, \r\n                //   prescriptionError: row.prescriptionError===false? \"NO\":\"YES\", \r\n                //   adverseDrugReactions: row.adrScreened===false? \"NO\":\"YES\",                   \r\n                  Action:<div>\r\n                            <Menu.Menu position='right'  >\r\n                            <Menu.Item >\r\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                <Dropdown item text='Action'>\r\n\r\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                   <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                                    <Dropdown.Item  onClick={()=>LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                                </Button>\r\n                            </Menu.Item>\r\n                            </Menu.Menu>\r\n                         </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                            backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n        <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Notification!\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure you want to delete  - <b>{record && record.visitDate}</b></h4>\r\n                    \r\n                </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n                <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n                \r\n            </Modal.Footer>\r\n            </Modal> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PharmacyHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Segment, Label, Icon, List, Card, Message } from 'semantic-ui-react'\r\nimport { Table  } from \"react-bootstrap\";\r\n// Page titie\r\nimport { FormGroup, Label as FormLabelName, InputGroup,\r\n          InputGroupText,\r\n          Input,\r\n        } from \"reactstrap\";\r\nimport ADR from './ADR/Index'\r\nimport OpportunisticInfection from './OpportunisticInfection/Index'\r\nimport TBScreening from './TBScreening/Index'\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\n//import AddVitals from './Vitals/AddVitals'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Accordion, Alert } from \"react-bootstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport {Label as LabelSui} from 'semantic-ui-react'\r\nimport Select from 'react-select'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    },\r\n    \"& .card-title\":{\r\n      color:'#fff',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& .form-control\":{\r\n      borderRadius:'0.25rem',\r\n      height:'41px'\r\n  },\r\n  \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n  },\r\n  \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\"\r\n  },\r\n  \"& select\":{\r\n      \"-webkit-appearance\": \"listbox !important\"\r\n  },\r\n  \"& p\":{\r\n      color:'red'\r\n  },\r\n  \"& FormLabelName\":{\r\n      fontSize:'14px',\r\n      color:'#014d88',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& label\":{\r\n    fontSize:'14px',\r\n    color:'#014d88',\r\n    fontWeight:'bold'\r\n}\r\n  },\r\n  input: {\r\n    display: 'none'\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst ClinicVisit = (props) => {\r\n  let visitId=\"\"\r\n  let patientObj = props.patientObj ? props.patientObj : {}\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [clinicVisitList, setClinicVisitList] = useState([])\r\n  const [vLIndication, setVLIndication] = useState([]);\r\n  const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n  const [loading, setLoading] = useState(true)\r\n  const [\r\n    activeAccordionHeaderShadow,\r\n    setActiveAccordionHeaderShadow,\r\n  ] = useState(0);\r\n  let temp = { ...errors }\r\n  let testsOptions=[]\r\n  const classes = useStyles()\r\n  const [getPatientObj, setGetPatientObj] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n  const [clinicalStage, setClinicalStage] = useState([]);\r\n  const [functionalStatus, setFunctionalStatus] = useState([]);\r\n  const [adherenceLevel, setAdherenceLevel] = useState([]);\r\n  const [testGroup, setTestGroup] = useState([]);\r\n  const [test, setTest] = useState([]);\r\n  const [tbStatus, setTbStatus] = useState([]);\r\n  const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n  const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n  const [regimenTypeObj, setRegimenTypeObj] = useState([]);\r\n  const [TBForms, setTBForms] = useState(false)\r\n\r\n  const [currentVitalSigns, setcurrentVitalSigns] = useState({})\r\n  const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\r\n  //opportunistic infection Object\r\n  const [infection, setInfection] = useState({ illnessInfection: \"\", ondateInfection: \"\" });\r\n  const [infectionList, setInfectionList] = useState([]);\r\n  //ADR array Object \r\n  const [adrObj, setAdrObj] = useState({ adr: \"\", adrOnsetDate: \"\" });\r\n  const [adrList, setAdrList] = useState([]);\r\n  const [arvDrugOrderList, setarvDrugOrderList] = useState([])\r\n  const [cryptococcal, setCryptococcal] = useState([])\r\n  const [cervicalStatus, setCervicalStatus] = useState([])\r\n  const [cervicalTreatment, setCervicalTreatment] = useState([])\r\n  const [hepatitis, setHepatitis] = useState([])\r\n  const [pregnancyStatus, setPregnancyStatus] = useState([])\r\n  const [familyPlaining, setFamilyPlaining] = useState([])\r\n  const [enrollDate, setEnrollDate] = useState(\"\");\r\n  const [loadClinicHistory, setLoadClinicHistory] = useState(true);\r\n  const [loadVitalHistory, setLoadVitalHistory] = useState(true);\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [labTestOptions, setLabTestOptions] = useState([]);\r\n  //Vital signs clinical decision support \r\n  const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                                                    bodyWeight: \"\",\r\n                                                                    diastolic: \"\",\r\n                                                                    height: \"\",\r\n                                                                    systolic: \"\",\r\n                                                                    pulse:\"\",\r\n                                                                    temperature:\"\",\r\n                                                                    respiratoryRate:\"\" \r\n                                                                  })\r\n  const [arvDrugObj, setArvDrugObj] = useState({\r\n    regimenLine: \"\",\r\n    regimenDrug: \"\",\r\n    regimenLineName: \"\",\r\n    regimenDrugName: \"\",\r\n    dosage: \"\",\r\n    regimenAdherance: \"\",\r\n \r\n  })\r\n  const [objValues, setObjValues] = useState({\r\n    adherenceLevel: \"\",\r\n    adheres: {},\r\n    adrScreened: \"\",\r\n    adverseDrugReactions: {},\r\n    artStatusId: \"\" ,\r\n    cd4: \"\",\r\n    cd4Percentage: \"\",\r\n    clinicalNote: \"\",\r\n    clinicalStageId: \"\",\r\n    facilityId: 0,\r\n    functionalStatusId: \"\",\r\n    hivEnrollmentId: \"\",\r\n    nextAppointment: \"\",\r\n    lmpDate: \"\",\r\n    oiScreened: \"\",\r\n    opportunisticInfections: {},\r\n    personId: patientObj.id,\r\n    tbScreen: {},\r\n    stiIds: \"\",\r\n    stiTreated: \"\",\r\n    uuid: \"\",\r\n    visitDate: \"\",\r\n    whoStagingId: \"\",\r\n    cryptococcalScreeningStatus: \"\",\r\n    cervicalCancerScreeningStatus: \"\",\r\n    cervicalCancerTreatmentProvided: \"\",\r\n    hepatitisScreeningResult: \"\",\r\n    familyPlaning: \"\",\r\n    onFamilyPlaning: \"\",\r\n    levelOfAdherence: \"\",\r\n    tbStatus: \"\",\r\n    tbPrevention: \"\",\r\n    arvdrugsRegimen: {},\r\n    viralLoadOrder: {},\r\n    tbPrevention:\"\",\r\n  });\r\n  const [vital, setVitalSignDto] = useState({\r\n    bodyWeight: \"\",\r\n    diastolic: \"\",\r\n    encounterDate: \"\",\r\n    //captureDate:\"\",\r\n    facilityId: 1,\r\n    height: \"\",\r\n    personId: props.patientObj.id,\r\n    serviceTypeId: 1,\r\n    systolic: \"\",\r\n    pulse:\"\",\r\n    temperature:\"\",\r\n    respiratoryRate:\"\" ,\r\n    headCircumference:\"\",\r\n    surfaceArea:\"\",\r\n    muac:\"\"\r\n  })\r\n  const [tbObj, setTbObj] = useState({\r\n    currentOnIpt: \"\",\r\n    coughing: \"\",\r\n    antiTBDrug: \"\",\r\n    nightSweat: \"\",\r\n    fever: \"\",\r\n    contactWithTBCase: \"\",\r\n    lethergy: \"\",\r\n    tbStatusId: \"\"\r\n  });\r\n  const [tests, setTests]=useState({\r\n\r\n    comments: \"\",\r\n    dateAssayed: \"\",\r\n    labNumber: \"\",\r\n    labTestGroupId: \"\",\r\n    labTestId: \"\",\r\n    dateResultReceived:\"\",\r\n    patientId:props.patientObj?props.patientObj.id:\"\",\r\n    result: \"\",\r\n    sampleCollectionDate: null,\r\n    viralLoadIndication: \"\",\r\n    visitId:\"\" \r\n  })\r\n  useEffect(() => {\r\n    FunctionalStatus();\r\n    WhoStaging();\r\n    AdherenceLevel();\r\n    TBStatus();\r\n    VitalSigns();\r\n\r\n    PatientDetailId();\r\n    ViraLoadIndication();\r\n    TestGroup();\r\n    AdultRegimenLine();\r\n    ChildRegimenLine();\r\n    CRYPTOCOCCAL_SCREENING_STATUS();\r\n    CERVICAL_CANCER_SCREENING_STATUS();\r\n    CERVICAL_CANCER_TREATMENT();\r\n    HEPATITIS_SCREENING_RESULT();\r\n    PREGANACY_STATUS();\r\n    FAMILY_PLANNING_METHOD();\r\n    GetPatientDTOObj();\r\n    PatientCurrentRegimen();\r\n    if(props.patientObj.id){\r\n      ClinicVisitList();\r\n    }\r\n    //hiv/patient/3\r\n  }, [props.patientObj]);\r\n  const GetPatientDTOObj =()=>{\r\n    axios\r\n       .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n       )\r\n       .then((response) => {\r\n           const patientDTO= response.data.enrollment\r\n           setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n       })\r\n       .catch((error) => {\r\n       //console.log(error);\r\n       });\r\n   \r\n  }\r\n  \r\n  //Get the patient current regimen\r\n  const PatientCurrentRegimen =()=>{\r\n    axios\r\n       .get(`${baseUrl}hiv/art/pharmacy/patient/current-regimen/${props.patientObj.id}`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n       )\r\n       .then((response) => {\r\n           const currentRegimenObj= response.data\r\n           arvDrugObj.regimenLine=currentRegimenObj.regimenType.id\r\n           RegimenType(currentRegimenObj.regimenType.id)\r\n           arvDrugObj.regimenDrug=currentRegimenObj.id\r\n       })\r\n       .catch((error) => {\r\n       //console.log(error);\r\n       });\r\n   \r\n  }\r\n  const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n        if (age_now === 0) {\r\n                return m;\r\n            }\r\n            return age_now;\r\n  };\r\n  const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n  // CRYPTOCOCCAL_SCREENING_STATUS\t\r\n  const CRYPTOCOCCAL_SCREENING_STATUS\t = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CRYPTOCOCCAL_SCREENING_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCryptococcal(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n  // CERVICAL_CANCER_SCREENING_STATUS\t\r\n  const CERVICAL_CANCER_SCREENING_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCervicalStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n    // CERVICAL_CANCER_TREATMENT\t\r\n    const CERVICAL_CANCER_TREATMENT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_TREATMENT\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCervicalTreatment(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n  // HEPATITIS_SCREENING_RESULT\t\r\n    const HEPATITIS_SCREENING_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/HEPATITIS_SCREENING_RESULT\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setHepatitis(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // FAMILY_PLANNING_METHOD\t\r\n    const FAMILY_PLANNING_METHOD = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FAMILY_PLANNING_METHOD\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setFamilyPlaining(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // PREGANACY_STATUS\t\r\n    const PREGANACY_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setPregnancyStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    //GET VIRAL LOAD INDICATION \r\n    const ViraLoadIndication =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/VIRAL_LOAD_INDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVLIndication(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n      axios\r\n          .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n            setAdultRegimenLine(response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14)));\r\n          })\r\n          .catch((error) => {\r\n          //console.log(error);\r\n          });        \r\n    }\r\n    //GET ChildRegimenLine \r\n    const ChildRegimenLine =()=>{\r\n      axios\r\n          .get(`${baseUrl}hiv/regimen/arv/children`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n            setChildRegimenLine(response.data.filter((x)=> (x.id===3 || x.id===4 )));\r\n    \r\n          })\r\n          .catch((error) => {\r\n          //console.log(error);\r\n          });        \r\n    }\r\n    //Get list of Test Group\r\n    const TestGroup =()=>{\r\n      axios\r\n      .get(`${baseUrl}laboratory/labtestgroups`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n      )\r\n      .then((response) => {\r\n          setTestGroup(response.data);\r\n          response.data.map((x)=> {                    \r\n            x.labTests.map((x2)=>{\r\n                testsOptions.push({ value: x2.id, label: x2.labTestName,testGroupId:x.id, testGroupName:x.groupName, sampleType:x2.sampleType },)\r\n            })\r\n            //console.log(testsOptions)\r\n        })\r\n        setLabTestOptions(testsOptions)\r\n      })\r\n      .catch((error) => {\r\n      //console.log(error);\r\n      });\r\n        \r\n    }\r\n  //GET LIST Drug Refill\r\n  async function ClinicVisitList() {\r\n    setLoading(true)\r\n    axios\r\n        .get(`${baseUrl}hiv/art/clinic-visit/person?pageNo=0&pageSize=10&personId=${props.patientObj.id}`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setLoading(false)\r\n            setLoadClinicHistory(false)\r\n            setClinicVisitList(response.data);                \r\n        })\r\n        .catch((error) => { \r\n            setLoadClinicHistory(false) \r\n            setLoading(false)  \r\n        });        \r\n  }\r\n  //Check for the last Vital Signs\r\n  const VitalSigns = () => {\r\n  axios\r\n    .get(`${baseUrl}patient/vital-sign/person/${props.patientObj.id}`,\r\n      { headers: { \"Authorization\": `Bearer ${token}` } }\r\n    )\r\n    .then((response) => {\r\n      setLoadVitalHistory(false)\r\n        const lastVitalSigns = response.data[response.data.length - 1]\r\n        //console.log(lastVitalSigns)\r\n      if (lastVitalSigns.captureDate >= moment(new Date()).format(\"YYYY-MM-DD\")) {\r\n        setcurrentVitalSigns(lastVitalSigns)\r\n        setShowCurrentVitalSigns(true)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      setLoadVitalHistory(false)\r\n      //console.log(error);\r\n    });\r\n  }\r\n  //Check for the Patient Object\r\n  const PatientDetailId = () => {\r\n    axios\r\n      .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setGetPatientObj(response.data)\r\n          patientObj=response.data\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  }\r\n\r\n  //Get list of WhoStaging\r\n  const WhoStaging = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setClinicalStage(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n  ///GET LIST OF FUNCTIONAL%20_STATUS\r\n  // TB STATUS\r\n  const TBStatus = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setTbStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  async function FunctionalStatus() {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FUNCTIONAL%20_STATUS`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n\r\n        setFunctionalStatus(response.data);\r\n        //setValues(response.data)\r\n      })\r\n      .catch((error) => {\r\n      });\r\n  }\r\n  ///Level of Adherence\r\n  async function AdherenceLevel() {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_LEVEL_OF_ADHERENCE`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setAdherenceLevel(response.data);\r\n\r\n      })\r\n      .catch((error) => {\r\n      });\r\n  }\r\n  const handleInputChange = e => {\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    if (e.target.name === \"whoStagingId\") {\r\n      if (e.target.value === \"NO\") {\r\n        setTBForms(true)\r\n      } else {\r\n        setTBForms(false)\r\n      }\r\n    }\r\n  }\r\n  const handleInputChangeRegimenLine = e => {\r\n    const regimenId= e.target.value\r\n    setArvDrugObj({ ...arvDrugObj, [e.target.name]: e.target.value });\r\n    \r\n  }\r\n  const handleInputChangeRegimen = e => {\r\n    const regimenId= e.target.value\r\n    setArvDrugObj({ ...arvDrugObj, [e.target.name]: e.target.value });\r\n    if(e.target.value!==\"\"){\r\n      RegimenType(regimenId)\r\n    }\r\n  }\r\n  function RegimenType(id) {\r\n  async function getCharacters() {\r\n      try{\r\n      const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n      { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n      if(response.data){\r\n        setRegimenTypeObj(response.data)\r\n      }\r\n      }catch(e) {\r\n\r\n      }\r\n  }\r\n  getCharacters();\r\n  }\r\n  const handleInputChangeVitalSignDto = e => {\r\n    setErrors({...errors, [e.target.name]: \"\"})\r\n    setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n  // if(e.target.name!=='encounterDate' && e.target.name!=='muac'){\r\n  //   setVitalSignDto({ ...vital, [e.target.name]: e.target.value.replace(/\\D/g, '') });\r\n  // }else{\r\n  //   setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n  // }\r\n\r\n  }\r\n  //Validations of the Lab Viral Load \r\n  const validateLabOrder = () => {        \r\n    temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n    temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n    tests.labTestId==='16' && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")   \r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    //Validations of the ARV DRUG Load \r\n    const validateArvDrug = () => {       \r\n    temp.regimenLine = arvDrugObj.regimenLine ? \"\" : \"This field is required\"\r\n    temp.regimenDrug = arvDrugObj.regimenDrug ? \"\" : \"This field is required\"\r\n    temp.dosage = arvDrugObj.dosage ? \"\" : \"This field is required\"\r\n    temp.regimenAdherance = arvDrugObj.regimenAdherance ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const addOrder = e => {  \r\n    if(validateLabOrder()){\r\n        tests.visitId=visitId\r\n        setTestOrderList([...testOrderList, tests])\r\n        setTests({\r\n          comments: \"\",\r\n          dateAssayed: \"\",\r\n          labNumber: \"\",\r\n          labTestGroupId: \"\",\r\n          labTestId: \"\",\r\n          dateResultReceived:\"\",\r\n          patientId:props.patientObj?props.patientObj.id:\"\",\r\n          result: \"\",\r\n          sampleCollectionDate: null,\r\n          viralLoadIndication: \"\",\r\n          visitId:\"\" \r\n        })\r\n    }\r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeOrder = index => {       \r\n    testOrderList.splice(index, 1);\r\n    setTestOrderList([...testOrderList]);\r\n      \r\n  };\r\n  const addArvDrugOrder = e => { \r\n    if(validateArvDrug()){      \r\n      const actualRegimen= patientAge <=5 ? childRegimenLine : adultRegimenLine //determine the regimen to filter by age \r\n      const regimenName = actualRegimen.find((x)=> x.id===parseInt(arvDrugObj.regimenLine))\r\n      arvDrugObj.regimenLineName= regimenName.description\r\n      const regimenType= regimenTypeObj.find((x)=> x.id===parseInt(arvDrugObj.regimenDrug))     \r\n      arvDrugObj.regimenDrugName= regimenType.description\r\n      setarvDrugOrderList([...arvDrugOrderList, arvDrugObj])\r\n      setArvDrugObj({\r\n        regimenLine: \"\",\r\n        regimenDrug: \"\",\r\n        regimenLineName: \"\",\r\n        regimenDrugName: \"\",\r\n        dosage: \"\",\r\n        regimenAdherance: \"\",\r\n     \r\n      })\r\n    }        \r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeArvDrugOrder = index => {       \r\n    arvDrugOrderList.splice(index, 1);\r\n    setarvDrugOrderList([...arvDrugOrderList]);\r\n  };\r\n\r\n  //Handle CheckBox \r\n  const handleCheckBox = e => {\r\n    if (e.target.checked) {\r\n      //currentVitalSigns.personId === null ? props.patientObj.id : currentVitalSigns.personId\r\n      setVitalSignDto({ ...currentVitalSigns })\r\n    } else {\r\n      setVitalSignDto({\r\n        bodyWeight: \"\",\r\n        diastolic: \"\",\r\n        encounterDate: \"\",\r\n        facilityId: \"\",\r\n        height: \"\",\r\n        personId: props.patientObj.id,\r\n        serviceTypeId: \"\",\r\n        systolic: \"\",\r\n        pulse:\"\",\r\n        temperature:\"\",\r\n        respiratoryRate:\"\",\r\n        headCircumference:\"\",\r\n        surfaceArea:\"\",\r\n        muac:\"\" \r\n      })\r\n    }\r\n  }\r\n\r\n  //to check the input value for clinical decision \r\n  const handleInputValueCheckHeight =(e)=>{\r\n    if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n      const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n    }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n    }\r\n  }\r\n  const handleInputValueCheckBodyWeight =(e)=>{\r\n    if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n      const message =\"Body weight must not be greater than 150 and less than 3\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n    }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n    }\r\n  }\r\n  const handleInputValueCheckSystolic =(e)=>{\r\n    if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n      const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n    }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n    }\r\n  }\r\n  const handleInputValueCheckDiastolic =(e)=>{\r\n    if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n      const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n    }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n    }\r\n  }\r\n  const handleInputValueCheckPulse =(e)=>{\r\n    if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n    const message =\"Pulse must not be greater than 120 and less than 40\"\r\n    setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n    }else{\r\n    setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n    }\r\n  }\r\n  const handleInputValueCheckRespiratoryRate =(e)=>{\r\n      if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n      const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n      }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n      }\r\n  }\r\n  const handleInputValueCheckTemperature =(e)=>{\r\n      if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n      const message =\"Temperature must not be greater than 47 and less than 35\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n      }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n      }\r\n  }\r\n  const handleInputChangeObject = e => {\r\n    setSelectedOption(e)\r\n    tests.labTestGroupId=e.testGroupId\r\n    tests.labTestId = e.value               \r\n  }\r\n  //Validations of the forms\r\n  const validate = () => {        \r\n    temp.encounterDate = vital.encounterDate ? \"\" : \"This field is required\"\r\n    temp.nextAppointment = objValues.nextAppointment ? \"\" : \"This field is required\"\r\n    temp.whoStagingId = objValues.whoStagingId ? \"\" : \"This field is required\"\r\n    temp.functionalStatusId = objValues.functionalStatusId ? \"\" : \"This field is required\"\r\n    {(patientAge>=10 && patientObj.sex==='Female')  && (temp.pregnancyStatus = objValues.pregnancyStatus ? \"\" : \"This field is required\")}\r\n    //temp.adherenceLevel = objValues.adherenceLevel ? \"\" : \"This field is required\"\r\n    //temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"\r\n    //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n    temp.height = vital.height ? \"\" : \"This field is required\"\r\n    temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n    //TB VALIDATION \r\n    temp.tbStatusId = tbObj.tbStatusId ? \"\" : \"This field is required\"\r\n    temp.antiTBDrug = tbObj.antiTBDrug ? \"\" : \"This field is required\"\r\n    tbObj.antiTBDrug && tbObj.antiTBDrug==='NO' && (temp.currentOnIpt = tbObj.currentOnIpt ? \"\" : \"This field is required\")\r\n    tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.fever = tbObj.fever ? \"\" : \"This field is required\")\r\n    tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.nightSweat = tbObj.nightSweat ? \"\" : \"This field is required\")\r\n    tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.lethergy = tbObj.lethergy ? \"\" : \"This field is required\")\r\n    tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.coughing = tbObj.coughing ? \"\" : \"This field is required\")\r\n    tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.contactWithTBCase = tbObj.contactWithTBCase ? \"\" : \"This field is required\")\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const handleSelectedTestGroup = e =>{\r\n      setTests ({...tests,  labTestGroupId: e.target.value});\r\n      const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n      setTest(getTestList[0].labTests)\r\n      // if(e.target.value==='4'){            \r\n      //     setVlRequired(true)\r\n      // }else{\r\n      //     setVlRequired(false) \r\n      // }\r\n  }\r\n  const handleInputChangeTest = e => {\r\n    setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n    setTests ({...tests,  [e.target.name]: e.target.value});       \r\n  }\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(validate()){\r\n    setSaving(true)\r\n    objValues.visitDate = vital.encounterDate\r\n    vital['captureDate'] = vital.encounterDate\r\n    objValues.adverseDrugReactions = adrList\r\n    objValues.artStatusId = getPatientObj.artCommence.id\r\n    objValues.hivEnrollmentId = getPatientObj.enrollment.id\r\n    objValues.opportunisticInfections = infectionList\r\n    objValues.tbScreen = tbObj\r\n    objValues.tbStatus = tbObj.tbStatusId\r\n    objValues.viralLoadOrder= testOrderList\r\n    objValues.arvdrugsRegimen= arvDrugOrderList\r\n    objValues['vitalSignDto'] = vital\r\n\r\n    axios.post(`${baseUrl}hiv/art/clinic-visit/`, objValues,\r\n      { headers: { \"Authorization\": `Bearer ${token}` } },\r\n\r\n    )\r\n      .then(response => {\r\n        PatientDetailId();\r\n        props.ClinicVisitListHistory()\r\n        setSaving(false);\r\n        toast.success(\"Clinic Visit(Care card) save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n        props.setActiveContent({...props.activeContent, route:'consultation', activeTab:\"history\"})\r\n      })\r\n      .catch(error => {\r\n        setSaving(false);\r\n        if(error.response && error.response.data){\r\n          let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n          if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n            toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n          }else{\r\n            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n          }\r\n\r\n        }\r\n        else{\r\n          toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n        }\r\n       \r\n      });\r\n    }else{\r\n      toast.error(\"All field are required\", {position: toast.POSITION.BOTTOM_CENTER})\r\n    }\r\n  }\r\n  function BmiCal (bmi){\r\n    if(bmi<18.5){\r\n      return (\r\n        <Message        \r\n         size='mini'\r\n         color='brown'\r\n          content='Underweight'\r\n        />\r\n      )      \r\n    }else if(bmi >=18.5 && bmi<=24.9){\r\n      <Message        \r\n         size='mini'\r\n         color='olive'\r\n          content='Well nourished'\r\n        />\r\n    }\r\n    else if( bmi>25){\r\n      <Message        \r\n         size='mini'\r\n         color='blue'\r\n          content='Overweight/Obese'\r\n        />\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <div className=\"row\">\r\n\r\n      <div className=\"col-md-6\">\r\n        <h2>Clinic Follow-up Visit</h2>\r\n        </div>\r\n        \r\n      </div>\r\n      <Grid columns='equal'>\r\n       <Grid.Column width={5}>\r\n          \r\n            <Segment>\r\n              <Label as='a' color='blue' style={{width:'110%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>Vital Signs</h4>\r\n              </Label>\r\n              <br />\r\n              {loadVitalHistory===false ? (<>\r\n               <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <br/>\r\n                    <ul className=\"timeline\">\r\n                    { clinicVisitList.length > 0 ?(\r\n                      \r\n                    <Accordion\r\n                        className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                        defaultActiveKey=\"0\"\r\n                        \r\n                      >\r\n                        <>\r\n                        {clinicVisitList.map((visit, i)=>\r\n                        <div className=\"accordion-item\" key={i} >\r\n                          <Accordion.Toggle\r\n                              as={Card.Text}\r\n                              eventKey={`${i}`}\r\n                              className={`accordion-header ${\r\n                                activeAccordionHeaderShadow === 1 ? \"\" : \"collapsed\"\r\n                              } accordion-header-info`}\r\n                              onClick={() =>\r\n                                setActiveAccordionHeaderShadow(\r\n                                  activeAccordionHeaderShadow === 1 ? -1 : i\r\n                                )\r\n                              }\r\n                              style={{width:'100%'}}\r\n                          >\r\n                          <span className=\"accordion-header-icon\"></span>\r\n                          <span className=\"accordion-header-text float-start\">Visit Date : <span className=\"\">{visit.visitDate}</span> </span>\r\n                          <span className=\"accordion-header-indicator\"></span>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse\r\n                          eventKey={`${i}`}\r\n                          className=\"accordion__body\"\r\n                        >\r\n                          <div className=\"accordion-body-text\">\r\n                        \r\n                              <List celled style={{width:'100%'}}>\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.pulse!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px',borderTop:'1px solid #fff', marginTop:'-5px' }}>Pulse <span style={{color:'rgb(153, 46, 98)'}} className=\"float-end\"><b>{visit.vitalSignDto.pulse} bpm</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.respiratoryRate!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>Respiratory Rate <span className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{visit.vitalSignDto.respiratoryRate} bpm</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.temperature!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>Temperature <span className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{visit.vitalSignDto.temperature} <sup>0</sup>C</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.systolic!==null && visit.vitalSignDto.diastolic!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>Blood Pressure <span  className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{visit.vitalSignDto.systolic}/{visit.vitalSignDto.diastolic}</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.height!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>Height <span  className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{visit.vitalSignDto.height} cm</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.bodyWeight!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>Weight <span  className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{visit.vitalSignDto.bodyWeight} kg</b></span></List.Item>)}\r\n                                  {visit.vitalSignDto && visit.vitalSignDto.bodyWeight!==null && visit.vitalSignDto.height!==null && (<List.Item style={{paddingBottom:'10px', paddingTop:'10px'}}>BMI <span  className=\"float-end\"><b style={{color:'rgb(153, 46, 98)'}}>{\r\n                                 \r\n                                  (visit.vitalSignDto.bodyWeight/(((visit.vitalSignDto.height/100) * (visit.vitalSignDto.height/100)))).toFixed(2)\r\n                                  } kg/m<sup>2</sup></b></span></List.Item>)}\r\n                              </List>\r\n                            \r\n                          </div>\r\n                        </Accordion.Collapse>\r\n                      </div>\r\n                        )}\r\n                        </>\r\n                    </Accordion>             \r\n\r\n                ):\r\n                (\r\n                  <>\r\n                  <br/>\r\n                  <Alert\r\n                      variant=\"primary\"\r\n                      className=\"alert-dismissible   \"\r\n                    >\r\n                      <p>No Vital Signs</p>\r\n                    </Alert>\r\n                  </>\r\n                )}\r\n                    </ul>\r\n               \r\n                </PerfectScrollbar>\r\n                </>)\r\n                :\r\n                <>\r\n                <p>Loading please wait...</p>\r\n                </>\r\n              }\r\n            </Segment>\r\n            <Segment>\r\n              <Label as='a' color='teal' style={{width:'110%', height:'35px'}} ribbon>\r\n                <h4 style={{color:'#fff'}}>Previous Clinical Notes</h4>\r\n              </Label>\r\n              {loadClinicHistory===false ? (<>\r\n              <PerfectScrollbar\r\n               style={{ height: \"370px\" }}\r\n               id=\"DZ_W_Todo1\"\r\n               className=\"widget-media dz-scroll ps ps--active-y\"\r\n             >\r\n              <br/>\r\n               <ul className=\"timeline\">\r\n               { clinicVisitList.length > 0 ?(\r\n                 \r\n               <Accordion\r\n                   className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                   defaultActiveKey=\"0\"\r\n                 >\r\n                   <>\r\n                   {clinicVisitList.map((visit, i)=>\r\n                 <div className=\"accordion-item\" key={i}>\r\n                   <Accordion.Toggle\r\n                     as={Card.Text}\r\n                     eventKey={`${i}`}\r\n                     className={`accordion-header ${\r\n                       activeAccordionHeaderShadow === 1 ? \"\" : \"collapsed\"\r\n                     } accordion-header-info`}\r\n                     onClick={() =>\r\n                       setActiveAccordionHeaderShadow(\r\n                         activeAccordionHeaderShadow === 1 ? -1 : i\r\n                       )\r\n                     }\r\n                     style={{width:'100%'}}\r\n                   >\r\n                     <span className=\"accordion-header-icon\"></span>\r\n                     <span className=\"accordion-header-text float-start\" style={{width:'100%'}}>Visit Date : <span className=\"\">{visit.visitDate}</span> </span>\r\n                     <span className=\"accordion-header-indicator \"></span>\r\n                   </Accordion.Toggle>\r\n                   <Accordion.Collapse\r\n                     eventKey={`${i}`}\r\n                     className=\"accordion__body\"\r\n                   >\r\n                     <div className=\"accordion-body-text\">\r\n                         <p>{visit.clinicalNote}</p>\r\n                     </div>\r\n                   </Accordion.Collapse>\r\n                 </div>\r\n               )}\r\n               </>\r\n             </Accordion>             \r\n\r\n                   ):\r\n                   (\r\n                     <>\r\n                     <br/>\r\n                     <Alert\r\n                         variant=\"primary\"\r\n                         className=\"alert-dismissible  \"\r\n                       >\r\n                         <p>No Clinical Notes</p>\r\n                       </Alert>\r\n                     </>\r\n                   )}\r\n               </ul>\r\n              </PerfectScrollbar>\r\n               </>)\r\n               :\r\n               <>\r\n               <p>Loading please wait...</p>\r\n               </>\r\n             } \r\n         </Segment>\r\n         \r\n        </Grid.Column>\r\n        <Grid.Column width={11} className={classes.root}>\r\n          <Segment>\r\n            <Label as='a' color='blue'  style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>VITAL  SIGNS</h4>\r\n            </Label>\r\n            <br /><br />\r\n            <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Date of Visit <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    name=\"encounterDate\"\r\n                    id=\"encounterDate\"\r\n                    value={vital.encounterDate}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    onChange={handleInputChangeVitalSignDto}\r\n                    min={enrollDate}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    required\r\n                  />\r\n                 {errors.encounterDate !==\"\" ? (\r\n                      <span className={classes.error}>{errors.encounterDate}</span>\r\n                  ) : \"\" }\r\n\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                {showCurrentVitalSigns && (\r\n                  <div className=\"form-check custom-checkbox ml-1 \">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"form-check-input\"\r\n                      name=\"currentVitalSigns\"\r\n                      id=\"currentVitalSigns\"\r\n                      onChange={handleCheckBox} \r\n                                          \r\n                    />\r\n                    <label\r\n                      className=\"form-check-label\"\r\n                      htmlFor=\"basic_checkbox_1\"\r\n                    >\r\n                      use current Vital Signs\r\n                    </label>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Pulse</FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Respiratory Rate </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Temperature </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Body Weight <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Height <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                                <InputGroupText\r\n                                addonType=\"append\"\r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                        {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                            <FormGroup>\r\n                            <Label > {\" \"}</Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    {vital.bodyWeight!=='' && vital.height!=='' && (\r\n                      <div className=\"form-group mb-3 mt-2 col-md-12\">\r\n                            {\r\n                              BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\r\n                            }\r\n                      </div>\r\n                     )}\r\n              </div>\r\n              <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-12\">\r\n                  <FormGroup>\r\n                  <FormLabelName >Blood Pressure </FormLabelName>\r\n                  <InputGroup>\r\n                  <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                          systolic(mmHg)\r\n                  </InputGroupText> \r\n                      <Input \r\n                          type=\"number\"\r\n                          name=\"systolic\"\r\n                          id=\"systolic\"\r\n                          min=\"90\"\r\n                          max=\"240\"\r\n                          onChange={handleInputChangeVitalSignDto}\r\n                          value={vital.systolic}\r\n                          onKeyUp={handleInputValueCheckSystolic}\r\n                          style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                      />\r\n                     \r\n                      <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                      diastolic(mmHg)\r\n                      </InputGroupText>\r\n                      \r\n                          <Input \r\n                          type=\"number\"\r\n                          name=\"diastolic\"\r\n                          id=\"diastolic\"\r\n                          min={0}\r\n                          max={140}\r\n                          onChange={handleInputChangeVitalSignDto}\r\n                          value={vital.diastolic}\r\n                          onKeyUp={handleInputValueCheckDiastolic} \r\n                          style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                          />\r\n                      \r\n                      \r\n                  </InputGroup>\r\n                  {vitalClinicalSupport.systolic !==\"\" ? (\r\n                    <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                    ) : \"\"}\r\n                    {errors.systolic !==\"\" ? (\r\n                        <span className={classes.error}>{errors.systolic}</span>\r\n                    ) : \"\" }  \r\n                     {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                      <span className={classes.error} >{vitalClinicalSupport.diastolic}</span>\r\n                      ) : \"\"}\r\n                      {errors.diastolic !==\"\" ? (\r\n                          <span className={'float-end'}><span className={classes.error} >{errors.diastolic}</span></span>\r\n                      ) : \"\" }       \r\n                  </FormGroup>\r\n              </div>\r\n\r\n              </div>\r\n            </div>\r\n            {patientAge && patientAge<14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Head Circumference </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Surface Area </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <FormLabelName >MUAC</FormLabelName>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        value={vital.muac} \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n                                    <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        cm\r\n                                    </InputGroupText>\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                    </div>\r\n            )}\r\n            <Label as='a' color='black'  style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>CONSULTATION</h4>\r\n            </Label>\r\n            <br /><br />\r\n\r\n            <div className=\" mb-3\">\r\n              <FormLabelName >Clinical Notes</FormLabelName>\r\n              <textarea\r\n                name=\"clinicalNote\"\r\n                className=\"form-control\"\r\n                value={objValues.clinicalNote}\r\n                onChange={handleInputChange}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n              ></textarea>\r\n              {errors.clinicalNote !==\"\" ? (\r\n                      <span className={classes.error}>{errors.clinicalNote}</span>\r\n                  ) : \"\" }\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >WHO Staging <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"whoStagingId\"\r\n                    id=\"whoStagingId\"\r\n                    value={objValues.whoStagingId}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {clinicalStage.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.whoStagingId !==\"\" ? (\r\n                      <span className={classes.error}>{errors.whoStagingId}</span>\r\n                  ) : \"\" }\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Functional Status <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"functionalStatusId\"\r\n                    id=\"functionalStatusId\"\r\n                    value={objValues.functionalStatusId}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {functionalStatus.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.functionalStatusId !==\"\" ? (\r\n                      <span className={classes.error}>{errors.functionalStatusId}</span>\r\n                  ) : \"\" }\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Level of Adherence </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"levelOfAdherence\"\r\n                    id=\"levelOfAdherence\"\r\n                    value={objValues.levelOfAdherence}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {adherenceLevel.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.adherenceLevel !==\"\" ? (\r\n                      <span className={classes.error}>{errors.adherenceLevel}</span>\r\n                  ) : \"\" }\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Cryptococcal Screening Status</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"cryptococcalScreeningStatus\"\r\n                    id=\"cryptococcalScreeningStatus\"\r\n                    value={objValues.cryptococcalScreeningStatus}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {cryptococcal.map((value) => (\r\n                            <option key={value.code} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                  </Input>\r\n                 \r\n                </FormGroup>\r\n              </div>\r\n              {/* <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                  <FormLabelName >TB Status * </FormLabelName>\r\n                  <Input\r\n                      type=\"select\"\r\n                      name=\"tbStatus\"\r\n                      id=\"tbStatus\"\r\n                      value={objValues.tbStatus}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                      required\r\n                      >\r\n                      <option value=\"\"> Select</option>\r\n                          {tbStatus.map((value) => (\r\n                              <option key={value.id} value={value.id}>\r\n                                  {value.display}\r\n                              </option>\r\n                          ))}\r\n\r\n                  </Input>\r\n                  {errors.tbStatus !==\"\" ? (\r\n                      <span className={classes.error}>{errors.tbStatus}</span>\r\n                      ) : \"\" }\r\n                  </FormGroup>\r\n              </div> */}\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Hepatitis Screening Result</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"hepatitisScreeningResult\"\r\n                    id=\"hepatitisScreeningResult\"\r\n                    value={objValues.hepatitisScreeningResult}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {hepatitis.map((value) => (\r\n                            <option key={value.code} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                  </Input>\r\n                  \r\n                </FormGroup>\r\n              </div>\r\n              {/* This section is if the patient is Female */}\r\n              { patientAge>=10 && (patientObj.sex==='Female' || patientObj.sex==='FEMALE' || patientObj.sex==='female') && (\r\n                <>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Pregnancy Status <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"pregnancyStatus\"\r\n                        id=\"pregnancyStatus\"\r\n                        value={objValues.pregnancyStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {pregnancyStatus.map((value) => (\r\n                                <option key={value.code} value={value.display}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                      </Input>\r\n                      {errors.pregnancyStatus !==\"\" ? (\r\n                        <span className={classes.error}>{errors.pregnancyStatus}</span>\r\n                       ) : \"\" }\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName >Cervical Cancer Screening Status</FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"cervicalCancerScreeningStatus\"\r\n                      id=\"cervicalCancerScreeningStatus\"\r\n                      value={objValues.cervicalCancerScreeningStatus}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      required\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n\r\n                      {cervicalStatus.map((value) => (\r\n                              <option key={value.code} value={value.code}>\r\n                                  {value.display}\r\n                              </option>\r\n                          ))}\r\n                    </Input>\r\n                    \r\n                  </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Cervical Cancer Treatment Provided</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"cervicalCancerTreatmentProvided\"\r\n                        id=\"cervicalCancerTreatmentProvided\"\r\n                        value={objValues.cervicalCancerTreatmentProvided}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {cervicalTreatment.map((value) => (\r\n                                <option key={value.code} value={value.code}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                      </Input>\r\n                      \r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n                <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName >Family Planing ?</FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"familyPlaning\"\r\n                      id=\"familyPlaning\"\r\n                      value={objValues.familyPlaning}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      required\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n                      <option value=\"Yes\">Yes </option>\r\n                      <option value=\"No\">No </option>\r\n                    </Input>\r\n                   \r\n                  </FormGroup>\r\n                </div>\r\n                {objValues.familyPlaning==='Yes' && (\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >On Family Planing </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"onFamilyPlaning\"\r\n                        id=\"onFamilyPlaning\"\r\n                        value={objValues.onFamilyPlaning}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {familyPlaining.map((value) => (\r\n                              <option key={value.code} value={value.code}>\r\n                                  {value.display}\r\n                              </option>\r\n                          ))}\r\n                      </Input>\r\n                      \r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              </div>\r\n             {/* End of section if the patient is Female */}\r\n            <Label as='a' color='red' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>OPPORTUNISTIC INFECTION</h4>\r\n            </Label>\r\n            <OpportunisticInfection setInfection={setInfection} infection={infection} setInfectionList={setInfectionList} infectionList={infectionList} artStartDate={enrollDate} encounterDate={vital.encounterDate}/>\r\n\r\n            <Label as='a' color='pink' style={{width:'106%', height:'35px'}}  ribbon>\r\n            <h4 style={{color:'#fff'}}>ADR </h4>\r\n            </Label>\r\n            \r\n            <ADR setAdrObj={setAdrObj} adrObj={adrObj} setAdrList={setAdrList} adrList={adrList} artStartDate={enrollDate} encounterDate={vital.encounterDate}/>\r\n            <br />\r\n            <Label as='a'  color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n              TB Screening\r\n            </Label>\r\n            {/* TB Screening Form */}\r\n            <TBScreening tbObj={tbObj} setTbObj={setTbObj} errors={errors} setErrors={setErrors}/>\r\n            <Label as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n            <h4 style={{color:'#fff'}}>ARV DRUGS Regimen</h4>\r\n            </Label>\r\n            \r\n            <br /><br />\r\n            {/* ARV DRUGS Regimen */}\r\n            <div className=\"row\">\r\n              <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Regimen Line </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"regimenLine\"\r\n                        id=\"regimenLine\"\r\n                        value={arvDrugObj.regimenLine}\r\n                        onChange={handleInputChangeRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n                        {patientAge >14 &&  (\r\n                          <>\r\n                            {adultRegimenLine.map((value) => (\r\n                              <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                              </option>\r\n                            ))}\r\n                          </>\r\n                        )}\r\n                        {patientAge <=14 &&  (\r\n                          <>\r\n                            {childRegimenLine.map((value) => (\r\n                              <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                              </option>\r\n                            ))}\r\n                          </>\r\n                        )}\r\n                      </Input>\r\n                      {errors.regimenLine !==\"\" ? (\r\n                                <span className={classes.error}>{errors.regimenLine}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Regimen </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"regimenDrug\"\r\n                        id=\"regimenDrug\"\r\n                        value={arvDrugObj.regimenDrug}\r\n                        onChange={handleInputChangeRegimenLine}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {regimenTypeObj.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.description}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.regimenDrug !==\"\" ? (\r\n                                <span className={classes.error}>{errors.regimenDrug}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Dosage </FormLabelName>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"dosage\"\r\n                        id=\"dosage\"\r\n                        value={arvDrugObj.dosage}\r\n                        onChange={handleInputChangeRegimenLine}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      />\r\n                      {errors.dosage !==\"\" ? (\r\n                                <span className={classes.error}>{errors.dosage}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Adherence </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"regimenAdherance\"\r\n                        id=\"regimenAdherance\"\r\n                        value={arvDrugObj.regimenAdherance}\r\n                        onChange={handleInputChangeRegimenLine}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {adherenceLevel.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                         <option value=\"None\">None </option>\r\n                      </Input>\r\n                      {errors.regimenAdherance !==\"\" ? (\r\n                                <span className={classes.error}>{errors.regimenAdherance}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n              </div>\r\n              <div className=\"col-md-2 float-end\">\r\n                <LabelSui as='a' color='black'  size='tiny' onClick={addArvDrugOrder} style={{ marginTop:35}}>\r\n                    <Icon name='plus' /> Add\r\n                </LabelSui>\r\n                </div>\r\n              <div className=\"row\">\r\n                \r\n              </div>\r\n              {arvDrugOrderList.length >0 ?   \r\n                    <List>\r\n                    <Table  striped responsive>\r\n                        <thead >\r\n                            <tr>\r\n                                <th>Regimen Line</th>\r\n                                <th>Regimen</th>                                   \r\n                                <th>Dosage</th>\r\n                                <th>Adherence</th>                                        \r\n                                <th ></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {arvDrugOrderList.map((regimenObject,index) => (\r\n\r\n                        <ArvDrugOrderObjList\r\n                            key={index}\r\n                            index={index}\r\n                            regimenObject={regimenObject}\r\n                            adherenceLevel={adherenceLevel}\r\n                            removeArvDrugOrder={removeArvDrugOrder}\r\n                        />\r\n                        ))}\r\n                        </tbody>\r\n                        </Table>\r\n                        <br/>\r\n                        <br/>\r\n                    </List>\r\n                    :\r\n                    \"\"\r\n                } \r\n            </div>\r\n            {/* END ARV DRUGS Regimen */}\r\n            <Label as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n            <h4 style={{color:'#fff'}}>Lab & Viral Load Order</h4>\r\n            </Label>\r\n            <br /><br />\r\n            {/* Viral Load  Form */}\r\n            <div className=\"row\">\r\n            {/* <div  className=\" col-md-4\">\r\n                <FormGroup>\r\n                      <FormLabelName for=\"testGroup\">Select Test Group</FormLabelName>\r\n\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"labTestGroupId\"\r\n                            id=\"labTestGroupId\"\r\n                            value={tests.labTestGroupId}\r\n                            onChange={handleSelectedTestGroup} \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                            >\r\n                            <option value=\"\">Select </option>\r\n                                            \r\n                                {testGroup.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.groupName}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        \r\n                        {errors.labTestGroupId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                            ) : \"\" }      \r\n                   </FormGroup>\r\n            </div> */}\r\n              <div  className=\" mb-3 col-md-5\" >\r\n                <FormGroup >\r\n                      <FormLabelName for=\"testGroup\">Select Test</FormLabelName>\r\n                      <Select\r\n                            //value={selectedOption}\r\n                            onChange={handleInputChangeObject}\r\n                            options={labTestOptions}\r\n                            styles={classes.root}\r\n                            menuPortalTarget={document.body} \r\n                            menuPosition={'fixed'} \r\n                      />\r\n                        {errors.labTestId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.labTestId}</span>\r\n                        ) : \"\" }\r\n                </FormGroup>\r\n              </div>\r\n              {(tests.labTestId==='16' || tests.labTestId===16 ) && (\r\n              <div  className=\"mb-3 col-md-5\">\r\n                  <FormGroup>\r\n                    <FormLabelName for=\"vlIndication\">VL Indication</FormLabelName>\r\n                    <Input\r\n                    type=\"select\"\r\n                    name=\"viralLoadIndication\"\r\n                    id=\"viralLoadIndication\"\r\n                    value={tests.viralLoadIndication}\r\n                    onChange={handleInputChangeTest}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {vLIndication.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                    </Input>\r\n                    {errors.viralLoadIndication !==\"\" ? (\r\n                                <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                            ) : \"\" }\r\n                </FormGroup>\r\n              </div>\r\n              )}\r\n              <div className=\"form-group mb-3 col-md-2\">\r\n                <LabelSui as='a' color='black'  size='tiny' onClick={addOrder} style={{ marginTop:35}}>\r\n                    <Icon name='plus' /> Add\r\n                </LabelSui> \r\n              </div>\r\n           \r\n            {testOrderList.length >0 ?   \r\n                    <List>\r\n                    <Table  striped responsive>\r\n                        <thead >\r\n                            <tr>\r\n                                <th>Test Group</th>\r\n                                <th>Test</th>                                   \r\n                                <th>VL Indication</th>                                       \r\n                                <th ></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {testOrderList.map((tests,index) => (\r\n\r\n                        <TestOrdersList\r\n                            key={index}\r\n                            index={index}\r\n                            order={tests}\r\n                            testGroupObj={testGroup}\r\n                            vLIndicationObj={vLIndication}\r\n                            removeOrder={removeOrder}\r\n                        />\r\n                        ))}\r\n                        </tbody>\r\n                        </Table>\r\n                        <br/>\r\n                    </List>\r\n                    :\r\n                    \"\"\r\n                } \r\n            </div>       \r\n            {/* END Viral Load  Form */}\r\n            \r\n            <Label as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n            <h4 style={{color:'#fff'}}>NEXT CLINICAL APPOINTMENT DATE </h4>\r\n            </Label>\r\n            <br /><br />\r\n            {/* TB Screening Form */}\r\n            <Input\r\n                    type=\"date\"\r\n                    name=\"nextAppointment\"\r\n                    id=\"nextAppointment\"\r\n                    className=\"col-md-6\"\r\n                    value={vital.nextAppointment}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    min={vital.encounterDate}\r\n                    \r\n                  />\r\n              {errors.nextAppointment !==\"\" ? (\r\n                      <span className={classes.error}>{errors.nextAppointment}</span>\r\n                  ) : \"\" }\r\n            <br />\r\n            <MatButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              disabled={saving}\r\n              startIcon={<SaveIcon />}\r\n              style={{backgroundColor:\"#014d88\"}}\r\n              onClick={handleSubmit}\r\n            >\r\n              {!saving ? (\r\n                <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n              ) : (\r\n                <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n              )}\r\n            </MatButton>\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nfunction TestOrdersList({\r\n  order,\r\n  index,\r\n  removeOrder,\r\n  testGroupObj,\r\n  vLIndicationObj,\r\n}) {\r\n  \r\n  const testGroupName= testGroupObj.find((x)=> x.id===parseInt(order.labTestGroupId))\r\n  const testName= testGroupName.labTests.find((x)=> x.id===parseInt(order.labTestId))\r\n  const vLIndication=vLIndicationObj.length>0 ?\r\n  vLIndicationObj.find((x)=> x.id===parseInt(order.viralLoadIndication)) : {}\r\n\r\n  return (\r\n          <tr>\r\n              <th>{testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th>\r\n              <th>{testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? vLIndication.display :  testName.labTestName}</th>             \r\n              <th>{vLIndication && vLIndication.display ? vLIndication.display : \"\"}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\nfunction ArvDrugOrderObjList({\r\n  index,\r\n  removeArvDrugOrder,\r\n  regimenObject,\r\n  adherenceLevel,\r\n}) {\r\n\r\n  const adherence = adherenceLevel.find((x)=> x.id===parseInt(regimenObject.regimenAdherance))\r\n\r\n  return (\r\n          <tr>\r\n              <th>{regimenObject.regimenLineName }</th>\r\n              <th>{regimenObject.regimenDrugName }</th>             \r\n              <th>{regimenObject.dosage}</th>\r\n              <th>{adherence && adherence.display}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeArvDrugOrder(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\n\r\nexport default ClinicVisit;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Pharmacy\\PharmacyRefillNew.js",["1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232"],"import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport { Input, Label, FormGroup, CardBody, Card, InputGroupText, InputGroup } from \"reactstrap\";\r\nimport { Table  } from \"react-bootstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n//import CancelIcon from '@material-ui/icons/Cancel'\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n//import Select from \"react-select\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { toast} from \"react-toastify\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\n//import { Icon,Button, } from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    button: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"11px\",\r\n  },\r\n  success: {\r\n      color: \"#4BB543 \",\r\n      fontSize: \"11px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n},\r\n}))\r\nlet refillPeriodValue=null\r\n\r\nconst Pharmacy = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [selectedCombinedRegimen, setSelectedCombinedRegimen] = useState([]);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [selectedOption, setSelectedOption] = useState([]);\r\n    const [selectedOptionAdr, setSelectedOptionAdr] = useState();\r\n    const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n    const [dsdModelType, setDsdModelType] = useState([]);\r\n    const [mmdType, setmmdType]=useState();\r\n    const [showmmdType, setShowmmdType]=useState(false);\r\n    const [showIptType, setIptType] = useState(false);\r\n    //const [showAdr, setShowAdr] = useState(false);\r\n    const [showRegimen, setShowRegimen] = useState(false);\r\n    const [showRegimenOI, setShowRegimenOI] = useState(false);\r\n    const [showRegimenTB, setShowRegimenTB] = useState(false);\r\n    const [showRegimenOthers, setShowRegimenOthers] = useState(false);\r\n    \r\n    const [regimen, setRegimen] = useState([]);\r\n    const [regimenList, setRegimenList] = useState([]);\r\n    const [eacStatusObj, setEacStatusObj] = useState()\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [regimenTypeOI, setRegimenTypeOI] = useState([]);\r\n    const [regimenTypeTB, setRegimenTypeTB] = useState([]);\r\n    const [regimenDrug, setRegimenDrug] = useState([]);\r\n    const [regimenDrugList, setRegimenDrugList] = useState([]);\r\n    const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\r\n    // const [currentVitalSigns, setcurrentVitalSigns] = useState({})\r\n    // const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [adultArtRegimenLine, setAdultArtRegimenLine] = useState([]);\r\n    const [oIRegimenLine, setOIRegimenLine] = useState([]);\r\n    const [tbRegimenLine, setTbRegimenLine] = useState([]);\r\n    //const [othersRegimenLine, setOthersRegimenLine] = useState([]);\r\n    const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n    const [childrenOI, setChildrenOI] = useState([]);\r\n    const [childrenTB, setChildrenTB] = useState([]);\r\n    const [otherDrugs, setOtherDrugs] = useState([]);\r\n    const [iptType, setIPT_TYPE] = useState([]);\r\n    const [regimenTypeOther, setRegimenTypeOther] = useState([]);\r\n    const [iptEligibilty, setIptEligibilty] = useState(\"\");\r\n    const [lastChronicCare, setLastChronicCare] = useState(null);\r\n    //const [currentRegimenValue, setCurrentRegimenValue] = useState(\"\");//this is to get the current regimen value/ID the patient is on \r\n    //IPT_TYPE\r\n    const [objValues, setObjValues] = useState({\r\n            adherence: \"\",\r\n            adrScreened: \"\",\r\n            adverseDrugReactions: {},\r\n            dsdModel:\"\",\r\n            isDevolve:\"\",\r\n            extra: {},\r\n            facilityId: 2,\r\n            mmdType:null,\r\n            nextAppointment: null,\r\n            personId: props.patientObj.id,\r\n            refillPeriod:null,\r\n            prescriptionError: null,\r\n            regimenId: [],\r\n            regimenTypeId:\"\",\r\n            visitDate: null,\r\n            visitId: 0,\r\n            refill:\"\",\r\n            refillType:\"\",\r\n            switch:\"\",\r\n            substitute:\"\",\r\n            dsdModelType:\"\",\r\n            iptType:\"\",\r\n            visitType:\"\",\r\n            //drugName:\"\"\r\n    });\r\n    const [vital, setVitalSignDto]= useState({\r\n        bodyWeight: \"\",\r\n        diastolic:\"\",\r\n        encounterDate: \"\",\r\n        facilityId: 1,\r\n        height: \"\",\r\n        personId: props.patientObj.id,\r\n        serviceTypeId: 1,\r\n        systolic:\"\",\r\n        pulse:\"\",\r\n        temperature:\"\",\r\n        respiratoryRate:\"\" \r\n    })\r\n    useEffect(() => {\r\n        RegimenLine();\r\n        PrepSideEffect();\r\n        VitalSigns();\r\n        AdultRegimenLine();\r\n        IPT_TYPE();\r\n        PatientCurrentRegimen();\r\n        OtherDrugs();\r\n        setRegimenList(\r\n            Object.entries(selectedOption && selectedOption.length>0? selectedOption : []).map(([key, value]) => ({\r\n                id: value.value,\r\n                name: value.label,\r\n                dispenseQuantity:objValues.refillPeriod!==null ? objValues.refillPeriod: \"\"\r\n              })))\r\n        CheckEACStatus();\r\n        VitalSigns();\r\n        ChildRegimenLine();\r\n        ChronicCare();\r\n        GetPatientDTOObj();\r\n        GetIptEligibilty();\r\n    }, [selectedOption, regimenType.length>0, objValues.refillPeriod]);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate (patientDTO && patientDTO.dateOfRegistration ? patientDTO.dateOfRegistration :\"\")\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //\r\n    const ChronicCare =()=>{\r\n        axios\r\n        .get(`${baseUrl}observation/person/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n\r\n                const obj1 =response.data.filter(x=> x.type==='Chronic Care')\r\n                //const lastArryObj=obj1.slice(-1)\r\n                setLastChronicCare(obj1)\r\n                //const lastobj;\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });       \r\n    }\r\n    const GetIptEligibilty =()=>{\r\n        axios\r\n        .get(`${baseUrl}observation/check-ipt-eligible/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setIptEligibilty(response.data)\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //Get the patient current regimen\r\n    const PatientCurrentRegimen =()=>{\r\n        axios\r\n        .get(`${baseUrl}hiv/art/pharmacy/patient/current-regimen/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            const currentRegimenObj= response.data\r\n            //setCurrentRegimenValue(currentRegimenObj.regimenType.id)\r\n            objValues.regimen=currentRegimenObj.regimenType.id\r\n            RegimenType(currentRegimenObj.regimenType.id)\r\n            objValues.regimenId=currentRegimenObj.id\r\n            //regimenName\r\n            RegimenDrug(currentRegimenObj.id)\r\n            //RegimenDrug(regimenId)\r\n            setShowRegimen(true)\r\n            //regimenDrug\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m;\r\n                }\r\n                return age_now;\r\n    };\r\n    const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));//Age calculation\r\n    //GET ChildRegimenLine \r\n    const ChildRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/children`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n  \r\n              setChildRegimenLine(response.data.filter((x)=> (x.id===3 || x.id===4 )));\r\n              setChildrenOI(response.data.filter((x)=> (x.id===15 || x.id===9 || x.id===8)))\r\n              setChildrenTB(response.data.filter((x)=> (x.id===11 )))\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //GET Other Drugd \r\n    const OtherDrugs =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/other/drugs`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n              setOtherDrugs(Object.entries(response.data).map(([key, value]) => ({\r\n                label: value.description,\r\n                value: value.id,\r\n                })));\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    const IPT_TYPE =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/IPT_TYPE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setIPT_TYPE(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    //IPT_TYPE\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            \r\n            //const filterRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===3 || x.id===4 || x.id===14))\r\n            const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14))\r\n            const tbRegimen=response.data.filter((x)=> (x.id===10 ))\r\n            const oIRegimen=response.data.filter((x)=> (x.id===9 || x.id===15 || x.id===8))\r\n            //const othersRegimen=response.data.filter((x)=> (x.id!==1 && x.id!==2 && x.id!==14 && x.id!==10 && x.id!==9 && x.id!==15 && x.id!==8 ))\r\n            //console.log(othersRegimen)\r\n            setAdultArtRegimenLine(artRegimen);\r\n            setTbRegimenLine(tbRegimen);\r\n            setOIRegimenLine(oIRegimen);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });        \r\n    }\r\n    \r\n    //Check for the last Vital Signs\r\n    const VitalSigns = () => {\r\n        axios\r\n          .get(`${baseUrl}patient/vital-sign/person/${props.patientObj.id}`,\r\n            { headers: { \"Authorization\": `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n             const lastVitalSigns = response.data[response.data.length - 1]\r\n             //console.log(lastVitalSigns)\r\n            if (lastVitalSigns.captureDate >= moment(new Date()).format(\"YYYY-MM-DD\")) {\r\n                setVitalSignDto(lastVitalSigns)\r\n              setShowCurrentVitalSigns(true)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            //console.log(error);\r\n          });\r\n    }\r\n    //Get EAC Status\r\n    const CheckEACStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/eac/open/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setEacStatusObj(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenLine =()=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/types`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            \r\n            setRegimen(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //Get list of PrepSideEffect\r\n    const PrepSideEffect =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setPrepSideEffect(Object.entries(response.data).map(([key, value]) => ({\r\n                label: value.display,\r\n                value: value.id,\r\n              })));\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    //Get list of DSD Model Type\r\n    function DsdModelType (dsdmodel) {\r\n        const dsd = dsdmodel ==='Facility' ? 'DSD_MODEL_FACILITY' : 'DSD_MODEL_COMMUNITY'\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/${dsd}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               console.log(response.data);\r\n               setDsdModelType(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n    }\r\n    function RegimenType(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenType(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenTypeOI(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeOI(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenTypeTB(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeTB(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenDrug(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenType.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenDrugOI(id) {        \r\n        let drugId = id\r\n        if(drugId!==\"\"  || drugId !==null){\r\n            setShowRegimenOI(true)    \r\n            async function getCharacters(drugId) {            \r\n                try{\r\n                const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                if(response.data){                   \r\n                    setSelectedCombinedRegimen(response.data)         \r\n                    const regimenName = regimenTypeOI.find((x) => { \r\n                        if(x.value==parseInt(drugId)){\r\n                            console.log(x)\r\n                            return x\r\n                        }\r\n                    })                           \r\n                    \r\n                    const drugObj=[{\r\n                        dispense:\"\",\r\n                        prescribed:\"\",\r\n                        dosage:\"\",\r\n                        freqency:\"\",\r\n                        duration:objValues.refillPeriod,\r\n                        name:regimenName.label,\r\n                        regimenId:regimenName.value,\r\n                        regimenName:regimenName.label,\r\n\r\n                    }]                \r\n                    setRegimenDrug(drugObj)\r\n                }\r\n                }catch(e) {\r\n\r\n                }\r\n            }\r\n            getCharacters(drugId);\r\n        }else{\r\n            setShowRegimenOI(false) \r\n        }\r\n    }\r\n    function RegimenDrugTB(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data){                   \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenTypeTB.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    function RegimenTypeOther(id) {\r\n        async function getCharacters() {\r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data.length >0){\r\n                setRegimenTypeOther(\r\n                    Object.entries(response.data).map(([key, value]) => ({\r\n                    label: value.description,\r\n                    value: value.id,\r\n                    })))\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters();\r\n    }\r\n    function RegimenDrugOther(id) {        \r\n        let drugId = id\r\n        async function getCharacters(drugId) {            \r\n            try{\r\n            const response = await axios.get(`${baseUrl}hiv/regimen/drugs/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n            if(response.data){ \r\n                console.log(response.data)                  \r\n                setSelectedCombinedRegimen(response.data)         \r\n                const regimenName = regimenTypeOther.find((x) => { \r\n                    if(x.value==parseInt(drugId)){\r\n                        //console.log(x)\r\n                        return x\r\n                    }\r\n                })                           \r\n                \r\n                const drugObj=[{\r\n                    dispense:\"\",\r\n                    prescribed:\"\",\r\n                    dosage:\"\",\r\n                    freqency:\"\",\r\n                    duration:objValues.refillPeriod,\r\n                    name:regimenName.label,\r\n                    regimenId:regimenName.value,\r\n                    regimenName:regimenName.label,\r\n\r\n                }]                \r\n                setRegimenDrug(drugObj)\r\n            }\r\n            }catch(e) {\r\n\r\n            }\r\n        }\r\n        getCharacters(drugId);\r\n    }\r\n    const handleInputChange = e => {\r\n        if(e.target.name==='dsdModel' && e.target.value!==''){\r\n            DsdModelType(e.target.value)\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n       \r\n    }\r\n    const handleSelectedRegimen = e => {\r\n        const regimenId= e.target.value\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(regimenId!==\"\"){\r\n            RegimenType(regimenId)\r\n            //setShowRegimen(true)\r\n        }else{\r\n            setRegimenType([])\r\n            setShowRegimen(false)\r\n        }\r\n    }\r\n    const handleSelectedRegimenOI = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenTypeOI(regimenId)\r\n            if(regimenId==='15'){\r\n                setIptType(true)\r\n            }else{\r\n                setIptType(false)\r\n            }\r\n        }else{\r\n            setRegimenTypeOI([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenTB = e => {\r\n        const regimenId= e.target.value\r\n        \r\n        if(regimenId!==\"\"){\r\n            RegimenTypeTB(regimenId)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenOther = e => {\r\n        const regimenId= e.target.value\r\n        //console.log(regimenId)\r\n        if(regimenId!==\"\"){\r\n            RegimenTypeOther(regimenId)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n        }\r\n    }\r\n    const handleSelectedRegimenCombination = e => {\r\n        const regimenId= e.target.value\r\n        //console.log(regimenId)\r\n        if(regimenId!==\"\"){\r\n            RegimenDrug(regimenId)\r\n            setShowRegimen(true)\r\n            \r\n        }else{\r\n            setRegimenType([])\r\n            RegimenDrug(\"\")\r\n            setShowRegimen(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationOI = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugOI(regimenId)\r\n            setShowRegimenOI(true)\r\n        }else{\r\n            setRegimenTypeOI([])\r\n            setShowRegimenOI(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationTB = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugTB(regimenId)\r\n            setShowRegimenTB(true)\r\n        }else{\r\n            setRegimenTypeTB([])\r\n            setShowRegimenTB(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelectedRegimenCombinationOthers = e => {\r\n        const regimenId= e.target.value\r\n        if(regimenId!==\"\"){\r\n            RegimenDrugOther(regimenId)\r\n            setShowRegimenOthers(true)\r\n        }else{\r\n            setRegimenTypeOther([])\r\n            setShowRegimenOthers(false)\r\n        }\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const handleCheckBoxRegimen =e =>{\r\n        const originalCombination=regimenDrug\r\n        //console.log(selectedCombinedRegimen)\r\n        if(e.target.checked){\r\n            const newObjCombination = selectedCombinedRegimen.map(x => {\r\n                x['dispense']=\"\"\r\n                x['prescribed']=\"\"\r\n                x['dosage']=\"\"\r\n                //x['freqency']=\"\"\r\n                x['duration']=objValues.refillPeriod\r\n                x['regimenId']=regimenDrug[0].regimenId\r\n                x['regimenName']= regimenDrug[0].name\r\n                return x;\r\n            })\r\n            setRegimenDrug(newObjCombination)\r\n            \r\n        }else{\r\n          \r\n            RegimenDrug(objValues.regimenId)\r\n        } \r\n    } \r\n    \r\n    const handlRefillPeriod = e =>{\r\n        let refillcount= \"\"\r\n        if(e.target.value===\"30\"){\r\n             refillcount= e.target.value \r\n        }else if(e.target.value===\"60\"){\r\n            refillcount= e.target.value \r\n        }else if(e.target.value===\"90\"){\r\n        refillcount= e.target.value \r\n        }else if(e.target.value===\"120\"){\r\n            refillcount= e.target.value \r\n        }else if(e.target.value===\"160\"){\r\n            refillcount= e.target.value \r\n        }else if(e.target.value===\"180\"){\r\n            refillcount= e.target.value \r\n        }else{\r\n            refillcount= e.target.value\r\n        }\r\n        \r\n        refillPeriodValue=e.target.value\r\n        const visitDate = objValues.visitDate\r\n        const nextrefillDate= moment(visitDate, \"YYYY-MM-DD\").add(refillcount, 'days').toDate();\r\n        const nextDate =moment(nextrefillDate).format(\"YYYY-MM-DD\")\r\n        objValues.refillPeriod= e.target.value\r\n        setObjValues ({...objValues,  refillPeriod: e.target.value})\r\n        setObjValues ({...objValues,  nextAppointment: nextDate})\r\n        \r\n        if(refillcount===\"90\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-3\")\r\n        }else if(refillcount===\"120\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-4\")\r\n        }else if(refillcount===\"150\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-5\")\r\n        }else if(refillcount===\"180\"){\r\n            setShowmmdType(true)\r\n            setmmdType(\"MMD-6\")\r\n        }else{\r\n            setShowmmdType(false)\r\n            setmmdType(\"\")\r\n        }\r\n\r\n    }\r\n    const handleCheckBox =e =>{\r\n        \r\n        if(e.target.checked){\r\n            setObjValues ({...objValues,  [e.target.name] :true});\r\n        }\r\n    } \r\n    const handleFormChange = (index, event) => {\r\n        let data = [...regimenDrug];\r\n        data[index][event.target.name] = event.target.value;\r\n        data[index]['prescribed'] = data[index]['frequency'] * data[index]['duration']\r\n        setRegimenDrug (data);\r\n    }\r\n     //Validations of the forms\r\n     const validateDrugDispense = () => {        \r\n        temp.dispense = regimenDrug[0].dispense ? \"\" : \"This field is required\"\r\n        temp.frequency = regimenDrug[0].frequency ? \"\" : \"This field is required\"\r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const addDrug = e => {\r\n           if(validateDrugDispense()){\r\n            //console.log(regimenDrug)\r\n            setRegimenDrugList([...regimenDrugList, ...regimenDrug]) \r\n            const drugObj=[{\r\n                dispense:\"\",\r\n                prescribed:\"\",\r\n                dosage:\"\",\r\n                freqency:\"\",\r\n                duration:\"\",\r\n                name:\"\",\r\n                regimenId:\"\",\r\n                regimenName:\"\",\r\n\r\n            }]                \r\n            setRegimenDrug([])\r\n            setShowRegimen(false)\r\n        }else{\r\n            toast.error(\"All fields are required\")\r\n        }\r\n                     \r\n    }\r\n    const addDrugTB = e => {\r\n        if(validateDrugDispense()){\r\n         //console.log(regimenDrug)\r\n         setRegimenDrugList([...regimenDrugList, ...regimenDrug]) \r\n         const drugObj=[{\r\n             dispense:\"\",\r\n             prescribed:\"\",\r\n             dosage:\"\",\r\n             freqency:\"\",\r\n             duration:\"\",\r\n             name:\"\",\r\n             regimenId:\"\",\r\n             regimenName:\"\",\r\n\r\n         }]                \r\n         setRegimenDrug([])\r\n         setShowRegimenTB(false)\r\n     }else{\r\n         toast.error(\"All fields are required\")\r\n     }\r\n                  \r\n    }\r\n\r\n    const addDrugOI = e => {\r\n        if(validateDrugDispense()){\r\n         //console.log(regimenDrug)\r\n         setRegimenDrugList([...regimenDrugList, ...regimenDrug]) \r\n         const drugObj=[{\r\n             dispense:\"\",\r\n             prescribed:\"\",\r\n             dosage:\"\",\r\n             freqency:\"\",\r\n             duration:\"\",\r\n             name:\"\",\r\n             regimenId:\"\",\r\n             regimenName:\"\",\r\n\r\n         }]                \r\n         setRegimenDrug([])\r\n         setShowRegimenOI(false)\r\n     }else{\r\n         toast.error(\"All fields are required\")\r\n     }\r\n                  \r\n    }\r\n    const addDrugOthers = e => {\r\n        if(validateDrugDispense()){\r\n         //console.log(regimenDrug)\r\n         setRegimenDrugList([...regimenDrugList, ...regimenDrug]) \r\n         const drugObj=[{\r\n             dispense:\"\",\r\n             prescribed:\"\",\r\n             dosage:\"\",\r\n             freqency:\"\",\r\n             duration:\"\",\r\n             name:\"\",\r\n             regimenId:\"\",\r\n             regimenName:\"\",\r\n\r\n         }]                \r\n         setRegimenDrug([])\r\n         setShowRegimenOthers(false)\r\n     }else{\r\n         toast.error(\"All fields are required\")\r\n     }\r\n                  \r\n    }\r\n    \r\n    /* Remove ADR  function **/\r\n    const removeAttempt = index => {       \r\n        regimenDrugList.splice(index, 1);\r\n        setRegimenDrugList([...regimenDrugList]);        \r\n    }; \r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        setSaving(true);\r\n        const observeDate =lastChronicCare.find(x=> x.dateOfObservation===objValues.visitDate)\r\n        \r\n            if(observeDate){\r\n                //if(iptEligibilty.IPTEligibility!==true && objValues.visitType===\"\"){\r\n                objValues.adverseDrugReactions=selectedOptionAdr\r\n                objValues.personId=props.patientObj.id\r\n                objValues.extra['regimens']=regimenDrugList \r\n                objValues.mmdType=mmdType\r\n                //delete regimenList['name']\r\n                objValues.regimen=regimenDrugList\r\n                axios.post(`${baseUrl}hiv/art/pharmacy`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},)\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    //props.PharmacyList();\r\n                    objValues.visitDate=\"\"\r\n                    objValues.refillPeriod=\"\"\r\n                    objValues.nextAppointment=\"\"\r\n                    objValues.adherence=\"\"\r\n                    objValues.adrScreened= \"\"\r\n                    objValues.dsdModel=\"\"\r\n                    objValues.isDevolve=\"\"\r\n                    objValues.mmdType=\"\"\r\n                    objValues.prescriptionError=\"\"\r\n                    objValues.visitId=\"\"\r\n                    objValues.refill=\"\"\r\n                    objValues.refillType=\"\"\r\n                    objValues.switch=\"\"\r\n                    objValues.substitute=\"\"\r\n                    objValues.dsdModelType=\"\"\r\n                    objValues.iptType=\"\"\r\n                    objValues.visitType=\"\"\r\n                    //props.PatientCurrentObject();\r\n                    toast.success(\"Pharmacy drug refill successful\", {position: toast.POSITION.BOTTOM_CENTER});           \r\n                    props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"history\" })  \r\n                    setRegimenDrugList([]);\r\n                    \r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                        //console.log(errorMessage)\r\n                        if(errorMessage!==\"\"){\r\n                            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n                          toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                          toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }else{\r\n                        toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }\r\n                               \r\n                });\r\n                // }else{\r\n                //     toast.error(\"Please visit type is required\", {position: toast.POSITION.BOTTOM_CENTER});  \r\n                //     setSaving(false); \r\n                // }\r\n                }else{\r\n                    toast.error(\"No Chronic Care filled for this Encounter Date, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});  \r\n                    setSaving(false); \r\n                } \r\n        \r\n       \r\n    }\r\n\r\n    let TotalDispensed = regimenDrug.reduce(function(prev, current) {\r\n        return prev + +current.dispense\r\n      }, 0);\r\n      let TotalPrescribed = regimenDrug.reduce(function(prev, current) {\r\n        const duration = (current && current.frequency ? current.frequency : \"\") * current.duration\r\n        return prev + +duration\r\n      }, 0);\r\n\r\n\r\n\r\n  return (      \r\n      <div>\r\n \r\n        <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n        <h2>Pharmacy Drug Refill</h2> \r\n        </div>\r\n\r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            <form >\r\n            <div className=\"row\">\r\n            <div className=\"row\">\r\n                \r\n            </div>\r\n            {vital.bodyWeight!=='' && vital.height!=='' && (<>\r\n                <div className=\"row\">\r\n                <div className=\" mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                    <Label >Body Weight</Label>\r\n                    <InputGroup> \r\n                        <Input \r\n                            type=\"text\"\r\n                            name=\"bodyWeight\"\r\n                            id=\"bodyWeight\"\r\n                            min=\"3\"\r\n                            value={vital.bodyWeight}\r\n                            max=\"150\"\r\n                            disabled\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                        />\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            kg\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    \r\n                    </FormGroup>\r\n                </div>                                   \r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                    <Label >Height</Label>\r\n                    <InputGroup> \r\n                    <InputGroupText\r\n                            addonType=\"append\"\r\n                            \r\n                            style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            >\r\n                            cm\r\n                    </InputGroupText>\r\n                        <Input \r\n                            type=\"text\"\r\n                            name=\"height\"\r\n                            id=\"height\"\r\n                            disabled\r\n                            value={vital.height}\r\n                            min=\"48.26\"\r\n                            max=\"216.408\"\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                        />\r\n                            <InputGroupText\r\n                            addonType=\"append\"\r\n                            \r\n                            style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                            >\r\n                            {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                    {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                        <FormGroup>\r\n                        <Label> </Label>\r\n                        <InputGroup> \r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            BMI : {(vital.bodyWeight/((vital.height/100) * (vital.height/100))).toFixed(2)}\r\n                        </InputGroupText>                   \r\n                        \r\n                        </InputGroup>                \r\n                        </FormGroup>\r\n                    )}\r\n                </div>\r\n                {/* <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Pregnant Status  : Yes</Label>                                    \r\n                    </FormGroup>\r\n                </div> */}\r\n                </div>\r\n            </>)}\r\n            <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                    <Label >Visit Type</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"visitType\"\r\n                        id=\"visitType\"\r\n                        value={objValues.visitType}\r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Initial Visit\">Initial Visit</option>\r\n                        <option value=\"Follow Up Visit\">Follow Up Visit </option>\r\n                    \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                    <Label >Refill</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refill\"\r\n                        id=\"refill\"\r\n                        value={objValues.refill}\r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Yes\">Yes</option>\r\n                        <option value=\"No\">No </option>\r\n                    \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label for=\"artDate\">Encounter Date <span style={{ color:\"red\"}}> *</span> </Label>\r\n                    <Input\r\n                        type=\"date\"\r\n                        name=\"visitDate\"\r\n                        id=\"visitDate\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.visitDate}\r\n                        min={enrollDate!=='' ? enrollDate : \"\"}\r\n                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                    />\r\n                    </FormGroup>\r\n                </div>\r\n                {/* <div className=\"mt-4 col-md-2\" > \r\n                      \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"radio\"\r\n                            className=\"form-check-input\"                       \r\n                            name=\"switch\"\r\n                            id=\"switch\"\r\n                            value=\"switch\"\r\n                            onChange={handleCheckBox}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Switch\r\n                            </label>\r\n                        </div>\r\n                   \r\n                </div>\r\n                <div className=\"mt-4 col-md-2\">        \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"radio\"\r\n                            className=\"form-check-input\"                       \r\n                            name=\"switch\"\r\n                            id=\"switch\"\r\n                            value=\"Substitution\"\r\n                            onChange={handleCheckBox}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Substitution\r\n                            </label>\r\n                        </div>\r\n                </div> */}\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label >Substitution/Switch </Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refillType\"\r\n                        id=\"refillType\"\r\n                        value={objValues.refillType}\r\n        \r\n                        onChange={handleInputChange}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        \r\n                        <option value=\"Switch\">Switch</option>\r\n                        <option value=\"Substitution\">Substitution </option>\r\n                        <option value=\"None\">None </option>\r\n                        \r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label >Refill Period(days) *</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"refillPeriod\"\r\n                        id=\"refillPeriod\"\r\n                        value={objValues.refillPeriod}\r\n                        disabled={objValues.visitDate!==null? false : true}\r\n                        onChange={handlRefillPeriod}   \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                 \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"30\">30 </option>\r\n                        <option value=\"60\">60 </option>\r\n                        <option value=\"90\">90 </option>\r\n                        <option value=\"120\">120 </option>\r\n                        <option value=\"150\">150 </option>\r\n                        <option value=\"180\">180 </option>\r\n                    </Input>\r\n                    \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                    <Label for=\"artDate\"> Date of Next Appointment <span style={{ color:\"red\"}}> *</span> </Label>\r\n                    <Input\r\n                        type=\"date\"\r\n                        name=\"nextAppointment\"\r\n                        id=\"nextAppointment\"\r\n                        min={enrollDate}\r\n                        disabled={objValues.refillPeriod!==null? false : true}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.nextAppointment}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        required\r\n                    />\r\n                    </FormGroup>\r\n                </div>\r\n                {showmmdType &&(\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label >MMD Type</Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"mmdType\"\r\n                        id=\"mmdType\"\r\n                        disabled=\"true\"\r\n                        value={mmdType}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    />\r\n                     \r\n                    </FormGroup>\r\n                </div>\r\n            )}\r\n            </div>\r\n            \r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                    <Label >DSD Model</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"dsdModel\"\r\n                        id=\"dsdModel\"\r\n                        value={objValues.dsdModel}\r\n                        onChange={handleInputChange} \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                   \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Facility\">Facility </option>\r\n                        <option value=\"Community\">Community </option>\r\n                        \r\n                    </Input>\r\n                    \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                    <Label >DSD Model Type</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"dsdModelType\"\r\n                        id=\"dsdModelType\"\r\n                        value={objValues.dsdModelType}\r\n                        onChange={handleInputChange} \r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                   \r\n                        >\r\n                        <option value=\"\">Select </option>\r\n                        {dsdModelType.map((value) => (\r\n                            <option key={value.code} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        \r\n                    </Input>\r\n                    \r\n                </FormGroup>\r\n            </div>\r\n           \r\n             {eacStatusObj && eacStatusObj.eacsession && eacStatusObj.eacsession!=='Default' && (//This is to display current EAC of a patient if they have a session that is currently opened\r\n            <>\r\n                <h3>Ehanced Adherance Counseling</h3>\r\n                <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Viral Load Result</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"viralLoad\"\r\n                            id=\"viralLoad\"\r\n                            disabled\r\n                            value={eacStatusObj.viralLoad}\r\n                            \r\n                        />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Date of Last Viral Load</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateOfViralLoad\"\r\n                            id=\"dateOfViralLoad\"\r\n                            disabled\r\n                            value={eacStatusObj.dateOfViralLoad}\r\n                    />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                \r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >EAC Status</Label>\r\n                        <p>{eacStatusObj.eacsession}</p>\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                        <Label >Date of EAC</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"eacsessionDate\"\r\n                            id=\"eacsessionDate\"\r\n                            disabled\r\n                            value={eacStatusObj.eacsessionDate}\r\n                        />\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n                </div>\r\n            </>)}\r\n            <hr/>\r\n            <LabelSui as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>ART DRUGS</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-xs-5 col-sm-5 col-md-5 col-lg-5\">\r\n                <FormGroup>\r\n                <Label >Select Regimen Line </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.regimen}\r\n                    onChange={handleSelectedRegimen}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                    {patientAge >15 &&  (\r\n                          <>\r\n                            {adultArtRegimenLine.map((value) => (\r\n                              <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                              </option>\r\n                            ))}\r\n                          </>\r\n                    )}\r\n                    {patientAge <=17 &&  (\r\n                        <>\r\n                        {childRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                            {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>\r\n                    )}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-xs-5 col-sm-5 col-md-5 col-lg-5\">\r\n                <FormGroup>\r\n                <Label >Regimen </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombination}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {regimenType.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            \r\n            {/* List of Regimen Drug selected  */}\r\n            {showRegimen   ? \r\n                (\r\n                    <>\r\n                        <Card>\r\n                        <CardBody>\r\n                        <h4>Drugs Information </h4>\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"noCombination\"\r\n                        id=\"noCombination\"\r\n                        onChange={handleCheckBoxRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        Has no combination\r\n                        </label>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  >Regimen Name </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Frequency </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Duration </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Prescribed</div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Dispensed</div>\r\n                        </div>\r\n                        {regimenDrug.map((input, index) => (\r\n                            <>\r\n                                <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\"  >\r\n                                    <FormGroup>\r\n                                    <Label ><b>{input.name } {input.strength!==\"\" ? input.strength :\"\"}</b></Label>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        name=\"id\"\r\n                                        id=\"id\"\r\n                                        value={input.id}  \r\n                                        onChange={event => handleFormChange(index, event)}                                    \r\n                                        required\r\n                                        >                                       \r\n                                    </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"frequency\"\r\n                                        id=\"frequency\"\r\n                                        //value={input.frequency}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                    >\r\n                                        <option value='' selected>Select</option>\r\n                                        <option value='1'>OD</option>\r\n                                        <option value='2'>BD</option>\r\n                                        <option value='4'>2BD</option>\r\n                                        <option value='6'>OD/BD</option>\r\n                                        <option value='8'>QDS</option>\r\n                                        <option value='10'>3ce/Week</option>\r\n                                    </Input>\r\n                                    {errors.frequency !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.frequency}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={input.duration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        //disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"prescribed\"\r\n                                        id=\"prescribed\"\r\n                                        value={(input.frequency && input.frequency!==\"\"? input.frequency * input.duration : 0)}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"dispense\"\r\n                                        id=\"dispense\"\r\n                                        value={input.dispense}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    {errors.dispense !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dispense}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        ))}\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  ></div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalPrescribed}</b></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalDispensed}</b></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addDrug}  size='small' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        \r\n                        </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                        <br/>\r\n                    </>                  \r\n                )\r\n                :\r\n                \"\"\r\n                }\r\n            {/* End of List of Regimen Drug selected  */}\r\n            <LabelSui as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>OI DRUGS</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >OI's </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenOI}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    {patientAge >15 &&  (\r\n                        <>  \r\n                        {iptEligibilty.IPTEligibility===true ? //Logic to check for TPT eligibility to filter TPT drugs\r\n                        (<>\r\n                            {oIRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            {oIRegimenLine.filter((x)=> x.id!==15).map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                       }             \r\n                        \r\n                      </>\r\n                    )}\r\n                    {patientAge <=15 &&  (\r\n                    <>\r\n                    {iptEligibilty.IPTEligibility===true ? //Logic to check for TPT eligibility to filter TPT drugs for children\r\n                        (<>\r\n                            {oIRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                        :\r\n                        (<>\r\n                            {oIRegimenLine.filter((x)=> x.id!==15).map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                        </>)\r\n                       }   \r\n                    </>\r\n                    )}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Drugs</Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationOI}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    {regimenTypeOI.map((value) => (\r\n                        <option key={value.id} value={value.value}>\r\n                            {value.label}\r\n                        </option>\r\n                    ))}\r\n                                \r\n                        \r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            \r\n            { iptEligibilty.IPTEligibility===true  && ( //iptEligibilty check to display Visit type\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Visit Type</Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"iptType\"\r\n                    id=\"iptType\"\r\n                    value={objValues.iptType}\r\n                    onChange={handleInputChange} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    \r\n                    {iptType.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                            {value.display}\r\n                        </option>\r\n                    ))}\r\n                      \r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            )}\r\n            {/* Display List of the OI drugs selected */}\r\n            {showRegimenOI  ? \r\n                (\r\n                    <>\r\n                        <Card>\r\n                        <CardBody>\r\n                        <h4>Drugs Information </h4>\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"noCombination\"\r\n                        id=\"noCombination\"\r\n                        onChange={handleCheckBoxRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        Has no combination\r\n                        </label>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  >Regimen Name </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Frequency </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Duration </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Prescribed</div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Dispensed</div>\r\n                        </div>\r\n                        {regimenDrug.map((input, index) => (\r\n                            <>\r\n                                <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\"  >\r\n                                    <FormGroup>\r\n                                    <Label ><b>{input.name } {input.strength!==\"\" ? input.strength :\"\"}</b></Label>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        name=\"id\"\r\n                                        id=\"id\"\r\n                                        value={input.id}  \r\n                                        onChange={event => handleFormChange(index, event)}                                    \r\n                                        required\r\n                                        >                                       \r\n                                    </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"frequency\"\r\n                                        id=\"frequency\"\r\n                                        //value={input.frequency}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                    >\r\n                                        <option value='' selected>Select</option>\r\n                                        <option value='1'>OD</option>\r\n                                        <option value='2'>BD</option>\r\n                                        <option value='4'>2BD</option>\r\n                                        <option value='6'>OD/BD</option>\r\n                                        <option value='8'>QDS</option>\r\n                                        <option value='10'>3ce/Week</option>\r\n                                    </Input>\r\n                                    {errors.frequency !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.frequency}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={input.duration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        //disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"prescribed\"\r\n                                        id=\"prescribed\"\r\n                                        value={(input.frequency && input.frequency!==\"\"? input.frequency * input.duration : 0)}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"dispense\"\r\n                                        id=\"dispense\"\r\n                                        value={input.dispense}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    {errors.dispense !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dispense}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        ))}\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  ></div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalPrescribed}</b></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalDispensed}</b></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addDrugOI}  size='small' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        \r\n                        </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                        <br/>\r\n                    </>                  \r\n                )\r\n                :\r\n                \"\"\r\n                }\r\n            {/* End of List of OI Drug selected  */}\r\n            \r\n            <LabelSui as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>TB DRUG</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >TB Treatment </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenTB}  \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                    {patientAge >15 &&  (\r\n                        <>            \r\n                        {tbRegimenLine.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.description}\r\n                            </option>\r\n                        ))}\r\n                      </>\r\n                    )}\r\n                    {patientAge <=15 &&  (\r\n                    <>\r\n                    {childrenTB.map((value) => (\r\n                        <option key={value.id} value={value.id}>\r\n                        {value.description}\r\n                        </option>\r\n                    ))}\r\n                    </>\r\n                    )}\r\n                \r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Drugs </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationTB} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {regimenTypeTB.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            {showRegimenTB && regimenDrug && regimenDrug.length >0 ? \r\n                (\r\n                    <>\r\n                        <Card>\r\n                        <CardBody>\r\n                        <h4>Drugs Information </h4>\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"noCombination\"\r\n                        id=\"noCombination\"\r\n                        onChange={handleCheckBoxRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        Has no combination\r\n                        </label>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  >Regimen Name </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Frequency </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Duration </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Prescribed</div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Dispensed</div>\r\n                        </div>\r\n                        {regimenDrug.map((input, index) => (\r\n                            <>\r\n                                <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\"  >\r\n                                    <FormGroup>\r\n                                    <Label ><b>{input.name } {input.strength!==\"\" ? input.strength :\"\"}</b></Label>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        name=\"id\"\r\n                                        id=\"id\"\r\n                                        value={input.id}  \r\n                                        onChange={event => handleFormChange(index, event)}                                    \r\n                                        required\r\n                                        >                                       \r\n                                    </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"frequency\"\r\n                                        id=\"frequency\"\r\n                                        //value={input.frequency}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                    >\r\n                                        <option value='' selected>Select</option>\r\n                                        <option value='1'>OD</option>\r\n                                        <option value='2'>BD</option>\r\n                                        <option value='4'>2BD</option>\r\n                                        <option value='6'>OD/BD</option>\r\n                                        <option value='8'>QDS</option>\r\n                                        <option value='10'>3ce/Week</option>\r\n                                    </Input>\r\n                                    {errors.frequency !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.frequency}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={input.duration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        //disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"prescribed\"\r\n                                        id=\"prescribed\"\r\n                                        value={(input.frequency && input.frequency!==\"\"? input.frequency * input.duration : 0)}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"dispense\"\r\n                                        id=\"dispense\"\r\n                                        value={input.dispense}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    {errors.dispense !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dispense}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        ))}\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  ></div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalPrescribed}</b></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalDispensed}</b></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addDrugTB}  size='small' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        \r\n                        </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                        <br/>\r\n                    </>                  \r\n                )\r\n                :\r\n                \"\"\r\n                }\r\n                        \r\n            <LabelSui as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>OTHER DRUG</h4>\r\n            </LabelSui>\r\n            <br/>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Other Drugs </Label>\r\n                \r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimen\"\r\n                    id=\"regimen\"\r\n                    value={objValues.drugName}\r\n                    onChange={handleSelectedRegimenOther} \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\">Select </option>\r\n                                    \r\n                        {otherDrugs.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <FormGroup>\r\n                <Label >Drug</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    value={objValues.regimenId}\r\n                    onChange={handleSelectedRegimenCombinationOthers}   \r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={objValues.refillPeriod!==null? false : true}                 \r\n                    >\r\n                    <option value=\"\" >Select </option>\r\n                    {regimenTypeOther.map((value) => (\r\n                            <option key={value.id} value={value.value}>\r\n                                {value.label}\r\n                            </option>\r\n                        ))}\r\n                </Input>\r\n                \r\n                </FormGroup>\r\n            </div>\r\n            \r\n            {showRegimenOthers && regimenDrug && regimenDrug.length >0 ? \r\n                (\r\n                    <>\r\n                        <Card>\r\n                        <CardBody>\r\n                        <h4>Drugs Information </h4>\r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"                       \r\n                        name=\"noCombination\"\r\n                        id=\"noCombination\"\r\n                        onChange={handleCheckBoxRegimen}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        />\r\n                        <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"basic_checkbox_1\"\r\n                        >\r\n                        Has no combination\r\n                        </label>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  >Regimen Name </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Frequency </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Duration </div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Prescribed</div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  >Quantity Dispensed</div>\r\n                        </div>\r\n                        {regimenDrug.map((input, index) => (\r\n                            <>\r\n                                <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\"  >\r\n                                    <FormGroup>\r\n                                    <Label ><b>{input.name } {input.strength!==\"\" ? input.strength :\"\"}</b></Label>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        name=\"id\"\r\n                                        id=\"id\"\r\n                                        value={input.id}  \r\n                                        onChange={event => handleFormChange(index, event)}                                    \r\n                                        required\r\n                                        >                                       \r\n                                    </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"frequency\"\r\n                                        id=\"frequency\"\r\n                                        //value={input.frequency}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                    >\r\n                                        <option value='' selected>Select</option>\r\n                                        <option value='1'>OD</option>\r\n                                        <option value='2'>BD</option>\r\n                                        <option value='4'>2BD</option>\r\n                                        <option value='6'>OD/BD</option>\r\n                                        <option value='8'>QDS</option>\r\n                                        <option value='10'>3ce/Week</option>\r\n                                    </Input>\r\n                                    {errors.frequency !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.frequency}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={input.duration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        //disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"prescribed\"\r\n                                        id=\"prescribed\"\r\n                                        value={(input.frequency && input.frequency!==\"\"? input.frequency * input.duration : 0)}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        disabled\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-2\">\r\n                                    <FormGroup>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"dispense\"\r\n                                        id=\"dispense\"\r\n                                        value={input.dispense}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        onChange={event => handleFormChange(index, event)}\r\n                                        required\r\n                                        >\r\n                                        \r\n                                    </Input>\r\n                                    {errors.dispense !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dispense}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        ))}\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-4\"  ></div>\r\n                            \r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalPrescribed}</b></div>\r\n                            <div className=\"form-group mb-3 col-md-2\"  ><b>Total : {TotalDispensed}</b></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  onClick={addDrugOthers}  size='small' style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                        \r\n                        </CardBody>\r\n                        </Card>\r\n                        <br/>\r\n                        <br/>\r\n                    </>                  \r\n                )\r\n                :\r\n                \"\"\r\n                }\r\n            {/* End of List of Regimen Drug selected  */}\r\n\r\n                 {regimenDrugList.length >0 \r\n                    ?\r\n                    <List>\r\n                    <Table  striped responsive>\r\n                        <thead >\r\n                            <tr>\r\n                                <th>Regimen Drug</th>\r\n                                <th>Frequency</th>\r\n                                <th>Duration</th>\r\n                                <th>Quantity Prescribed</th>\r\n                                <th>Quantity Dispensed </th>\r\n                                \r\n                                <th ></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {regimenDrugList.map((regimenDrugObj, index) => (\r\n\r\n                        <DrugDispensedLists\r\n                            key={index}\r\n                            index={index}\r\n                            regimenDrugObj={regimenDrugObj}\r\n                            removeAttempt={removeAttempt}\r\n                        />\r\n                        ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    </List>\r\n                    :\r\n                    \"\"\r\n                }    \r\n            </div>                              \r\n            {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n                {regimenDrugList.length >0 && (\r\n                <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    disabled={saving}\r\n                    \r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                </MatButton>\r\n                )}\r\n                </form>\r\n            </CardBody>\r\n        </Card> \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DrugDispensedLists({\r\n    regimenDrugObj,\r\n    index,\r\n    removeAttempt,\r\n  }) {\r\n   function FrequencyLabel(count){\r\n            if(count==='1'){\r\n                return 'OD'\r\n            }else if(count==='2'){\r\n                return 'BD'\r\n            }else if(count==='4'){\r\n                return '2BD'\r\n            }else if(count==='6'){\r\n                return 'OD/BD'\r\n            }else if(count==='8'){\r\n                return 'QDS'\r\n            }else if(count==='10'){\r\n                return '3ce/Week'\r\n            }else{\r\n                return ''\r\n            }\r\n   }\r\n    return (\r\n            <tr>\r\n                <th>{regimenDrugObj.name} {regimenDrugObj.strength!==\"\"? regimenDrugObj.strength :\"\"}</th>\r\n                <th>{FrequencyLabel(regimenDrugObj.frequency)}</th>\r\n                <th>{regimenDrugObj.duration}</th>\r\n                <th>{regimenDrugObj.frequency * regimenDrugObj.duration}</th>\r\n                <th>{regimenDrugObj.dispense}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeAttempt(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\nexport default Pharmacy;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Laboratory\\LabHistory.js",["1233","1234","1235","1236","1237","1238","1239","1240"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport \"@reach/menu-button/styles.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react';\r\nimport {Alert } from \"react-bootstrap\";\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\nconst LabHistory = (props) => {    \r\n    const [orderList, setOrderList] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [moduleStatus, setModuleStatus]= useState(\"0\")\r\n    const [buttonHidden, setButtonHidden]= useState(false);\r\n\r\n    useEffect(() => {\r\n      CheckLabModule();\r\n\r\n        LabOrders()\r\n\r\n      }, [props.patientObj.id]);\r\n    //GET LIST OF Patients\r\n    async function LabOrders() {\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}laboratory/rde-orders/patients/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setLoading(false)\r\n                setOrderList(response.data);                \r\n            })\r\n            .catch((error) => {  \r\n                setLoading(false)  \r\n            });        \r\n    }\r\n  //Check if Module Exist\r\n  const CheckLabModule =()=>{\r\n    axios\r\n        .get(`${baseUrl}modules/check?moduleName=laboratory`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            if(response.data===true){\r\n            setModuleStatus(\"1\")\r\n            setButtonHidden(false)\r\n            }\r\n            else{\r\n                setModuleStatus(\"2\")\r\n                //toast.error(\"Laboratory module is not install\")\r\n                setButtonHidden(true)\r\n            }\r\n        }).catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n  }\r\n    const labStatus =(status)=> {\r\n        console.log(status)\r\n          if(status===0){\r\n            return \"blue\"\r\n          }else if(status===1){\r\n            return \"teal\"\r\n          }else if(status===2){\r\n            return \"green\"\r\n          }else if(status===3){\r\n            return \"red\"\r\n          }else if(status===4){\r\n            return \"orange\"\r\n          }else if(status===5){\r\n            return \"dark\"\r\n          }else {\r\n            return \"grey\"\r\n          }\r\n      }\r\n\r\n      const onClickHome = (row, actionType) =>{  \r\n        // props.setActiveContent({...props.activeContent, route:'pharmacy', activeTab:\"hsitory\"})\r\n         props.setActiveContent({...props.activeContent, route:'lab-view', id:row.id, activeTab:\"history\", actionType:actionType, obj:row})\r\n     }\r\n\r\n     const LoadDeletePage = (row) =>{  \r\n      axios.delete(`${baseUrl}laboratory/rde-orders/tests/${row.id}`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n              toast.success(\"Record Deleted Successfully\");\r\n              LabOrders()\r\n          })\r\n          .catch((error) => {\r\n              if(error.response && error.response.data){\r\n                  let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                  toast.error(errorMessage);\r\n                }\r\n                else{\r\n                  toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n          }); \r\n   }\r\n\r\n\r\n  return (\r\n    <div>\r\n            <br/>\r\n            {moduleStatus===\"1\" && (\r\n              <MaterialTable\r\n              icons={tableIcons}\r\n                title=\"Laboratory Order History\"\r\n                columns={[\r\n                // { title: \" ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Test Group\",\r\n                    field: \"testGroup\",\r\n                  },\r\n                  { title: \"Test Name\", field: \"testName\", filtering: false },\r\n                  { title: \"Lab Number\", field: \"labNumber\", filtering: false },\r\n                  { title: \"Date Sample Collected\", field: \"sampleCollectionDate\", filtering: false },\r\n                  { title: \"Date Assayed\", field: \"dateAssayed\", filtering: false },\r\n                  { title: \"Date Result Received\", field: \"dateResultReceived\", filtering: false },\r\n                  { title: \"VL Indication\", field: \"viralLoadIndication\", filtering: false },\r\n                  { title: \"Action\", field: \"Action\", filtering: false },\r\n\r\n                ]}\r\n                isLoading={loading}\r\n                data={ orderList.map((row) => ({\r\n                    //Id: manager.id,\r\n                    testGroup:row.labTestGroupName,\r\n                    testName: row.labTestName,\r\n                    labNumber: row.labNumber,\r\n                    sampleCollectionDate: row.sampleCollectionDate,    \r\n                    dateAssayed: row.dateAssayed,\r\n                    dateResultReceived: row.dateResultReceived, \r\n                    viralLoadIndication: row.viralLoadIndicationName,\r\n                    Action: \r\n                    // (\r\n                    //   <ButtonGroup variant=\"contained\" \r\n                    //       aria-label=\"split button\"\r\n                    //       style={{backgroundColor:'rgb(153, 46, 98)', height:'30px'}}\r\n                    //       size=\"large\"\r\n                    //       onClick={()=>onClickHome(row)}\r\n                    //   >\r\n                    //   <Button\r\n                    //   color=\"primary\"\r\n                    //   size=\"small\"\r\n                    //   aria-label=\"select merge strategy\"\r\n                    //   aria-haspopup=\"menu\"\r\n                    //   style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                    //   >\r\n                    //       <MdEditNote style={{marginRight: \"5px\"}}/> {\" \"}{\" \"} Update\r\n                    //   </Button>\r\n                    //   </ButtonGroup>\r\n                    // ), \r\n                    <div>\r\n                              <Menu.Menu position='right'  >\r\n                              <Menu.Item >\r\n                                  <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                  <Dropdown item text='Action'>\r\n\r\n                                  <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'view')}><Icon name='eye' />View</Dropdown.Item>\r\n                                    <Dropdown.Item  onClick={()=>onClickHome(row, 'update')}><Icon name='edit' />Update</Dropdown.Item>\r\n                                      <Dropdown.Item  onClick={()=>LoadDeletePage(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                  </Dropdown.Menu>\r\n                              </Dropdown>\r\n                                  </Button>\r\n                              </Menu.Item>\r\n                              </Menu.Menu>\r\n                          </div>\r\n                    }))}\r\n              \r\n                          options={{\r\n                            headerStyle: {\r\n                                backgroundColor: \"#014d88\",\r\n                                color: \"#fff\",\r\n                            },\r\n                            searchFieldStyle: {\r\n                                width : '200%',\r\n                                margingLeft: '250px',\r\n                            },\r\n                            filtering: false,\r\n                            exportButton: false,\r\n                            searchFieldAlignment: 'left',\r\n                            pageSizeOptions:[10,20,100],\r\n                            pageSize:10,\r\n                            debounceInterval: 400\r\n                        }}\r\n              />\r\n            )}\r\n            {moduleStatus===\"2\" && (\r\n              <>\r\n              <Alert\r\n                  variant=\"warning\"\r\n                  className=\"alert-dismissible solid fade show\"\r\n              >\r\n                  <p>Laboratory Module is not install</p>\r\n              </Alert>\r\n            \r\n              </>\r\n              )} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ArtCommencement.js",["1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label,InputGroup,\r\n        InputGroupText,\r\n        InputGroupButtonDropdown,\r\n        InputGroupAddon,\r\n        Input,\r\n        Dropdown,\r\n        DropdownToggle,\r\n        DropdownMenu,\r\n        DropdownItem} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst ArtCommencement = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const enrollDate = patientObj && patientObj.enrollment ? patientObj.enrollment.dateOfRegistration : null\r\n    //let history = useHistory();\r\n    let gender=\"\"\r\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\r\n    const [splitButtonOpen, setSplitButtonOpen] = React.useState(false);\r\n    const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\r\n    const toggleSplit = () => setSplitButtonOpen(!splitButtonOpen);\r\n    const [heightValue, setHeightValue]= useState(\"cm\")\r\n\r\n    const classes = useStyles()\r\n    const [clinicalStage, setClinicalStage] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [viraLoadStart, setViraLoadStart] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [tbStatus, setTbStatus] = useState([]);\r\n    const [regimenLine, setRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [pregancyStatus, setPregancyStatus] = useState([]);\r\n    const [functionalStatus, setFunctionalStatus] = useState([]);\r\n    const [objValues, setObjValues] = useState({\r\n                                                personId:props.patientObj.id,\r\n                                                visitDate: null,\r\n                                                viralLoad: null,\r\n                                                whoStagingId: null,\r\n                                                clinicalStageId: null,\r\n                                                cd4: null,\r\n                                                cd4Percentage: \"\",\r\n                                                isCommencement: true,\r\n                                                functionalStatusId: \"\",\r\n                                                clinicalNote: \"\",\r\n                                                hivEnrollmentId: \"\",\r\n                                                vitalSignDto:\"\",\r\n                                                facilityId:1,\r\n                                                regimenTypeId: 0,\r\n                                                regimenId:0 ,\r\n                                                viralLoadAtStartOfArt:\"\",\r\n                                                isViralLoadAtStartOfArt :null,\r\n                                                dateOfViralLoadAtStartOfArt: null                                                  \r\n\r\n                                                });\r\n\r\n    const [vital, setVitalSignDto]= useState({\r\n                                                bodyWeight: \"\",\r\n                                                diastolic:\"\",\r\n                                                encounterDate: \"\",\r\n                                                facilityId: 1,\r\n                                                height: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                serviceTypeId: 1,\r\n                                                systolic:\"\" \r\n                                            })\r\n      //Vital signs clinical decision support \r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                                                        bodyWeight: \"\",\r\n                                                                        diastolic: \"\",\r\n                                                                        height: \"\",\r\n                                                                        systolic: \"\"\r\n                                                                    })\r\n\r\n    useEffect(() => {\r\n        FunctionalStatus();\r\n        WhoStaging();\r\n        TBStatus();\r\n        PreganacyStatus();\r\n        RegimenLine();\r\n         gender =props.patientObj.gender && props.patientObj.gender.display ? props.patientObj.gender.display : null\r\n      }, [props.patientObj]);\r\n      //Get list of WhoStaging\r\n      const WhoStaging =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setClinicalStage(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n        }\r\n        //Get list of RegimenLine\r\n        const RegimenLine =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/regimen/types`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setRegimenLine(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n        }\r\n         //Get list of RegimenLine\r\n         const RegimenType =(id)=>{\r\n            axios\r\n               .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                   //console.log(response.data);\r\n                   setRegimenType(response.data);\r\n               })\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n            }\r\n        //Get list of PREGANACY_STATUS\r\n      const PreganacyStatus =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setPregancyStatus(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n        }\r\n        ///GET LIST OF FUNCTIONAL%20_STATUS\r\n        async function FunctionalStatus() {\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/FUNCTIONAL%20_STATUS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setFunctionalStatus(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        // TB STATUS\r\n        const TBStatus =()=>{\r\n            axios\r\n               .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                   //console.log(response.data);\r\n                   setTbStatus(response.data);\r\n               })\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n         }\r\n\r\n        const handleInputChange = e => {\r\n            setErrors({...temp, [e.target.name]:\"\"})\r\n            \r\n                if(e.target.name==='isViralLoadAtStartOfArt' && e.target.value!==\"\"){\r\n                    if(e.target.value==='true'){\r\n                        setViraLoadStart(true)\r\n                        setObjValues ({...objValues,  [e.target.name]: true});\r\n                    }else{\r\n                        setObjValues({...objValues, [e.target.name]:false})\r\n                        setViraLoadStart(false)\r\n                    }\r\n                }\r\n                if(e.target.name==='cd4Percentage' && e.target.value!==\"\"){\r\n                    setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n                }\r\n                if(e.target.name==='cd4' && e.target.value!==\"\"){\r\n                    setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n                }\r\n                //.replace(/\\D/g, '')\r\n        }\r\n        const handleInputChangeVitalSignDto = e => { \r\n            setErrors({...temp, [e.target.name]:\"\"})           \r\n            setVitalSignDto ({...vital,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        }\r\n        const handleSelecteRegimen = e => { \r\n            let regimenID=  e.target.value\r\n            setObjValues ({...objValues, regimenId:regimenID});\r\n            RegimenType(regimenID)           \r\n            setErrors({...temp, [e.target.name]:\"\"})\r\n        }\r\n        //to check the input value for clinical decision \r\n        const handleInputValueCheckHeight =(e)=>{\r\n            if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n            const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n            setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n            }else{\r\n            setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n            }\r\n        }\r\n        const handleInputValueCheckBodyWeight =(e)=>{\r\n            if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n            const message =\"Body weight must not be greater than 150 and less than 3\"\r\n            setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n            }else{\r\n            setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n            }\r\n        }\r\n        const handleInputValueCheckSystolic =(e)=>{\r\n            if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n            const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n            setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n            }else{\r\n            setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n            }\r\n        }\r\n        const handleInputValueCheckDiastolic =(e)=>{\r\n            if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n            const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n            setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n            }else{\r\n            setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n            }\r\n        }\r\n        // const handleInputChangeVitalStart =(e)=>{\r\n        //     if(e.target.value===true ){\r\n        //         setViraLoadStart(true)\r\n        //         setObjValues({...objValues, isViralLoadAtStartOfArt:true})\r\n        //     }else{\r\n        //         setObjValues({...objValues, isViralLoadAtStartOfArt:false})\r\n        //         setViraLoadStart(false)\r\n        //     }\r\n        // }\r\n\r\n        //FORM VALIDATION\r\n        const validate = () => {\r\n            temp.visitDate = objValues.visitDate ? \"\" : \"This field is required\"\r\n            temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\"\r\n            temp.regimenTypeId = objValues.regimenTypeId ? \"\" : \"This field is required\"\r\n            temp.whoStagingId = objValues.whoStagingId ? \"\" : \"This field is required\"\r\n            temp.functionalStatusId = objValues.functionalStatusId ? \"\" : \"This field is required\"\r\n            //temp.tbStatusId = objValues.tbStatusId ? \"\" : \"This field is required\"\r\n            temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n            temp.height = vital.height ? \"\" : \"This field is required\"\r\n            temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n            temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"\r\n            setErrors({\r\n                ...temp\r\n                })    \r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n        /**** Submit Button Processing  */\r\n        const handleSubmit = (e) => {                  \r\n            e.preventDefault(); \r\n            if(validate()){ \r\n                   \r\n            objValues.personId = props.patientObj.id\r\n            vital.encounterDate = objValues.visitDate\r\n            vital.personId=props.patientObj.id\r\n            objValues.vitalSignDto= vital\r\n            objValues.hivEnrollmentId= props.patientObj.enrollment.id\r\n            objValues.clinicalStageId = objValues.whoStagingId \r\n           \r\n            setSaving(true);\r\n            axios.post(`${baseUrl}hiv/art/commencement/`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            \r\n            )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.setArt(true)\r\n                  props.patientObj.commenced=true\r\n                  toast.success(\"Record save successful\");\r\n                  props.toggle()\r\n                  props.PatientCurrentStatus()\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n              });\r\n            }\r\n          \r\n        }\r\n\r\n        \r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"xl\">\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#014d88\"}}>\r\n                <span  style={{color:\"#fff\"}}> ART Commencement </span>\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                    style={{color:'#fff', backgroundColor:'#fff'}}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>                   \r\n                        <Card >\r\n                            <CardBody>\r\n                            <form >\r\n                                <div className=\"row\">\r\n                               \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label for=\"artDate\">ART Start Date  * </Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"visitDate\"\r\n                                            id=\"visitDate\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.visitDate}\r\n                                            min={enrollDate}\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        />\r\n                                         {errors.visitDate !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.visitDate}</span>\r\n                                            ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label for=\"cd4\">CD4 at start of ART </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"cd4\"\r\n                                            id=\"cd4\"\r\n                                            min={0}\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.cd4}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            \r\n                                        />\r\n                                       \r\n                                        </FormGroup>\r\n                                    </div>\r\n                              \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"cd4Percentage\">CD4%</Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"cd4Percentage\"\r\n                                        id=\"cd4Percentage\"\r\n                                        min={0}\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.cd4Percentage}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                        \r\n                                    />\r\n                                   \r\n                                    </FormGroup>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Original Regimen Line  </Label>\r\n                                    <Input\r\n                                            type=\"select\"\r\n                                            name=\"regimenId\"\r\n                                            id=\"regimenId\"\r\n                                            value={objValues.regimenId}\r\n                                            onChange={handleSelecteRegimen}\r\n                                            required\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            >\r\n                                             <option value=\"\"> Select</option>\r\n                      \r\n                                                {regimenLine.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.description}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.regimenId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.regimenId}</span>\r\n                                            ) : \"\" }\r\n                                    </FormGroup>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Original Regimen</Label>\r\n                                    <Input\r\n                                            type=\"select\"\r\n                                            name=\"regimenTypeId\"\r\n                                            id=\"regimenTypeId\"\r\n                                            value={objValues.regimenTypeId}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                            >\r\n                                             <option value=\"\"> Select</option>\r\n                      \r\n                                                {regimenType.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.description}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.regimenTypeId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.regimenTypeId}</span>\r\n                                            ) : \"\" }\r\n                                    </FormGroup>\r\n                                    </div>\r\n                                \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Viral Load at Start of ART </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"isViralLoadAtStartOfArt\"\r\n                                            id=\"isViralLoadAtStartOfArt\"\r\n                                            onChange={handleInputChange}                                            \r\n                                            value={objValues.isViralLoadAtStartOfArt}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\"> Select</option>\r\n                                            <option value=\"true\"> YES</option>\r\n                                            <option value=\"false\"> NO</option>\r\n                                        </Input>\r\n                                        \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    {viraLoadStart && (\r\n                                    <>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Viral Load at Start of ART Result</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"viralLoadAtStartOfArt\"\r\n                                            id=\"viralLoadAtStartOfArt\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.viralLoadAtStartOfArt}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        />\r\n                                        \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Date of Viral Load at Start of ART</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateOfViralLoadAtStartOfArt\"\r\n                                            id=\"dateOfViralLoadAtStartOfArt\"\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfViralLoadAtStartOfArt}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        />\r\n                                        \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    </>\r\n                                    )}\r\n\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >WHO Staging</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"whoStagingId\"\r\n                                            id=\"whoStagingId\"\r\n                                            value={objValues.whoStagingId}\r\n                                            onChange={handleInputChange}\r\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                            >\r\n                                             <option value=\"\"> Select</option>\r\n                      \r\n                                                {clinicalStage.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.whoStagingId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.whoStagingId}</span>\r\n                                            ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Functional Status</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"functionalStatusId\"\r\n                                            id=\"functionalStatusId\"\r\n                                            value={objValues.functionalStatusId}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                            >\r\n                                             <option value=\"\"> Select</option>\r\n                      \r\n                                                {functionalStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.functionalStatusId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.functionalStatusId}</span>\r\n                                            ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    {objValues.isViralLoadAtStartOfArt && objValues.isViralLoadAtStartOfArt!==null && (<div className=\"form-group mb-3 col-md-8\"></div>)}\r\n                                    {!objValues.isViralLoadAtStartOfArt && objValues.isViralLoadAtStartOfArt!==null && (<div className=\"form-group mb-3 col-md-4\"></div>)}\r\n                                    {props.patientObj.sex===\"Female\" ? (\r\n                                        <>\r\n                                        <div className=\"form-group mb-3 col-md-4\">\r\n                                            <FormGroup>\r\n                                            <Label >Pregnancy Status</Label>\r\n                                            <Input\r\n                                                type=\"select\"\r\n                                                name=\"pregancyStatus\"\r\n                                                id=\"pregancyStatus\"\r\n                                                disabled\r\n                                                onChange={handleInputChange}\r\n                                                //value=\"72\"\r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                                \r\n\r\n                                            >\r\n                                                <option value=\"\"> Select</option>\r\n                        \r\n                                                {pregancyStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </Input>\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        {props.patientObj.enrollment && props.patientObj.enrollment.pregnancyStatusId!=='72' && (\r\n                                        <div className=\"form-group mb-3 col-md-4\">\r\n                                            <FormGroup>\r\n                                            <Label >LMP</Label>\r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"LMPDate\"\r\n                                                id=\"LMPDate\"\r\n                                                onChange={handleInputChange}\r\n                                                value={props.patientObj.enrollment.dateOfLpm}\r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                                disabled\r\n                                            />\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        )}\r\n                                        </>\r\n                                    ) :\r\n                                    \"\"\r\n                                    }\r\n                                    {/* <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >TB Status</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"tbStatusId\"\r\n                                            id=\"tbStatusId\"\r\n                                            value={objValues.tbStatusId}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                            >\r\n                                             <option value=\"\"> Select</option>\r\n                      \r\n                                                {tbStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>\r\n                                        {errors.tbStatusId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                            ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div> */}\r\n                                    <div className=\"row\">\r\n                                    <div className=\" mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Body Weight</Label>\r\n                                        <InputGroup> \r\n                                            <Input \r\n                                                type=\"text\"\r\n                                                name=\"bodyWeight\"\r\n                                                id=\"bodyWeight\"\r\n                                                onChange={handleInputChangeVitalSignDto}\r\n                                                min=\"3\"\r\n                                                max=\"150\"\r\n                                                value={vital.bodyWeight}\r\n                                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                            />\r\n                                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                               kg\r\n                                            </InputGroupText>\r\n                                        </InputGroup>\r\n                                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                                        ) : \"\"}\r\n                                        {errors.bodyWeight !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                                        ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>                                   \r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                        <FormGroup>\r\n                                        <Label >Height</Label>\r\n                                        <InputGroup> \r\n                                        <InputGroupText\r\n                                                addonType=\"append\"\r\n                                                isOpen={dropdownOpen}\r\n                                                toggle={toggleDropDown}\r\n                                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                                >\r\n                                                cm\r\n                                        </InputGroupText>\r\n                                            <Input \r\n                                                type=\"text\"\r\n                                                name=\"height\"\r\n                                                id=\"height\"\r\n                                                onChange={handleInputChangeVitalSignDto}\r\n                                                value={vital.height}\r\n                                                min=\"48.26\"\r\n                                                max=\"216.408\"\r\n                                                onKeyUp={handleInputValueCheckHeight} \r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                            />\r\n                                             <InputGroupText\r\n                                                addonType=\"append\"\r\n                                                isOpen={dropdownOpen}\r\n                                                toggle={toggleDropDown}\r\n                                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                                >\r\n                                                {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                                            </InputGroupText>\r\n                                        </InputGroup>\r\n                                        {vitalClinicalSupport.height !==\"\" ? (\r\n                                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                                        ) : \"\"}\r\n                                        {errors.height !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.height}</span>\r\n                                        ) : \"\" }\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-4\">\r\n                                            <FormGroup>\r\n                                            <Label >BMI</Label>\r\n                                            \r\n                                            <InputGroup> \r\n                                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                                BMI\r\n                                            </InputGroupText>                   \r\n                                            <Input\r\n                                            type=\"number\"\r\n                                            disabled\r\n                                            value={Math.round(vital.bodyWeight/((vital.height * vital.height)/100))}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                            />\r\n                                            </InputGroup>                \r\n                                            </FormGroup>\r\n                                    </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-8\">\r\n                                        <FormGroup>\r\n                                        <Label >Blood Pressure</Label>\r\n                                        <InputGroup> \r\n                                            <Input \r\n                                                type=\"text\"\r\n                                                name=\"systolic\"\r\n                                                id=\"systolic\"\r\n                                                min=\"90\"\r\n                                                max=\"2240\"\r\n                                                onChange={handleInputChangeVitalSignDto}\r\n                                                value={vital.systolic}\r\n                                                onKeyUp={handleInputValueCheckSystolic}\r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                                            />\r\n                                           \r\n                                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                                systolic(mmHg)\r\n                                            </InputGroupText>\r\n                                             <Input \r\n                                                type=\"text\"\r\n                                                name=\"diastolic\"\r\n                                                id=\"diastolic\"\r\n                                                min={0}\r\n                                                max={140}\r\n                                                onChange={handleInputChangeVitalSignDto}\r\n                                                value={vital.diastolic}\r\n                                                onKeyUp={handleInputValueCheckDiastolic} \r\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                             />\r\n                                            \r\n                                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                            diastolic(mmHg)\r\n                                            </InputGroupText>\r\n                                        </InputGroup>\r\n                                        {vitalClinicalSupport.systolic !==\"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                                        ) : \"\"}\r\n                                        {errors.systolic !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.systolic}</span>\r\n                                        ) : \"\" }  \r\n                                        {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                                        ) : \"\"}\r\n                                        {errors.diastolic !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.diastolic}</span>\r\n                                        ) : \"\" }          \r\n                                        </FormGroup>\r\n                                    </div>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group mb-3 col-md-12\">\r\n                                        <FormGroup>\r\n                                        <Label >Clinical Notes</Label>\r\n                                        <Input\r\n                                            type=\"textarea\"\r\n                                            name=\"clinicalNote\"\r\n                                            rows=\"3\" cols=\"50\"\r\n                                            id=\"clinicalNote\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.clinicalNote}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            \r\n                                <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                onClick={handleSubmit}\r\n                                style={{backgroundColor:\"#014d88\"}}\r\n                                >\r\n                                    {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                    ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                    )}\r\n                                </MatButton>\r\n                          \r\n                                <MatButton\r\n                                    variant=\"contained\"\r\n                                    className={classes.button}\r\n                                    startIcon={<CancelIcon style={{color:'#fff'}}/>}  \r\n                                    style={{backgroundColor:'#992E62'}}                              \r\n                                >\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                                </MatButton>\r\n                          \r\n                            </form>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtCommencement;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\EnhancedAdherenceCounseling\\StopEac.js",["1257"],"import React, {useState} from 'react';\r\nimport { Card,CardBody, FormGroup, Label,\r\n        Input,\r\n} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst StopEAC = (props) => {\r\n\r\n    //const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n\r\n    const [objValues, setObjValues] = useState({\r\n                                                id:props.eacObj.id,\r\n                                                reason: \"\",\r\n                                                });\r\n\r\n\r\n        const handleInputChange = e => {\r\n            setErrors({...temp, [e.target.name]:\"\"})\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n               \r\n        }\r\n        //FORM VALIDATION\r\n        const validate = () => {\r\n            //temp.visitDate = objValues.visitDate ? \"\" : \"This field is required\"\r\n            setErrors({\r\n                ...temp\r\n                })    \r\n            return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n        /**** Submit Button Processing  */\r\n        const handleSubmit = (e) => {                  \r\n            e.preventDefault(); \r\n            if(validate()){ \r\n            \r\n            setSaving(true);\r\n            axios.put(`${baseUrl}hiv/eac/stop/${props.eacObj.id}`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            \r\n            )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  //props.setArt(true)\r\n                  //props.patientObj.commenced=true\r\n                  toast.success(\"EAC stop successful\");\r\n                  props.toggle()\r\n                  props.setActiveContent({...props.activeContent, route:'counseling', activeTab:\"home\"})\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                    props.toggle()\r\n                    //props.setActiveContent({...props.activeContent, route:'counseling', activeTab:\"home\"})\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                    props.toggle()\r\n                    //props.setActiveContent({...props.activeContent, route:'counseling', activeTab:\"home\"})\r\n                  }\r\n              });\r\n            }\r\n          \r\n        }\r\n\r\n        \r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#014d88\"}}>\r\n                <span  style={{color:\"#fff\"}}> STOP EAC </span>\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                    style={{color:'#fff', backgroundColor:'#fff'}}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>                   \r\n                        <Card className={classes.root}>\r\n                            <CardBody>\r\n                            <form >\r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-12\">\r\n                                        <FormGroup>\r\n                                        <Label >Reason to stop EAC</Label>\r\n                                        <Input\r\n                                            type=\"textarea\"\r\n                                            name=\"reason\"\r\n                                            rows=\"5\" cols=\"100\"\r\n                                            id=\"reason\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.reason}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                            required\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            \r\n                                <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                onClick={handleSubmit}\r\n                                style={{backgroundColor:\"#014d88\"}}\r\n                                >\r\n                                    {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                    ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                    )}\r\n                                </MatButton>\r\n                          \r\n                                <MatButton\r\n                                    variant=\"contained\"\r\n                                    className={classes.button}\r\n                                    startIcon={<CancelIcon style={{color:'#fff'}}/>}  \r\n                                    style={{backgroundColor:'#992E62'}} \r\n                                    onClick={props.toggle}                             \r\n                                >\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                                </MatButton>\r\n                          \r\n                            </form>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StopEAC;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["1258","1259","1260"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\n\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst PatientnHistory = (props) => {\r\n    const [recentActivities, setRecentActivities] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    let history = useHistory();\r\n    const [notToBeUpdated, setNotToBeUpdated] = useState(['eac', 'eac-session', 'client-tracker']);\r\n    //let patientHistoryObject = []\r\n    const [open, setOpen] = React.useState(false)\r\n    const [saving, setSaving] = useState(false)\r\n    const [record, setRecord] = useState(null)\r\n     const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n        PatientHistory()\r\n    }, [props.patientObj.id]);\r\n    ///GET LIST OF Patients\r\n    const PatientHistory =()=>{\r\n        setLoading(true)\r\n        axios\r\n            .get(`${baseUrl}hiv/patients/${props.patientObj.id}/history/activities`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n            setLoading(false)\r\n                    // let HistoryObject= []\r\n                    // response.data.forEach(function(value, index, array) {\r\n                    //     const dataObj = value.activities \r\n                    //     console.log(dataObj)                 \r\n                    //     if(dataObj[index]) {\r\n                    //         dataObj.forEach(function(value, index, array) {\r\n                    //             HistoryObject.push(value)\r\n                    //         })                       \r\n                    //     }                   \r\n                    // });\r\n                setRecentActivities(response.data)\r\n            })\r\n\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const LoadViewPage =(row,action)=>{\r\n        \r\n        if(row.path==='Mental-health'){        \r\n            props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='Art-commence'){\r\n            props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='Clinical-evaluation'){\r\n            props.setActiveContent({...props.activeContent, route:'adult-clinic-eveluation-view', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='eac1'){\r\n            props.setActiveContent({...props.activeContent, route:'first-eac-history', id:row.id, actionType:action})\r\n        }\r\n        else if(row.path==='eac2'){\r\n            props.setActiveContent({...props.activeContent, route:'second-eac-history', id:row.id, actionType:action})\r\n        }\r\n        else if(row.path==='eac3'){\r\n            props.setActiveContent({...props.activeContent, route:'completed-eac-history', id:row.id, actionType:action})\r\n        }else if(row.path==='hiv-enrollment'){\r\n            history.push({\r\n                pathname: '/update-patient',\r\n                state: { id: row.id, patientObj:props.patientObj, actionType:action }\r\n            });\r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n        }else if(row.path==='pharmacy'){\r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            props.setActiveContent({...props.activeContent, route:'pharmacy-update', id:row.id, activeTab:\"history\", actionType:action, obj:row})\r\n\r\n        }else if(row.path==='Laboratory'){\r\n            props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='clinic-visit'){\r\n            props.setActiveContent({...props.activeContent, route:'consultation', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='Intensive-follow-up'){\r\n            props.setActiveContent({...props.activeContent, route:'intensive-follow-up-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='Intensive-follow-up'){\r\n            props.setActiveContent({...props.activeContent, route:'intensive-follow-up-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='client-tracker'){\r\n            props.setActiveContent({...props.activeContent, route:'client-tracker', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='eac-session'){\r\n            props.setActiveContent({...props.activeContent, route:'eac-session-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='Cervical-cancer'){\r\n            props.setActiveContent({...props.activeContent, route:'cervical-cancer-update', id:row.id, activeTab:\"history\", actionType:action, })\r\n      \r\n        }else if(row.path==='Chronic-Care'){\r\n            props.setActiveContent({...props.activeContent, route:'chronic-care', id:row.id, activeTab:\"home\", actionType:action, })\r\n      \r\n        }else{//Chronic Care\r\n\r\n        }\r\n        \r\n    }\r\n    const LoadDeletePage =(row)=>{ \r\n        console.log(row.path)       \r\n        if(row.path==='Mental-health'){ \r\n            setSaving(true)        \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }else if(row.path==='Art-commence'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}hiv/art/commencement/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='Clinical-evaluation'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'adult-clinic-eveluation-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='eac1'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'first-eac-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/eac/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }\r\n        else if(row.path==='eac2'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'second-eac-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/eac/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }\r\n        else if(row.path==='eac3'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'completed-eac-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/eac/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }else if(row.path==='hiv-enrollment'){\r\n            setSaving(true) \r\n            axios\r\n            .delete(`${baseUrl}hiv/enrollment/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n        }else if(row.path==='pharmacy'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            //props.setActiveContent({...props.activeContent, route:'pharmacy', id:row.id, activeTab:\"home\", actionType:\"update\", obj:row})\r\n            axios\r\n            .delete(`${baseUrl}hiv/art/pharmacy/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                setSaving(false) \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n        }); \r\n\r\n        }else if(row.path==='clinic-visit'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}hiv/art/clinic-visit/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                setSaving(false) \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            }); \r\n        }else if(row.path==='Chronic-Care'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                setSaving(false) \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            }); \r\n        }else if(row.path==='Cervical-cancer'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}observation/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                setSaving(false) \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            }); \r\n        }else if(row.path==='client-tracker'){\r\n            setSaving(true) \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-history', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}patient-tracker/patient/delete/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n                setSaving(false) \r\n            })\r\n            .catch((error) => {\r\n                setSaving(false) \r\n                toggle()\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            }); \r\n        }else{\r\n\r\n        }\r\n        \r\n    }\r\n    const LoadModal =(row)=>{\r\n        toggle()\r\n        setRecord(row)\r\n    }  \r\n\r\n\r\n  return (\r\n    <div>\r\n        \r\n    <br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Patient History \"\r\n              columns={[\r\n                { title: \"Name\", field: \"name\" },\r\n                {\r\n                  title: \"Encounter Date\",\r\n                  field: \"date\",\r\n                },               \r\n                // { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              isLoading={loading}\r\n              data={recentActivities && recentActivities.map((row) => ({\r\n                   name: row.name,\r\n                   date: row.date,\r\n                   actions: !notToBeUpdated.includes(row.path) ? (\r\n                        <div>\r\n                            <Menu.Menu position='right'  >\r\n                            <Menu.Item >\r\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                <Dropdown item text='Action'>\r\n\r\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                    {row.viewable && ( <Dropdown.Item onClick={()=>LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>)}\r\n                                    {row.viewable && ( <Dropdown.Item  onClick={()=>LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>)}\r\n                                    {row.viewable && ( <Dropdown.Item  onClick={()=>LoadModal(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>)} \r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                                </Button>\r\n                            </Menu.Item>\r\n                            </Menu.Menu>\r\n                        </div>\r\n                   ):\"\"\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:50,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n        <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered backdrop=\"static\">\r\n            <Modal.Header >\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n                \r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n            \r\n        </Modal.Footer>\r\n        </Modal>   \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientnHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\ClinicHistory.js",["1261","1262"],"import React, { useEffect, useState } from 'react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"@reach/menu-button/styles.css\";\r\nimport ConsultationPage from './History/ConsultationPage'\r\n\r\n\r\nconst ClinicVisitHistory = (props) => {    \r\n  const patientObj = props.patientObj ? props.patientObj : {}\r\n\r\n  return (\r\n    <div>\r\n         <div className=\"row\">\r\n            \r\n                <ConsultationPage patientObj={patientObj} activeContent={props.activeContent} setActiveContent={props.setActiveContent} clinicVisitList={props.clinicVisitList} ClinicVisitListHistory={props.ClinicVisitListHistory}/>  \r\n\r\n        </div>   \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClinicVisitHistory;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ArtCommencement\\ArtCommencementPage.js",["1263","1264","1265","1266","1267"],"import React, {useState, useEffect} from 'react';\r\nimport { Card,CardBody, FormGroup, Label,InputGroup,\r\n        InputGroupText,\r\n       \r\n        Input,\r\n        } from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport moment from \"moment\";\r\nimport 'react-summernote/dist/react-summernote.css'; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\n//import { DateTimePicker } from \"react-widgets\";\r\nimport {  Message} from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    }, \r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst ArtCommencement = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    //let history = useHistory();\r\n    let gender=\"\"\r\n    const classes = useStyles()\r\n    const [clinicalStage, setClinicalStage] = useState([])\r\n    //const [values, setValues] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [viraLoadStart, setViraLoadStart] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    //const [tbStatus, setTbStatus] = useState([]);\r\n    //const [regimenLine, setRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [pregnancyStatus, setpregnancyStatus] = useState([]);\r\n    const [functionalStatus, setFunctionalStatus] = useState([]);\r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n    const [objValues, setObjValues] = useState({\r\n                                                personId:props.patientObj.id,\r\n                                                visitDate: null,\r\n                                                viralLoad: \"\",\r\n                                                whoStagingId:\"\",\r\n                                                clinicalStageId:\"\",\r\n                                                cd4: null,\r\n                                                cd4Percentage: null,\r\n                                                isCommencement: true,\r\n                                                functionalStatusId: \"\",\r\n                                                clinicalNote: \"\",\r\n                                                hivEnrollmentId: \"\",\r\n                                                vitalSignDto:\"\",\r\n                                                facilityId:1,\r\n                                                regimenTypeId: 0,\r\n                                                regimenId:0 ,\r\n                                                viralLoadAtStartOfArt:\"\",\r\n                                                isViralLoadAtStartOfArt :null,\r\n                                                dateOfViralLoadAtStartOfArt: null,\r\n                                                cd4Count:null,\r\n                                                cd4SemiQuantitative:\"\",\r\n                                                cd4FlowCytometry:\"\",\r\n                                                cd4Type:\"\",                                                  \r\n                                                pregnancyStatus:\"\",\r\n                                                dateOfLpm:\"\"\r\n                                                });\r\n\r\n    const [vital, setVitalSignDto]= useState({\r\n                                                bodyWeight: \"\",\r\n                                                diastolic:\"\",\r\n                                                encounterDate: \"\",\r\n                                                facilityId: 1,\r\n                                                height: \"\",\r\n                                                personId: props.patientObj.id,\r\n                                                serviceTypeId: 1,\r\n                                                systolic:\"\",\r\n                                                pulse:\"\",\r\n                                                temperature:\"\",\r\n                                                respiratoryRate:\"\",\r\n                                                headCircumference:\"\",\r\n                                                surfaceArea:\"\",\r\n                                                muac:\"\" \r\n                                            })\r\n      //Vital signs clinical decision support \r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                                                        bodyWeight: \"\",\r\n                                                                        diastolic: \"\",\r\n                                                                        height: \"\",\r\n                                                                        systolic: \"\",\r\n                                                                        pulse:\"\",\r\n                                                                        temperature:\"\",\r\n                                                                        respiratoryRate:\"\"\r\n                                                                    })\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m;\r\n                }\r\n                return age_now;\r\n    };\r\n    const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n    const [patientObject, setPatientObject] = useState(null);\r\n    useEffect(() => {\r\n        FunctionalStatus();\r\n        WhoStaging();\r\n        //TBStatus();\r\n        PreganacyStatus();\r\n        RegimenLine();\r\n        InitialClinicEvaluation();\r\n        AdultRegimenLine();\r\n        ChildRegimenLine();\r\n        PatientCurrentObject()\r\n         gender =props.patientObj.gender && props.patientObj.gender.display ? props.patientObj.gender.display : null\r\n      }, [props.patientObj]);\r\n    //GET  Patients\r\n    const  PatientCurrentObject =() =>{\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setEnrollDate(response.data.enrollment.entryPointId===21 ? response.data.enrollment.dateConfirmedHiv : response.data.enrollment.dateOfRegistration)\r\n                setPatientObject(response.data);\r\n                objValues.pregnancyStatus = response.data.enrollment.pregnancyStatusId\r\n                //console.log(response.data.enrollment.pregnancyStatusId)\r\n                setObjValues({...objValues, pregnancyStatus: response.data.enrollment.pregnancyStatusId})\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14)) \r\n                setAdultRegimenLine(artRegimen);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //GET ChildRegimenLine \r\n    const ChildRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/children`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimenChildren=response.data.filter((x)=> (x.id===3 || x.id===4))\r\n                setChildRegimenLine(artRegimenChildren);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of WhoStaging\r\n    const WhoStaging =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setClinicalStage(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    const InitialClinicEvaluation =()=>{\r\n        axios\r\n        .get(`${baseUrl}observation/person/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n\r\n                const obj1 =response.data.find(x=> x.type==='Clinical evaluation')\r\n                \r\n                //const cd4CountObj=obj1.data.plan\r\n                //console.log(obj1.data.plan)\r\n                objValues.cd4Type=obj1.data.plan.cd4Type\r\n                objValues.cd4Count=obj1.data.plan.cd4Count\r\n                objValues.whoStagingId = obj1.data.who.stage\r\n                objValues.regimenTypeId=obj1.data.regimen.regimenLine\r\n                RegimenType(obj1.data.regimen.regimenLine)\r\n                objValues.regimenId=obj1.data.regimen.regimen\r\n                setVitalSignDto({...obj1.data.physicalExamination})\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });       \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenLine =()=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/types`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            //setRegimenLine(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setRegimenType(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    //Get list of PREGANACY_STATUS\r\n    const PreganacyStatus =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setpregnancyStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n    ///GET LIST OF FUNCTIONAL%20_STATUS\r\n    async function FunctionalStatus() {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/FUNCTIONAL%20_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                \r\n                setFunctionalStatus(response.data);\r\n                //setValues(response.data)\r\n            })\r\n            .catch((error) => {    \r\n            });        \r\n    }\r\n    // TB STATUS\r\n    // const TBStatus =()=>{\r\n    //     axios\r\n    //        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n    //            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //        )\r\n    //        .then((response) => {\r\n    //            //console.log(response.data);\r\n    //            setTbStatus(response.data);\r\n    //        })\r\n    //        .catch((error) => {\r\n    //        //console.log(error);\r\n    //        });\r\n        \r\n    //  }\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n            if(e.target.name==='isViralLoadAtStartOfArt' && e.target.value!==\"\"){\r\n                if(e.target.value==='true'){\r\n                    setViraLoadStart(true)\r\n                    setObjValues ({...objValues,  [e.target.name]: true});\r\n                }else{\r\n                    setObjValues({...objValues, [e.target.name]:false})\r\n                    setViraLoadStart(false)\r\n                }\r\n            }\r\n            else if(e.target.name==='cd4Percentage' && e.target.value!==\"\"){\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n            }\r\n            else if(e.target.name==='cd4' && e.target.value!==\"\"){\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n            }\r\n\r\n            if(e.target.name==='isViralLoadAtStartOfArt' && e.target.value===\"false\"){\r\n                objValues.viralLoadAtStartOfArt=\"\"\r\n                objValues.dateOfViralLoadAtStartOfArt=\"\"\r\n                setObjValues ({...objValues,  [\"viralLoadAtStartOfArt\"]: \" \" });\r\n                setObjValues ({...objValues,  [\"dateOfViralLoadAtStartOfArt\"]: \" \" });\r\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n\r\n            }\r\n            \r\n    }\r\n\r\n    const handleInputChangeVitalSignDto = e => { \r\n        setErrors({...temp, [e.target.name]:\"\"})  \r\n        setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n        // if(e.target.name==='muac'){\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value});\r\n        // } else{\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        // }\r\n    }\r\n    const handleSelecteRegimen = e => { \r\n        let regimenID=  e.target.value\r\n        //regimenTypeId regimenId\r\n        setObjValues ({...objValues, regimenTypeId:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight =(e)=>{\r\n        if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight =(e)=>{\r\n        if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n        const message =\"Body weight must not be greater than 150 and less than 3\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckSystolic =(e)=>{\r\n        if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n        const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckDiastolic =(e)=>{\r\n        if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n        const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckPulse =(e)=>{\r\n        if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n        const message =\"Pulse must not be greater than 120 and less than 40\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckRespiratoryRate =(e)=>{\r\n        if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n        const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckTemperature =(e)=>{\r\n        if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n        const message =\"Temperature must not be greater than 47 and less than 35\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n        }\r\n    }\r\n    // const handleInputChangeVitalStart =(e)=>{\r\n    //     if(e.target.value===true ){\r\n    //         setViraLoadStart(true)\r\n    //         setObjValues({...objValues, isViralLoadAtStartOfArt:true})\r\n    //     }else{\r\n    //         setObjValues({...objValues, isViralLoadAtStartOfArt:false})\r\n    //         setViraLoadStart(false)\r\n    //     }\r\n    // }\r\n\r\n    //FORM VALIDATION\r\n    const validate = () => {\r\n        temp.visitDate = objValues.visitDate ? \"\" : \"This field is required\"\r\n        temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\"\r\n        temp.regimenTypeId = objValues.regimenTypeId ? \"\" : \"This field is required\"\r\n        temp.whoStagingId = objValues.whoStagingId ? \"\" : \"This field is required\"\r\n        temp.functionalStatusId = objValues.functionalStatusId ? \"\" : \"This field is required\"\r\n        //temp.tbStatusId = objValues.tbStatusId ? \"\" : \"This field is required\"\r\n        temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n        temp.height = vital.height ? \"\" : \"This field is required\"\r\n        //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n        //temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {                  \r\n        e.preventDefault();\r\n        if(validate()){      \r\n        objValues.personId = props.patientObj.id\r\n        vital.encounterDate = objValues.visitDate\r\n        vital.personId=props.patientObj.id\r\n        objValues.vitalSignDto= vital\r\n        objValues.hivEnrollmentId= patientObject && patientObject.enrollment.id\r\n        objValues.clinicalStageId = objValues.whoStagingId\r\n        if(objValues.pregnancyStatus!==null){\r\n            const pregnancyDisplay=pregnancyStatus.find((x)=> x.id===objValues.pregnancyStatus)\r\n            objValues.pregnancyStatus = pregnancyDisplay.display\r\n        }\r\n        // else{\r\n        //     objValues.pregnancyStatus = objValues.pregnancyStatus\r\n        // } \r\n        //Logic for cd4 value \r\n        if(objValues.cd4Type===\"Flow Cyteometry\"){\r\n            objValues.cd4 = objValues.cd4Count\r\n        }\r\n        setSaving(true);\r\n        axios.post(`${baseUrl}hiv/art/commencement/`,objValues,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n        \r\n        )\r\n        .then(response => {\r\n            setSaving(false);\r\n            //props.setArt(true)\r\n            props.patientObj.commenced=true\r\n            toast.success(\"Record save successful\");\r\n            props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n            //props.toggle()\r\n            //props.PatientCurrentStatus()\r\n\r\n        })\r\n        .catch(error => {\r\n            setSaving(false);\r\n            if(error.response && error.response.data){\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n            }\r\n            else{\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n            }\r\n        });\r\n        }\r\n        \r\n    }\r\n    function BmiCal (bmi){\r\n        if(bmi<18.5){\r\n            return (\r\n            <Message        \r\n                size='mini'\r\n                color='brown'\r\n                content='Underweight'\r\n            />\r\n            )      \r\n        }else if(bmi >=18.5 && bmi<=24.9){\r\n            <Message        \r\n                size='mini'\r\n                color='olive'\r\n                content='Well nourished'\r\n            />\r\n        }\r\n        else if( bmi>25){\r\n            <Message        \r\n                size='mini'\r\n                color='blue'\r\n                content='Overweight/Obese'\r\n            />\r\n        }\r\n        \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n        <div className=\"col-md-6\">\r\n            <h2>ART Commencement</h2>\r\n        </div>\r\n        <div className=\"col-md-6\"></div>\r\n        <br/>         \r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            <form >\r\n                <div className=\"row\">\r\n                  {/* statusAtRegistrationId  entryPointId */}\r\n                  {patientObject && (patientObject.enrollment.entryPointId===\"21\" || patientObject.enrollment.statusAtRegistrationId===\"55\") ? (<>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"artDate\">ART Start Date <span style={{ color:\"red\"}}> *</span> </Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"visitDate\"\r\n                            id=\"visitDate\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.visitDate}\r\n                            min=\"01-01-1980\"\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                            {errors.visitDate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.visitDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    </>)\r\n                    :\r\n                    (<>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"artDate\">ART Start Date <span style={{ color:\"red\"}}> *</span> </Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"visitDate\"\r\n                            id=\"visitDate\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.visitDate}\r\n                            min={enrollDate}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                            {errors.visitDate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.visitDate}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    </>)\r\n                    }\r\n\r\n                    {/* <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"cd4\">CD4 at start of ART </Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"cd4\"\r\n                            id=\"cd4\"\r\n                            min={0}\r\n                            onChange={handleInputChange}\r\n                            value={objValues.cd4}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                 */}\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label for=\"cd4Percentage\">CD4%</Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"cd4Percentage\"\r\n                        id=\"cd4Percentage\"\r\n                        min={0}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.cd4Percentage}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        \r\n                    />\r\n                    \r\n                    </FormGroup>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group  col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>CD4 Count (Type)</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"cd4Type\"\r\n                                        id=\"cd4Type\"\r\n                                        value={objValues.cd4Type}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        \r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Semi-Quantitative\">Semi-Quantitative</option>\r\n                                        <option value=\"Flow Cyteometry\">Flow Cyteometry</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                        </div>\r\n                        {objValues.cd4Type ==='Semi-Quantitative' && (\r\n                        <div className=\"form-group  col-md-6\">\r\n                            <FormGroup>\r\n                                <Label>CD4 Count Value(Semi-Quantitative)</Label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    name=\"cd4Count\"\r\n                                    id=\"cd4Count\"\r\n                                    value={objValues.cd4Count}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    \r\n                                >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"<200\">{\"<200\"}</option>\r\n                                    <option value=\">=200\">{\">=200\"}</option>\r\n                                    \r\n                                </select>\r\n                                \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.cd4Type ==='Flow Cyteometry' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"\">CD4 Count Value (Flow Cyteometry)</Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                min={1}\r\n                                name=\"cd4Count\"\r\n                                id=\"cd4Count\"\r\n                                value={objValues.cd4Count}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                \r\n                            />\r\n                                \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen Line <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenTypeId\"\r\n                            id=\"regimenTypeId\"\r\n                            value={objValues.regimenTypeId}\r\n                            onChange={handleSelecteRegimen}\r\n                            required\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n        \r\n                                {patientAge && patientAge >15 &&  (\r\n                                <>\r\n                                    {adultRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                </>\r\n                                )}\r\n                                {patientAge && patientAge <=15 &&  (\r\n                                <>\r\n                                    {childRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                </>\r\n                                )}\r\n                        </Input>\r\n                        {errors.regimenTypeId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenTypeId}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>                    \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenId\"\r\n                            id=\"regimenId\"\r\n                            value={objValues.regimenId}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                            >\r\n                                <option value=\"\"> Select</option>    \r\n                                {regimenType.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.regimenId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenId}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>\r\n                \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Viral Load at Start of ART </Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"isViralLoadAtStartOfArt\"\r\n                            id=\"isViralLoadAtStartOfArt\"\r\n                            onChange={handleInputChange}                                            \r\n                            value={objValues.isViralLoadAtStartOfArt}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        >\r\n                            <option value=\"\"> Select</option>\r\n                            <option value=\"true\"> YES</option>\r\n                            <option value=\"false\"> NO</option>\r\n                        </Input>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    {viraLoadStart && (\r\n                    <> \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Viral Load at Start of ART Result</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"viralLoadAtStartOfArt\"\r\n                            id=\"viralLoadAtStartOfArt\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.viralLoadAtStartOfArt}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Date of Viral Load at Start of ART</Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            name=\"dateOfViralLoadAtStartOfArt\"\r\n                            id=\"dateOfViralLoadAtStartOfArt\"\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateOfViralLoadAtStartOfArt}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >WHO Staging <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"whoStagingId\"\r\n                            id=\"whoStagingId\"\r\n                            value={objValues.whoStagingId}\r\n                            onChange={handleInputChange}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                {clinicalStage.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.whoStagingId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.whoStagingId}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Functional Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"functionalStatusId\"\r\n                            id=\"functionalStatusId\"\r\n                            value={objValues.functionalStatusId}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n        \r\n                                {functionalStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.functionalStatusId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.functionalStatusId}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    {objValues.isViralLoadAtStartOfArt && objValues.isViralLoadAtStartOfArt!==null && (<div className=\"form-group mb-3 col-md-8\"></div>)}\r\n                    {!objValues.isViralLoadAtStartOfArt && objValues.isViralLoadAtStartOfArt!==null && (<div className=\"form-group mb-3 col-md-4\"></div>)}\r\n                    {patientAge>=10 && (props.patientObj.sex===\"Female\" || props.patientObj.sex===\"FEMALE\" || props.patientObj.sex===\"female\") ? (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Pregnancy Status <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"pregnancyStatus\"\r\n                                id=\"pregnancyStatus\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.pregnancyStatus}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                //disabled\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                {pregnancyStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.pregnancyStatus==='73' && (\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >LMP</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"dateOfLpm\"\r\n                                id=\"dateOfLpm\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.dateOfLpm}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            />\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    {/* <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >TB Status</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"tbStatusId\"\r\n                            id=\"tbStatusId\"\r\n                            value={objValues.tbStatusId}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n        \r\n                                {tbStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.tbStatusId !==\"\" ? (\r\n                            <span className={classes.error}>{errors.tbStatusId}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div> */}\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Pulse</Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Respiratory Rate </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Temperature </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Body Weight <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <Label >Height <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                               \r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled\r\n                            />\r\n                                <InputGroupText\r\n                                addonType=\"append\"\r\n                                \r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                        {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                            <FormGroup>\r\n                            <Label > </Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    {vital.bodyWeight!=='' && vital.height!=='' && (\r\n                      <div className=\"form-group mb-3 mt-2 col-md-12\">\r\n                            {\r\n                              BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\r\n                            }\r\n                      </div>\r\n                     )}\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                        <FormGroup>\r\n                        <Label >Blood Pressure</Label>\r\n                        <InputGroup>\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                systolic(mmHg)\r\n                        </InputGroupText> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"systolic\"\r\n                                id=\"systolic\"\r\n                                min=\"90\"\r\n                                max=\"240\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.systolic}\r\n                                onKeyUp={handleInputValueCheckSystolic}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            diastolic(mmHg)\r\n                            </InputGroupText>\r\n                                <Input \r\n                                type=\"text\"\r\n                                name=\"diastolic\"\r\n                                id=\"diastolic\"\r\n                                min={0}\r\n                                max={140}\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.diastolic}\r\n                                onKeyUp={handleInputValueCheckDiastolic} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                />\r\n                            \r\n                            \r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.systolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.systolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.systolic}</span>\r\n                        ) : \"\" }  \r\n                        {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.diastolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.diastolic}</span>\r\n                        ) : \"\" }          \r\n                        </FormGroup>\r\n                    </div>\r\n\r\n                    </div>\r\n                    {patientAge && patientAge<14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Head Circumference </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Surface Area </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >MUAC</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        value={vital.muac} \r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n                                    <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        cm\r\n                                    </InputGroupText>\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    )}\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                        <FormGroup>\r\n                        <Label >Clinical Notes</Label>\r\n                        <Input\r\n                            type=\"textarea\"\r\n                            name=\"clinicalNote\"\r\n                            rows=\"3\" cols=\"50\"\r\n                            id=\"clinicalNote\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.clinicalNote}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                </div>\r\n                \r\n                {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n            \r\n                <MatButton\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSubmit}\r\n                disabled={saving}\r\n                style={{backgroundColor:\"#014d88\"}}\r\n                >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                </MatButton>\r\n            \r\n                <MatButton\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    startIcon={<CancelIcon style={{color:'#fff'}}/>}  \r\n                    style={{backgroundColor:'#992E62'}}                              \r\n                >\r\n                    <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                </MatButton>\r\n            \r\n            </form>\r\n            </CardBody>\r\n        </Card>                    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtCommencement;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\MentalHealthScreening\\index.js",["1268","1269","1270","1271","1272","1273","1274"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst MentalHealthScreening = (props) => {\r\n    \r\n    const patientObj = props.patientObj;\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const classes = useStyles()\r\n    const [objValues, setObjValues] = useState({mhs1:\"\",mhs2:\"\" ,mhs3:\"\" ,mhs4:\"\",mhs5:\"\", dateOfObservation:\"\"});\r\n    const [saving, setSaving] = useState(false);\r\n    const [referrer, setReferrer] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [observation, setObservation]=useState({\r\n                                                    data: {},\r\n                                                    dateOfObservation: \"\",\r\n                                                    facilityId: null,\r\n                                                    personId: 0,\r\n                                                    type: \"Mental health\",\r\n                                                    visitId: null\r\n                                                })\r\n \r\n    useEffect(() => {\r\n        GetPatientDTOObj();\r\n    }, []);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               //setEnrollDate (patientDTO.dateOfRegistration)\r\n               setEnrollDate(patientDTO.entryPointId===21 ? patientDTO.dateConfirmedHiv : patientDTO.dateOfRegistration)\r\n               //\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });          \r\n    } \r\n    const handleInputChangeKP = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }     \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault(); \r\n          observation.dateOfObservation= moment(objValues.dateOfObservation).format(\"YYYY-MM-DD\")       \r\n          observation.personId =patientObj.id\r\n          observation.data=objValues\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}observation`,observation,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  props.patientObj.mentalHealth=true\r\n                  toast.success(\"Mental health screening save successful.\\nPlease refer patient to psychiatric hospital\");\r\n                  if(objValues.mhs1===\"YES\" || objValues.mhs2===\"YES\" || objValues.mhs4===\"YES\" || objValues.mhs4===\"YES\" || objValues.mhs5===\"YES\" ){\r\n                    setReferrer(true)\r\n                  }else{\r\n                    setReferrer(false)\r\n                  }\r\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                  //history.push(\"/\")\r\n              })\r\n              .catch(error => {\r\n                setSaving(false);\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage);\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                   \r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <h2>Mental Health Screening Form </h2>\r\n                    </div>\r\n                    {/* <div className=\"col-md-6\">\r\n                        <Button icon color='teal' className='float-end'><Icon name='eye' /> Previous History</Button>\r\n                    </div> */}\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    {referrer && (\r\n                        <>\r\n                        <Alert\r\n                        variant=\"warning\"\r\n                        className=\"alert-dismissible solid fade show\"\r\n                        >\r\n                        <p>Please refer patient to psychiatric hospital</p>\r\n                        </Alert>\r\n                        \r\n                        </>\r\n                    )}\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">        \r\n                            <FormGroup>\r\n                                <Label >Date of Observation <span style={{ color:\"red\"}}> *</span></Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={objValues.dateOfObservation}\r\n                                    min={enrollDate}\r\n                                    onChange={handleInputChangeKP}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                </Input>\r\n                                {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup> \r\n                        </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you ever been depressed for weeks at a time, lost interest, or pleasure in most activities, had trouble concentrating and making decisions, or thought about killing yourself ? <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs1\"\r\n                                id=\"mhs1\"\r\n                                value={objValues.mhs1}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you ever had spells or attacks when you suddenly felt anxious, frightened, uneasy to the extent that you began sweating, your heart began to beat rapidly, you were shaking or trembling, your stomach was upset, you felt dizzy or unsteady, as if you would faint ? <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs2\"\r\n                                id=\"mhs2\"\r\n                                value={objValues.mhs2}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Have you ever had nightmares or flashbacks because of being involved in some traumatic/terrible event? For example, domestic violence, rape, police raid or arrest, blackmail. <sup style={{ color:\"red\"}}> *</sup></Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"mhs3\"\r\n                            id=\"mhs3\"\r\n                            value={objValues.mhs3}\r\n                            onChange={handleInputChangeKP}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                            <option value=\"\"> Select</option>\r\n                            <option value=\"YES\"> YES</option>\r\n                            <option value=\"NO\"> NO</option>\r\n                        </Input>\r\n                        </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Have you used drugs other than those required for medical reasons? For example, cannabis, cocaine, stimulants, or narcotics (e.g., heroin). May equally ask about the abuse of alcohol and other local drugs or psychoactive substances. <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs4\"\r\n                                id=\"mhs4\"\r\n                                value={objValues.mhs4}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >In recent time, has any one punched, slapped, kicked, bit, or caused you any type of physical or sexual harm ? <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"mhs5\"\r\n                                id=\"mhs5\"\r\n                                value={objValues.mhs5}\r\n                                onChange={handleInputChangeKP}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                <option value=\"YES\"> YES</option>\r\n                                <option value=\"NO\"> NO</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </div>                        \r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    style={{backgroundColor:\"#014d88\"}}\r\n                    startIcon={<SaveIcon />}\r\n                    disabled={(objValues.mhs1===\"\" || objValues.mhs2===\"\" || objValues.mhs4===\"\" || objValues.mhs4===\"\" || objValues.mhs5===\"\" || objValues.dateOfObservation===\"\" ) && !saving ? true : false}\r\n                    onClick={handleSubmit}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                    </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default MentalHealthScreening;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Index.js",["1275","1276","1277","1278","1279","1280","1281","1282","1283"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport { Button} from 'semantic-ui-react'\r\nimport {Card, CardBody} from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\n//import {TiArrowBack} from 'react-icons/ti'\r\n//import {token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Icon, Menu,Sticky } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport MedicalHistory from './MedicalHistory'\r\nimport PastArv from './PastArv'\r\nimport PhysicalExamination from './PhysicalExamination'\r\nimport Appearance from './Appearance'\r\nimport WhoStaging from './WhoStaging'\r\nimport Plan from './Plan'\r\nimport AdultRegimenNextAppointment from './AdultRegimenNextAppointment'\r\nimport ChildRegimenNextAppointment from './ChildRegimenNextAppointment'\r\n\r\n// import RecencyTesting from './NewRegistration/RecencyTesting'\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    //const classes = useStyles();\r\n    const location = useLocation();\r\n    const locationState = location.state;\r\n    //const [saving, setSaving] = useState(false);\r\n    const [activeItem, setactiveItem] = useState('medical-history');\r\n    const [completed, setCompleted] = useState([]);\r\n    const [patientObj, setPatientObj] = useState(\"\");\r\n    const [observation, setObservation]=useState({\r\n        data: {\r\n                medicalHistory:\"\",\r\n                currentMedical:\"\",\r\n                patientDisclosure:\"\",\r\n                pastArvMedical:\"\",\r\n                physicalExamination:\"\",\r\n                generalApperance:\"\",\r\n                skin:\"\",\r\n                eye:\"\",\r\n                breast:\"\",\r\n                cardiovascular:\"\",\r\n                genitalia:\"\",\r\n                respiratory:\"\",\r\n                gastrointestinal:\"\",\r\n                assesment :\"\",\r\n                who:\"\",\r\n                plan:\"\",\r\n                regimen:\"\",\r\n                enroll:\"\",\r\n                planArt:\"\" ,\r\n                nextAppointment:\"\",\r\n                neurological:\"\",\r\n                mentalstatus:\"\",\r\n                visitDate:\"\",\r\n                clinicianName:\"\"           \r\n        },\r\n        dateOfObservation: null,\r\n        facilityId: null,\r\n        personId: patientObj && patientObj.id,\r\n        type: \"Clinical evaluation\",\r\n        visitId: null\r\n    })\r\n    const handleItemClick =(activeItem)=>{\r\n        setactiveItem(activeItem)\r\n        //setCompleted({...completed, ...completedMenu})\r\n    }\r\n    useEffect(() => { \r\n        if(locationState && locationState.patientObj){\r\n            setPatientObj(locationState.patientObj)           \r\n        }\r\n        \r\n    }, []);\r\n    \r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m;\r\n                }\r\n                return age_now;\r\n    };\r\n    const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n\r\n    return (\r\n        <>\r\n        <div class=\"ui sticky\">\r\n            <Card >\r\n                <CardBody>\r\n              \r\n                    <div className=\"row\">\r\n                    {patientAge<=14 ? (\r\n                        <h2>Pediatric- Initial Clinical Evaluation </h2>\r\n                        )\r\n                        :\r\n                        (\r\n                            <h2>Adult- Initial Clinical Evaluation </h2> \r\n                        )\r\n                \r\n                    }\r\n                        <br/>\r\n                        <br/>\r\n                        <form >\r\n                        <div className=\"col-md-3 float-start\">\r\n                       \r\n                        <Menu  size='large'  vertical  style={{backgroundColor:\"#014D88\"}}>\r\n                            <Menu.Item\r\n                                name='inbox'\r\n                                active={activeItem === 'medical-history'}\r\n                                onClick={()=>handleItemClick('medical-history')}\r\n                                style={{backgroundColor:activeItem === 'medical-history' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'medical-history' ? true : false}\r\n                            >               \r\n                                <span style={{color:'#fff'}}> Medical History\r\n                                {completed.includes('medical-history') && (\r\n                                    <Icon name='check' color='green' />\r\n                                )}\r\n                                </span>\r\n                                \r\n                            </Menu.Item>\r\n\r\n                            <Menu.Item\r\n                                name='inbox'\r\n                                active={activeItem === 'past-arv'}\r\n                                onClick={()=>handleItemClick('past-arv')}\r\n                                style={{backgroundColor:activeItem === 'past-arv' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'past-arv' ? true : false}\r\n                            >               \r\n                                <span style={{color:'#fff'}}>Past/Current ARV \r\n                                {completed.includes('past-arv') && (\r\n                                    <Icon name='check' color='green' />\r\n                                )}\r\n                                </span>\r\n                                \r\n                                {/* <Label color='teal'>3</Label> */}\r\n                            </Menu.Item>\r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'physical-examination'}\r\n                                onClick={()=>handleItemClick('physical-examination')}\r\n                                style={{backgroundColor:activeItem === 'physical-examination' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'physical-examination' ? true : false}\r\n                            >\r\n                            {/* <Label>4</Label> */}\r\n                            <span style={{color:'#fff'}}>Physical Examination\r\n                            {completed.includes('physical-examination') && (\r\n                                <Icon name='check' color='green' />\r\n                            )}</span>\r\n                            \r\n                            </Menu.Item>\r\n                            \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'appearance'}\r\n                                onClick={()=>handleItemClick('appearance')}\r\n                                style={{backgroundColor:activeItem === 'appearance' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'appearance' ? true : false}\r\n                            >\r\n                            {/* <Label>4</Label> */}\r\n                            <span style={{color:'#fff'}}>General Appearance\r\n                            {completed.includes('appearance') && (\r\n                                <Icon name='check' color='green' />\r\n                            )}\r\n                            </span>\r\n                            \r\n                            </Menu.Item>                           \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'who'}\r\n                                onClick={()=>handleItemClick('who')}\r\n                                style={{backgroundColor:activeItem === 'who' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'who' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Assessment & WHO \r\n                                    {completed.includes('who') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'plan'}\r\n                                onClick={()=>handleItemClick('plan')}\r\n                                style={{backgroundColor:activeItem === 'plan' ? '#000': \"\"}}\r\n                                disabled={activeItem !== 'plan' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Plan & Enroll In\r\n                                    {completed.includes('plan') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                           \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'regimen'}\r\n                                onClick={()=>handleItemClick('regimen')}\r\n                                style={{backgroundColor:activeItem === 'regimen' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'regimen' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Regimen & <br/>Next Appointment \r\n                                    {completed.includes('regimen') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                        </Menu>\r\n                       \r\n                        </div>\r\n                        <div className=\"col-md-9 float-end\" style={{ backgroundColor:\"#fff\", }}>\r\n                            {activeItem==='medical-history' && (<MedicalHistory handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='past-arv' && (<PastArv handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='physical-examination' && (<PhysicalExamination handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='appearance' && (<Appearance handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='who' && (<WhoStaging handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='plan' && (<Plan  handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='regimen' && (\r\n                                <>\r\n                                {patientAge<=14 ? \r\n                                (\r\n                                    <ChildRegimenNextAppointment handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} activeContent={props.activeContent} setActiveContent={props.setActiveContent}/>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <AdultRegimenNextAppointment handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} activeContent={props.activeContent} setActiveContent={props.setActiveContent}/>\r\n                                )}\r\n                            </>  \r\n                            )}\r\n                        </div>  \r\n                        </form>                                 \r\n                    </div>\r\n                </CardBody>\r\n            </Card>  \r\n            </div>                               \r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Index.js",["1284","1285","1286","1287","1288","1289"],"import React, {useEffect, useState} from \"react\";\r\n//import { Button} from 'semantic-ui-react'\r\nimport {Card, CardBody} from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n//import { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useLocation} from \"react-router-dom\";\r\n//import {TiArrowBack} from 'react-icons/ti'\r\n//import {token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Icon, Menu, Sticky } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport MedicalHistory from './MedicalHistory'\r\nimport PastArv from './PastArv'\r\nimport PhysicalExamination from './PhysicalExamination'\r\nimport Appearance from './Appearance'\r\nimport WhoStaging from './WhoStaging'\r\nimport Plan from './Plan'\r\nimport ChildRegimenNextAppointment from './ChildRegimenNextAppointment'\r\nimport AdultRegimenNextAppointment from './AdultRegimenNextAppointment'\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    //const classes = useStyles();\r\n    const location = useLocation();\r\n    const locationState = location.state;\r\n    const [saving, setSaving] = useState(false);\r\n    const [activeItem, setactiveItem] = useState('medical-history');\r\n    const [completed, setCompleted] = useState([]);\r\n    const [patientObj, setPatientObj] = useState(props && props.patientObj ? props.patientObj : \"\");\r\n    const [observation, setObservation]=useState({\r\n        data: {\r\n                medicalHistory:\"\",\r\n                currentMedical:\"\",\r\n                patientDisclosure:\"\",\r\n                pastArvMedical:\"\",\r\n                physicalExamination:\"\",\r\n                generalApperance:\"\",\r\n                skin:\"\",\r\n                eye:\"\",\r\n                breast:\"\",\r\n                cardiovascular:\"\",\r\n                genitalia:\"\",\r\n                respiratory:\"\",\r\n                gastrointestinal:\"\",\r\n                assesment :\"\",\r\n                who:\"\",\r\n                plan:\"\",\r\n                regimen:\"\",\r\n                enroll:\"\",\r\n                planArt:\"\" ,\r\n                nextAppointment:\"\",\r\n                neurological:\"\",\r\n                mentalstatus:\"\",\r\n                visitDate:\"\"           \r\n        },\r\n        dateOfObservation: null,\r\n        facilityId: null,\r\n        personId: props.patientObj.id,\r\n        type: \"Clinical evaluation\",\r\n        visitId: null\r\n    })\r\n    const handleItemClick =(activeItem)=>{\r\n        setactiveItem(activeItem)\r\n        //setCompleted({...completed, ...completedMenu})\r\n    }\r\n    useEffect(() => {\r\n        GetInitialEvaluation();\r\n    }, [props.activeContent.id]);\r\n    const GetInitialEvaluation =()=>{\r\n        axios\r\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {  \r\n\r\n                //const newmedicalHistory=response.data.data.medicalHistory\r\n                // observation.dateOfObservation =  response.data.dateOfObservation \r\n                // observation.facilityId =  response.data.facilityId\r\n                // observation.type =  response.data.type\r\n                setObservation(response.data)  \r\n                //setPatientObj(response.data)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(response.data.data);\r\n           });\r\n       \r\n    }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return 0;\r\n                }\r\n                return age_now ;\r\n      };\r\n      const patientAge=calculate_age(moment(props.patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n      //console.log(props)\r\n\r\n    return (\r\n        <>\r\n\r\n            \r\n            <Card >\r\n                <CardBody>\r\n              \r\n                    <div className=\"row\">\r\n                    {calculate_age(moment(props.patientObj.dateOfBirth).format(\"DD-MM-YYYY\"))<=14 ? (\r\n                        <h2>Pediatric- Initial Clinical Evaluation ssd</h2>\r\n                        )\r\n                        :\r\n                        (\r\n                            <h2>Adult- Initial Clinical Evaluation </h2> \r\n                        )\r\n                \r\n                    }\r\n                        <br/>\r\n                        <br/>\r\n                        <form >\r\n                        <div className=\"col-md-3 float-start\">\r\n                       \r\n                        <Menu  size='large'  vertical  style={{backgroundColor:\"#014D88\"}}>\r\n                            <Menu.Item\r\n                                name='inbox'\r\n                                active={activeItem === 'medical-history'}\r\n                                onClick={()=>handleItemClick('medical-history')}\r\n                                style={{backgroundColor:activeItem === 'medical-history' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'medical-history' ? true : false}\r\n                            >               \r\n                                <span style={{color:'#fff'}}> Medical History\r\n                                {completed.includes('medical-history') && (\r\n                                    <Icon name='check' color='green' />\r\n                                )}\r\n                                </span>\r\n                                \r\n                            </Menu.Item>\r\n\r\n                            <Menu.Item\r\n                                name='inbox'\r\n                                active={activeItem === 'past-arv'}\r\n                                onClick={()=>handleItemClick('past-arv')}\r\n                                style={{backgroundColor:activeItem === 'past-arv' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'past-arv' ? true : false}\r\n                            >               \r\n                                <span style={{color:'#fff'}}>Past/Current ARV \r\n                                {completed.includes('past-arv') && (\r\n                                    <Icon name='check' color='green' />\r\n                                )}\r\n                                </span>\r\n                                \r\n                                {/* <Label color='teal'>3</Label> */}\r\n                            </Menu.Item>\r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'physical-examination'}\r\n                                onClick={()=>handleItemClick('physical-examination')}\r\n                                style={{backgroundColor:activeItem === 'physical-examination' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'physical-examination' ? true : false}\r\n                            >\r\n                            {/* <Label>4</Label> */}\r\n                            <span style={{color:'#fff'}}>Physical Examination\r\n                            {completed.includes('physical-examination') && (\r\n                                <Icon name='check' color='green' />\r\n                            )}</span>\r\n                            \r\n                            </Menu.Item>\r\n                            \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'appearance'}\r\n                                onClick={()=>handleItemClick('appearance')}\r\n                                style={{backgroundColor:activeItem === 'appearance' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'appearance' ? true : false}\r\n                            >\r\n                            {/* <Label>4</Label> */}\r\n                            <span style={{color:'#fff'}}>General Appearance\r\n                            {completed.includes('appearance') && (\r\n                                <Icon name='check' color='green' />\r\n                            )}\r\n                            </span>\r\n                            \r\n                            </Menu.Item>                           \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'who'}\r\n                                onClick={()=>handleItemClick('who')}\r\n                                style={{backgroundColor:activeItem === 'who' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'who' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Assessment & WHO \r\n                                    {completed.includes('who') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'plan'}\r\n                                onClick={()=>handleItemClick('plan')}\r\n                                style={{backgroundColor:activeItem === 'plan' ? '#000': \"\"}}\r\n                                //disabled={activeItem !== 'plan' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Plan & Enroll In\r\n                                    {completed.includes('plan') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                           \r\n                            <Menu.Item\r\n                                name='spam'\r\n                                active={activeItem === 'regimen'}\r\n                                onClick={()=>handleItemClick('regimen')}\r\n                                style={{backgroundColor:activeItem === 'regimen' ? '#000': \"\"}}\r\n                               // disabled={activeItem !== 'regimen' ? true : false}\r\n                            >\r\n                                {/* <Label>4</Label> */}\r\n                                <span style={{color:'#fff'}}>Regimen & <br/>Next Appointment \r\n                                    {completed.includes('regimen') && (\r\n                                        <Icon name='check' color='green' />\r\n                                    )}\r\n                                </span>                            \r\n                            </Menu.Item>\r\n                        </Menu>\r\n                        \r\n                        </div>\r\n                        <div className=\"col-md-9 float-end\" style={{ backgroundColor:\"#fff\", }}>\r\n                            {activeItem==='medical-history' && (<MedicalHistory handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='past-arv' && (<PastArv handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='physical-examination' && (<PhysicalExamination handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='appearance' && (<Appearance handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='who' && (<WhoStaging handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='plan' && (<Plan  handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} patientAge={patientAge}/>)}\r\n                            {activeItem==='regimen' && (\r\n                                 <>\r\n                                 {calculate_age(moment(props.patientObj.dateOfBirth).format(\"DD-MM-YYYY\"))<=14 ? \r\n                                 (\r\n                                     <ChildRegimenNextAppointment handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} activeContent={props.activeContent} setActiveContent={props.setActiveContent} patientAge={patientAge}/>\r\n                                 )\r\n                                 :\r\n                                 (\r\n                                     <AdultRegimenNextAppointment handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} setObservation={setObservation} observation={observation} activeContent={props.activeContent} setActiveContent={props.setActiveContent} patientAge={patientAge}/>\r\n                                 )}\r\n                             </>  \r\n                            )}\r\n                            \r\n                        </div>  \r\n                        </form>                                 \r\n                    </div>\r\n                </CardBody>\r\n            </Card>                                 \r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ADR\\Index.js",["1290","1291"],"import React, {useState, useEffect } from \"react\";\r\n// import { Link } from 'react-router-dom';\r\nimport { Table  } from \"react-bootstrap\";\r\nimport { Input, Label, FormGroup, } from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { url as baseUrl,token } from \"./../../../../api\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst ADR = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const classes = useStyles()\r\n  let temp = { ...errors }\r\n  const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n\r\n  useEffect(() => {\r\n    PrepSideEffect();\r\n  }, []);\r\n    //Get list of PrepSideEffect\r\n    const PrepSideEffect =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPrepSideEffect(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n  const handAdrleInputChange = e => {\r\n    props.setAdrObj ({...props.adrObj,  [e.target.name]: e.target.value});\r\n  }\r\n   //Validations of the forms\r\n   const validate = () => {        \r\n    temp.adr = props.adrObj.adr ? \"\" : \"This field is required\"\r\n    temp.adrOnsetDate = props.adrObj.adrOnsetDate ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const addADR = e => { \r\n    if(validate()){\r\n        props.setAdrList([...props.adrList, props.adrObj])\r\n        props.setAdrObj({ adr: \"\", adrOnsetDate: \"\" })\r\n    }else{\r\n      toast.error(\" Field are required \");\r\n    }\r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeRelativeLocation = index => {       \r\n      props.adrList.splice(index, 1);\r\n      props.setAdrList([...props.adrList]);     \r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"form-group mb-3 col-md-5\">\r\n            <FormGroup>\r\n            <Label >ADR </Label>\r\n            <Input\r\n                type=\"select\"\r\n                name=\"adr\"\r\n                id=\"adr\"\r\n                value={props.adrObj.adr}\r\n                onChange={handAdrleInputChange}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                required\r\n                >\r\n                  <option value=\"\"> Select</option>\r\n                    {prepSideEffect.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                        </option>\r\n                    ))}\r\n            </Input>\r\n            {errors.adr !==\"\" ? (\r\n                <span className={classes.error}>{errors.adr}</span>\r\n            ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        <div className=\"form-group mb-3 col-md-5\">        \r\n        <FormGroup>\r\n            <Label > Onset Date</Label>\r\n            <Input\r\n                type=\"date\"\r\n                name=\"adrOnsetDate\"\r\n                id=\"adrOnsetDate\"\r\n                value={props.adrObj.adrOnsetDate}\r\n                onChange={handAdrleInputChange}\r\n                min={props.artStartDate}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                max= {props.encounterDate}\r\n                required\r\n                > \r\n            </Input>\r\n            {errors.adrOnsetDate !==\"\" ? (\r\n                <span className={classes.error}>{errors.adrOnsetDate}</span>\r\n            ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        \r\n        <div className=\"form-group mb-3 col-md-2\">\r\n        <LabelSui as='a' color='black'  onClick={addADR}  size='tiny' style={{ marginTop:35}}>\r\n            <Icon name='plus' /> Add\r\n        </LabelSui>\r\n        </div>\r\n\r\n        {props.adrList.length >0 \r\n          ?\r\n            <List>\r\n            <Table  striped responsive>\r\n                  <thead >\r\n                      <tr>\r\n                          <th>ADR</th>\r\n                          <th>OnSetDate</th>\r\n                          <th ></th>\r\n                      </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                {props.adrList.map((relative, index) => (\r\n\r\n                  <RelativeList\r\n                      key={index}\r\n                      index={index}\r\n                      relative={relative}\r\n                      removeRelativeLocation={removeRelativeLocation}\r\n                  />\r\n                  ))}\r\n                  </tbody>\r\n                  </Table>\r\n            </List>\r\n            :\r\n            \"\"\r\n        }       \r\n      </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\nfunction RelativeList({\r\n  relative,\r\n  index,\r\n  removeRelativeLocation,\r\n}) {\r\n\r\n\r\n  return (\r\n          <tr>\r\n              <th>{relative.adr}</th>\r\n              <th>{relative.adrOnsetDate}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeRelativeLocation(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\n\r\n\r\nexport default ADR;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\OpportunisticInfection\\Index.js",["1292","1293"],"import React, { useState, useEffect } from \"react\";\r\nimport {  Table  } from \"react-bootstrap\";\r\nimport { Input, Label, FormGroup, } from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from \"moment\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl,token } from \"./../../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst ADR = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const classes = useStyles()\r\n  let temp = { ...errors }\r\n  const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    PrepSideEffect();\r\n  }, []);\r\n  //Get list of PrepSideEffect\r\n  const PrepSideEffect =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/OPPORTUNISTIC_INFECTION_ILLNESS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPrepSideEffect(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n  }\r\n  const handleInfectionInputChange = e => {\r\n  props.setInfection ({...props.infection,  [e.target.name]: e.target.value});\r\n  }\r\n  //Validations of the forms\r\n  const validate = () => {        \r\n    temp.ondateInfection = props.infection.ondateInfection ? \"\" : \"This field is required\"\r\n    temp.illnessInfection = props.infection.illnessInfection ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addInfection = e => { \r\n      if(validate()){\r\n        props.setInfectionList([...props.infectionList, props.infection])\r\n        props.setInfection({ illnessInfection: \"\", ondateInfection: \"\" });\r\n      }else{\r\n        toast.error(\" Field are required \");\r\n      }\r\n    \r\n    }\r\n    /* Remove ADR  function **/\r\n    const removeInfection = index => {       \r\n    props.infectionList.splice(index, 1);\r\n    props.setInfectionList([...props.infectionList]);\r\n        \r\n    };\r\n                                            \r\n\r\n  return (\r\n    <div>\r\n       <div className=\"row\">\r\n        <div className=\"form-group mb-3 col-md-5\">\r\n            <FormGroup>\r\n            <Label >Onset Date </Label>\r\n            <Input\r\n                type=\"date\"\r\n                name=\"ondateInfection\"\r\n                id=\"ondateInfection\"\r\n                value={props.infection.ondateInfection}\r\n                onChange={handleInfectionInputChange}\r\n                min={props.artStartDate}\r\n                max= {props.encounterDate}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                required\r\n                > \r\n            </Input>\r\n            {errors.ondateInfection !==\"\" ? (\r\n                <span className={classes.error}>{errors.ondateInfection}</span>\r\n            ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        <div className=\"form-group mb-3 col-md-5\">        \r\n        <FormGroup>\r\n            <Label > Illness</Label>\r\n            <Input\r\n                type=\"select\"\r\n                name=\"illnessInfection\"\r\n                id=\"illnessInfection\"\r\n                value={props.infection.illnessInfection}\r\n                onChange={handleInfectionInputChange}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                required\r\n                >\r\n                  <option value=\"\"> Select</option>\r\n                    {prepSideEffect.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                        </option>\r\n                    ))} \r\n            </Input>\r\n            {errors.illnessInfection !==\"\" ? (\r\n                <span className={classes.error}>{errors.illnessInfection}</span>\r\n            ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        <div className=\"form-group mb-3 col-md-2\">\r\n        <LabelSui as='a' color='black'  onClick={addInfection}  size='tiny' style={{ marginTop:35}}>\r\n            <Icon name='plus' /> Add\r\n        </LabelSui>\r\n        </div>\r\n        {props.infectionList.length >0 \r\n          ?\r\n            <List>\r\n            <div style={{padding:'3px 0px'}} >\r\n            <Table  striped responsive size=\"sm\" >\r\n                  <thead  >\r\n                      <tr >\r\n                          <th>Illness</th>\r\n                          <th>OnSetDate</th>\r\n                          <th ></th>\r\n                      </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                {props.infectionList.map((relative, index) => (\r\n\r\n                  <InfectionList\r\n                      key={index}\r\n                      index={index}\r\n                      relative={relative}\r\n                      removeInfection={removeInfection}\r\n                  />\r\n                  ))}\r\n                  </tbody>\r\n                  </Table>\r\n                  </div>\r\n                </List>\r\n                :\r\n                \"\"\r\n            } \r\n    </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\nfunction InfectionList({\r\n    relative,\r\n    index,\r\n    removeInfection,\r\n  }) {\r\n  \r\n   \r\n    return (\r\n            <tr>\r\n  \r\n                <th>{relative.illnessInfection}</th>\r\n                <th>{relative.ondateInfection}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeInfection(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default ADR;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\TBScreening\\Index.js",["1294","1295"],"import React, { useState, useEffect } from \"react\";\r\nimport { Input, Label, FormGroup} from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { token, url as baseUrl } from \"./../../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    },\r\n    \"& .card-title\":{\r\n      color:'#fff',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& .form-control\":{\r\n      borderRadius:'0.25rem',\r\n      height:'41px'\r\n  },\r\n  \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n  },\r\n  \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\"\r\n  },\r\n  \"& select\":{\r\n      \"-webkit-appearance\": \"listbox !important\"\r\n  },\r\n  \"& p\":{\r\n      color:'red'\r\n  },\r\n  \"& FormLabelName\":{\r\n      fontSize:'14px',\r\n      color:'#014d88',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& label\":{\r\n    fontSize:'14px',\r\n    color:'#014d88',\r\n    fontWeight:'bold'\r\n}\r\n  },\r\n  input: {\r\n    display: 'none'\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst TBScreeningForm = (props) => {\r\n  const classes = useStyles()\r\n  const [tbStatus, setTbStatus] = useState([]); \r\n  useEffect(() => {\r\n    TBStatus();\r\n    if(props.tbObj.currentOnIpt!==\"\" && (props.tbObj.coughing===\"YES\") || (props.tbObj.nightSweat===\"YES\") || (props.tbObj.fever===\"YES\") || (props.tbObj.contactWithTBCase===\"YES\") || (props.tbObj.lethergy===\"YES\")){\r\n      props.tbObj.tbStatusId=68 //for any option with YES     \r\n    }else if(props.tbObj.currentOnIpt!==\"\" &&  props.tbObj.coughing===\"NO\" && props.tbObj.nightSweat===\"NO\" && props.tbObj.fever===\"NO\" && props.tbObj.contactWithTBCase===\"NO\" && props.tbObj.lethergy===\"NO\"){\r\n      props.tbObj.tbStatusId=67\r\n    }else if(props.tbObj.tbStatusId===\"\" || props.tbObj.tbStatusId===null){\r\n      props.tbObj.tbStatusId=\"\"\r\n    }\r\n    }, [props.tbObj]);\r\n    ///GET LIST OF FUNCTIONAL%20_STATUS\r\n    // TB STATUS\r\n    const TBStatus =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            console.log(response.data);\r\n            setTbStatus(response.data);\r\n            //actualTbSTatus=response.data\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n\r\n    const handleInputChange = e => {\r\n      props.setErrors({...props.errors, [e.target.name]: \"\"})\r\n        if(e.target.name ===\"antiTBDrug\" && e.target.value!==\"\"){\r\n          if(e.target.value===\"NO\" && (props.tbObj.currentOnIpt ===\"\" || props.tbObj.currentOnIpt ===null)){\r\n            props.tbObj.tbStatusId=67\r\n          }else if(e.target.value===\"YES\"){\r\n            props.tbObj.tbStatusId=70\r\n          }\r\n        }\r\n        \r\n        props.setTbObj ({...props.tbObj,  [e.target.name]: e.target.value});\r\n      }\r\n   \r\n\r\n  return (\r\n    <div>\r\n       <div className=\"row\">\r\n          \r\n          <div className=\"form-group mb-3 col-md-6\">\r\n          <FormGroup>\r\n              <Label >Patient on Anti TB Drugs?</Label>\r\n              <Input\r\n                  type=\"select\"\r\n                  name=\"antiTBDrug\"\r\n                  id=\"antiTBDrug\"\r\n                  value={props.tbObj.antiTBDrug}\r\n                  onChange={handleInputChange}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"YES\"> YES</option>\r\n                    <option value=\"NO\">NO </option>\r\n\r\n              </Input>\r\n              \r\n            </FormGroup>\r\n            {props.errors.antiTBDrug !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.antiTBDrug}</span>\r\n                  ) : \"\" }\r\n          </div>\r\n          {props.tbObj.antiTBDrug==='NO' && (\r\n            <>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label >Patient Currently on IPT?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"currentOnIpt\"\r\n                    id=\"currentOnIpt\"\r\n                    value={props.tbObj.currentOnIpt}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                        <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.currentOnIpt !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.currentOnIpt}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >coughing?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"coughing\"\r\n                    id=\"coughing\"\r\n                    value={props.tbObj.coughing}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.coughing !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.coughing}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Night Sweat?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"nightSweat\"\r\n                    id=\"nightSweat\"\r\n                    value={props.tbObj.nightSweat}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.nightSweat !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.nightSweat}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Fever</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"fever\"\r\n                    id=\"fever\"\r\n                    value={props.tbObj.fever}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.fever !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.fever}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Contact with TB Case?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"contactWithTBCase\"\r\n                    id=\"contactWithTBCase\"\r\n                    value={props.tbObj.contactWithTBCase}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.contactWithTBCase !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.contactWithTBCase}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Lethergy</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"lethergy\"\r\n                    id=\"lethergy\"\r\n                    value={props.tbObj.lethergy}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      <option value=\"YES\"> YES</option>\r\n                    <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.lethergy !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.lethergy}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n\r\n          </>\r\n          )}\r\n           <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label >TB Status</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"tbStatusId\"\r\n                        id=\"tbStatusId\"\r\n                        value={props.tbObj.tbStatusId}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={props.tbObj.tbStatusId===67 ? false :true }\r\n                        >\r\n                          <option value=\"\"></option>\r\n                          {props.tbObj.tbStatusId===67 ? (\r\n                            <>\r\n                            {tbStatus.filter((x)=> (x.id===67 || x.id===633)).map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                            </>\r\n                            )\r\n                              : \r\n                           (\r\n                            <>\r\n                              <option value=\"\"></option>\r\n                              {tbStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                              ))}\r\n                            </> \r\n                            )\r\n                        }\r\n                    </Input>\r\n                  </FormGroup>\r\n                  {props.errors.tbStatusId !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.tbStatusId}</span>\r\n                  ) : \"\" }\r\n            </div>\r\n        </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\n\r\n\r\nexport default TBScreeningForm;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\History\\ConsultationPage.js",["1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Segment, Label,List, Label as LabelSui, Message} from 'semantic-ui-react'\r\nimport { Table  } from \"react-bootstrap\";\r\n// Page titie\r\nimport { FormGroup, Label as FormLabelName, InputGroup,\r\n          InputGroupText,\r\n          Input,\r\n\r\n        } from \"reactstrap\";\r\nimport ADR from './../ADR/Index'\r\nimport OpportunisticInfection from './../OpportunisticInfection/Index'\r\nimport TBScreening from './../TBScreening/Index'\r\nimport { url as baseUrl, token } from \"../../../../../api\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\n//import { Row, Col,   } from \"react-bootstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n//import Button from '@material-ui/core/Button';\r\n//import ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { Button as ButtonSMUI, Icon} from 'semantic-ui-react'\r\n//import {Link} from 'react-router-dom';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Select from 'react-select'\r\nimport {Dropdown} from 'react-bootstrap';\r\n\r\nlet adherenceLevelObj = []\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n\r\n  root: {\r\n    marginBottom: 20,\r\n    flexGrow: 1,\r\n    \"& .card-title\":{\r\n        color:'#fff',\r\n        fontWeight:'bold'\r\n    },\r\n    \"& .form-control\":{\r\n        borderRadius:'0.25rem',\r\n        height:'41px'\r\n    },\r\n    \"& .card-header:first-child\": {\r\n        borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n        display: \" block !important\"\r\n    },\r\n    \"& select\":{\r\n        \"-webkit-appearance\": \"listbox !important\"\r\n    },\r\n    \"& p\":{\r\n        color:'red'\r\n    },\r\n    \"& label\":{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'bold'\r\n    }\r\n\r\n},\r\n  input: {\r\n    display: 'none'\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\n\r\n\r\nconst ClinicVisit = (props) => {\r\n  const patientObj = props.patientObj ? props.patientObj : {}\r\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\r\n  const [splitButtonOpen, setSplitButtonOpen] = React.useState(false);\r\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\r\n  const toggleSplit = () => setSplitButtonOpen(!splitButtonOpen);\r\n  const [visitId, setVisitId]= useState()\r\n  const [enableUpdateButton, setEnableUpdateButton]=useState(false)\r\n  const [heightValue, setHeightValue]= useState(\"cm\")\r\n  const [enableUpdate, setEnableUpdate]= useState(false) //Enable update for all input field if the user have permission\r\n  const [errors, setErrors] = useState({});\r\n  const [clinicVisitList, setClinicVisitList] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  let temp = { ...errors }\r\n  const classes = useStyles()\r\n  // the visit date history \r\n  //end of the visit date history\r\n  const [getPatientObj, setGetPatientObj] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n  const [clinicalStage, setClinicalStage] = useState([]);\r\n  const [functionalStatus, setFunctionalStatus] = useState([]);\r\n  const [adherenceLevel, setAdherenceLevel] = useState([]);\r\n  const [tbStatus, setTbStatus] = useState([]);\r\n  const [TBForms, setTBForms] = useState(false)\r\n  const [currentVitalSigns, setcurrentVitalSigns] = useState({})\r\n  const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\r\n  const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n  const [childRegimenLine, setChildRegimenLine] = useState([]);\r\n  const [regimenTypeObj, setRegimenTypeObj] = useState([]);\r\n  //opportunistic infection Object\r\n  const [infection, setInfection] = useState({ illnessInfection: \"\", ondateInfection: \"\" });\r\n  const [infectionList, setInfectionList] = useState([]);\r\n  const [testGroup, setTestGroup] = useState([]);\r\n  const [test, setTest] = useState([]);\r\n  //ADR array Object \r\n  const [adrObj, setAdrObj] = useState({ adr: \"\", adrOnsetDate: \"\" });\r\n  const [adrList, setAdrList] = useState([]);\r\n  const [arvDrugOrderList, setarvDrugOrderList] = useState([])\r\n  const [cryptococcal, setCryptococcal] = useState([])\r\n  const [cervicalStatus, setCervicalStatus] = useState([])\r\n  const [cervicalTreatment, setCervicalTreatment] = useState([])\r\n  const [hepatitis, setHepatitis] = useState([])\r\n  const [pregnancyStatus, setPregnancyStatus] = useState([])\r\n  const [familyPlaining, setFamilyPlaining] = useState([])\r\n  const [vLIndication, setVLIndication] = useState([]);\r\n  const [testOrderList, setTestOrderList] = useState([]);//Test Order List\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [labTestOptions, setLabTestOptions] = useState([]);\r\n  const [loadClinicHistory, setLoadClinicHistory] = useState(true);\r\n  const [disabledField, setDisabledField] = useState(false);\r\n  const [arvDrugObj, setArvDrugObj] = useState({\r\n    regimenLine: \"\",\r\n    regimenDrug: \"\",\r\n    regimenLineName: \"\",\r\n    regimenDrugName: \"\",\r\n    dosage: \"\",\r\n    regimenAdherance: \"\",\r\n \r\n  })\r\n  const [tests, setTests]=useState({\r\n\r\n    comments: \"\",\r\n    dateAssayed: \"\",\r\n    labNumber: \"\",\r\n    labTestGroupId: \"\",\r\n    labTestId: \"\",\r\n    dateResultReceived:\"\",\r\n    patientId:props.patientObj?props.patientObj.id:\"\",\r\n    result: \"\",\r\n    sampleCollectionDate: null,\r\n    viralLoadIndication: 0,\r\n    visitId:\"\" \r\n  })\r\n  //Vital signs clinical decision support \r\n  const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n          bodyWeight: \"\",\r\n          diastolic: \"\",\r\n          height: \"\",\r\n          systolic: \"\",\r\n          pulse:\"\",\r\n          temperature:\"\",\r\n          respiratoryRate:\"\" \r\n        })\r\n  const [objValues, setObjValues] = useState({\r\n    adherenceLevel: \"\",\r\n    adheres: {},\r\n    adrScreened: \"\",\r\n    adverseDrugReactions: {},\r\n    artStatusId: \"\" ,\r\n    cd4: \"\",\r\n    cd4Percentage: \"\",\r\n    clinicalNote: \"\",\r\n    clinicalStageId: \"\",\r\n    facilityId: 0,\r\n    functionalStatusId: \"\",\r\n    hivEnrollmentId: \"\",\r\n    nextAppointment: \"\",\r\n    lmpDate: \"\",\r\n    oiScreened: \"\",\r\n    opportunisticInfections: {},\r\n    personId: patientObj.id,\r\n    tbScreen: {},\r\n    stiIds: \"\",\r\n    stiTreated: \"\",\r\n    uuid: \"\",\r\n    visitDate: \"\",\r\n    whoStagingId: \"\",\r\n    cryptococcalScreeningStatus: \"\",\r\n    cervicalCancerScreeningStatus: \"\",\r\n    cervicalCancerTreatmentProvided: \"\",\r\n    hepatitisScreeningResult: \"\",\r\n    familyPlaning: \"\",\r\n    onFamilyPlaning: \"\",\r\n    levelOfAdherence: \"\",\r\n    tbStatus: \"\",\r\n    tbPrevention: \"\",\r\n    arvdrugsRegimen: {},\r\n    viralLoadOrder: {},\r\n    tbPrevention:\"\",\r\n    pregnancyStatus:\"\"\r\n\r\n  });\r\n  const [vital, setVitalSignDto] = useState({\r\n    bodyWeight: \"\",\r\n    diastolic: \"\",\r\n    encounterDate: \"\",\r\n    facilityId: 1,\r\n    height: \"\",\r\n    personId: props.patientObj.id,\r\n    serviceTypeId: 1,\r\n    systolic: \"\",\r\n    pulse:\"\",\r\n    temperature:\"\",\r\n    respiratoryRate:\"\" \r\n  })\r\n  const [tbObj, setTbObj] = useState({\r\n    currentOnIpt: \"\",\r\n    coughing: \"\",\r\n    antiTBDrug: \"\",\r\n    nightSweat: \"\",\r\n    fever: \"\",\r\n    contactWithTBCase: \"\",\r\n    lethergy: \"\",\r\n    tbStatusId: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    FunctionalStatus();\r\n    WhoStaging();\r\n    AdherenceLevel();\r\n    TBStatus();\r\n    VitalSigns()\r\n\r\n    //ClinicVisitListHistory();\r\n    AdultRegimenLine();\r\n    ChildRegimenLine();\r\n    CRYPTOCOCCAL_SCREENING_STATUS();\r\n    CERVICAL_CANCER_SCREENING_STATUS();\r\n    CERVICAL_CANCER_TREATMENT();\r\n    HEPATITIS_SCREENING_RESULT();\r\n    PREGANACY_STATUS();\r\n    FAMILY_PLANNING_METHOD();\r\n    TestGroup();\r\n    if(props.activeContent.id!==\"\"){\r\n      GetPatientObj();\r\n      GetVisitById(props.activeContent.id)\r\n      setVisitId(props.activeContent.id)\r\n    }\r\n    if(props.activeContent && props.activeContent.actionType==='view'){\r\n      setDisabledField(true)\r\n   }\r\n    if(objValues.adherenceLevel!==null && objValues.adherenceLevel==='Good'){\r\n      objValues.levelOfAdherence = 354\r\n      \r\n    }else if(objValues.adherenceLevel!==null && objValues.adherenceLevel==='Fair'){\r\n      objValues.levelOfAdherence = 355\r\n    }else if(objValues.adherenceLevel!==null && objValues.adherenceLevel==='Poor'){\r\n      objValues.levelOfAdherence = 356\r\n    }else{\r\n      objValues.levelOfAdherence = objValues.levelOfAdherence\r\n    }\r\n\r\n  }, [patientObj.id, props.activeContent.id, objValues.adherenceLevel]);// objValues.viralLoadOrder\r\n  const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n        if (age_now === 0) {\r\n                return m;\r\n            }\r\n            return age_now;\r\n  };\r\n  const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"));\r\n  //Get list of Test Group\r\n  const TestGroup =()=>{\r\n    axios\r\n    .get(`${baseUrl}laboratory/labtestgroups`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    )\r\n    .then((response) => {\r\n        setTestGroup(response.data);\r\n    })\r\n    .catch((error) => {\r\n    //console.log(error);\r\n    });\r\n      \r\n  }\r\n    // PREGANACY_STATUS\r\n    const PREGANACY_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setPregnancyStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // CRYPTOCOCCAL_SCREENING_STATUS\t\r\n    const CRYPTOCOCCAL_SCREENING_STATUS\t = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CRYPTOCOCCAL_SCREENING_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCryptococcal(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // CERVICAL_CANCER_SCREENING_STATUS\t\r\n    const CERVICAL_CANCER_SCREENING_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_SCREENING_STATUS\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCervicalStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // CERVICAL_CANCER_TREATMENT\t\r\n    const CERVICAL_CANCER_TREATMENT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CERVICAL_CANCER_TREATMENT\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setCervicalTreatment(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // HEPATITIS_SCREENING_RESULT\t\r\n    const HEPATITIS_SCREENING_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/HEPATITIS_SCREENING_RESULT\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setHepatitis(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    // HEPATITIS_SCREENING_RESULT\t\r\n    const FAMILY_PLANNING_METHOD = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FAMILY_PLANNING_METHOD\t`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setFamilyPlaining(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n    axios\r\n        .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n          setAdultRegimenLine(response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14)));\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });        \r\n    }\r\n    //GET AdultRegimenLine \r\n    const ChildRegimenLine =()=>{\r\n      axios\r\n          .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n            setChildRegimenLine(response.data.filter((x)=> (x.id===3 || x.id===4 )));\r\n          })\r\n          .catch((error) => {\r\n          //console.log(error);\r\n          });        \r\n    }\r\n    //GET LIST Drug Refill\r\n    // async function ClinicVisitListHistory() {\r\n    //   setLoading(true)\r\n    //   axios\r\n    //       .get(`${baseUrl}hiv/art/clinic-visit/person?pageNo=0&pageSize=1000&personId=${props.patientObj.id}`,\r\n    //       { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n    //       )\r\n    //       .then((response) => {\r\n    //           setLoading(false)\r\n    //           setClinicVisitList(response.data.filter((x)=> x.isCommencement!==true));              \r\n    //       })\r\n    //       .catch((error) => {  \r\n    //           setLoading(false)  \r\n    //       });        \r\n    // }\r\n    //Check for the last Vital Signs\r\n    const VitalSigns = () => {\r\n      axios\r\n        .get(`${baseUrl}patient/vital-sign/person/${props.patientObj.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n\r\n          const lastVitalSigns = response.data[response.data.length - 1]\r\n          if (lastVitalSigns.encounterDate >= moment(new Date()).format(\"YYYY-MM-DD\") ) {\r\n            setcurrentVitalSigns(lastVitalSigns)\r\n            setShowCurrentVitalSigns(true)\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    }\r\n      //Get The updated patient objeect\r\n      const GetPatientObj = () => {\r\n        axios\r\n        .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setGetPatientObj(response.data)\r\n            //patientObj=response.data\r\n        })\r\n          .catch((error) => {\r\n            //console.log(error);\r\n          });\r\n      }\r\n\r\n    //Get list of WhoStaging\r\n    const WhoStaging = () => {\r\n      axios\r\n        .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          //console.log(response.data);\r\n          setClinicalStage(response.data);\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n\r\n    }\r\n    ///GET LIST OF FUNCTIONAL%20_STATUS\r\n    // TB STATUS\r\n    const TBStatus = () => {\r\n      axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          //console.log(response.data);\r\n          setTbStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n\r\n    }\r\n\r\n    async function FunctionalStatus() {\r\n      axios\r\n        .get(`${baseUrl}application-codesets/v2/FUNCTIONAL%20_STATUS`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n\r\n          setFunctionalStatus(response.data);\r\n          //setValues(response.data)\r\n        })\r\n        .catch((error) => {\r\n        });\r\n    }\r\n    ///Level of Adherence\r\n    async function AdherenceLevel() {\r\n      axios\r\n        .get(`${baseUrl}application-codesets/v2/PrEP_LEVEL_OF_ADHERENCE`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          console.log(response.data)\r\n          setAdherenceLevel(response.data);\r\n\r\n        })\r\n        .catch((error) => {\r\n        });\r\n    }\r\n    const handleInputChange = e => {\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      if (e.target.name === \"whoStagingId\") {\r\n        if (e.target.value === \"NO\") {\r\n          setTBForms(true)\r\n        } else {\r\n          setTBForms(false)\r\n        }\r\n      }\r\n    }\r\n    const handleInputChangeVitalSignDto = e => {\r\n      setErrors({...errors, [e.target.name]: \"\"})\r\n      setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n      // if(e.target.name!=='encounterDate' && e.target.name!=='muac'){\r\n      //   setVitalSignDto({ ...vital, [e.target.name]: e.target.value.replace(/\\D/g, '') });\r\n      // }else{\r\n      //   setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\r\n      // }\r\n\r\n      \r\n    }\r\n\r\n    //Handle CheckBox \r\n    const handleCheckBox = e => {\r\n      if (e.target.checked) {\r\n        //currentVitalSigns.personId === null ? props.patientObj.id : currentVitalSigns.personId\r\n        setVitalSignDto({ ...currentVitalSigns })\r\n      } else {\r\n        setVitalSignDto({\r\n          bodyWeight: \"\",\r\n          diastolic: \"\",\r\n          captureDate:\"\",\r\n          encounterDate: \"\",\r\n          facilityId: \"\",\r\n          height: \"\",\r\n          personId: props.patientObj.id,\r\n          serviceTypeId: \"\",\r\n          systolic: \"\",\r\n          pulse:\"\",\r\n          temperature:\"\",\r\n          respiratoryRate:\"\" \r\n        })\r\n      }\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight =(e)=>{\r\n      if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n      }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n      }\r\n    }\r\n    const handleInputValueCheckBodyWeight =(e)=>{\r\n      if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n        const message =\"Body weight must not be greater than 150 and less than 3\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n      }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n      }\r\n    }\r\n    const handleInputValueCheckSystolic =(e)=>{\r\n      if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n        const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n      }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n      }\r\n    }\r\n    const handleInputValueCheckDiastolic =(e)=>{\r\n      if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n        const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n      }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n      }\r\n    }\r\n    const handleInputValueCheckPulse =(e)=>{\r\n      if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n      const message =\"Pulse must not be greater than 120 and less than 40\"\r\n      setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n      }else{\r\n      setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n      }\r\n    }\r\n    const handleInputValueCheckRespiratoryRate =(e)=>{\r\n        if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n        const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckTemperature =(e)=>{\r\n        if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n        const message =\"Temperature must not be greater than 47 and less than 35\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n        }\r\n    }\r\n    const handleInputChangeRegimenLine = e => {\r\n      const regimenId= e.target.value\r\n      setArvDrugObj({ ...arvDrugObj, [e.target.name]: e.target.value });\r\n      \r\n    }\r\n    const handleInputChangeRegimen = e => {\r\n      const regimenId= e.target.value\r\n      setArvDrugObj({ ...arvDrugObj, [e.target.name]: e.target.value });\r\n      if(e.target.value!==\"\"){\r\n        RegimenType(regimenId)\r\n      }\r\n    }\r\n    function RegimenType(id) {\r\n      async function getCharacters() {\r\n          try{\r\n          const response = await axios.get(`${baseUrl}hiv/regimen/types/${id}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n          if(response.data){\r\n            setRegimenTypeObj(response.data)\r\n          }\r\n          }catch(e) {\r\n    \r\n          }\r\n      }\r\n      getCharacters();\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => {        \r\n      objValues.visitDate === \"\" && (temp.encounterDate = vital.encounterDate ? \"\" : \"This field is required\" )//objValues.visitDate\r\n      temp.nextAppointment = objValues.nextAppointment ? \"\" : \"This field is required\"\r\n      temp.whoStagingId = objValues.whoStagingId ? \"\" : \"This field is required\"\r\n      //patientAge>=10  && (temp.pregnancyStatus = objValues.pregnancyStatus ? \"\" : \"This field is required\")\r\n      {(patientAge>=10 && patientObj.sex==='Female')  && (temp.pregnancyStatus = objValues.pregnancyStatus ? \"\" : \"This field is required\")}\r\n      temp.functionalStatusId = objValues.functionalStatusId ? \"\" : \"This field is required\"\r\n      temp.levelOfAdherence = objValues.levelOfAdherence ? \"\" : \"This field is required\"\r\n      //temp.labTestGroupId = vital.diastolic ? \"\" : \"This field is required\"\r\n      //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n      temp.height = vital.height ? \"\" : \"This field is required\"\r\n      temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n      //TB VALIDATION \r\n      temp.tbStatusId = tbObj.tbStatusId ? \"\" : \"This field is required\"\r\n      temp.antiTBDrug = tbObj.antiTBDrug ? \"\" : \"This field is required\"\r\n      tbObj.antiTBDrug && tbObj.antiTBDrug==='NO' && (temp.currentOnIpt = tbObj.currentOnIpt ? \"\" : \"This field is required\")\r\n      tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.fever = tbObj.fever ? \"\" : \"This field is required\")\r\n      tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.nightSweat = tbObj.nightSweat ? \"\" : \"This field is required\")\r\n      tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.lethergy = tbObj.lethergy ? \"\" : \"This field is required\")\r\n      tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.coughing = tbObj.coughing ? \"\" : \"This field is required\")\r\n      tbObj.currentOnIpt && tbObj.currentOnIpt==='NO' && (temp.contactWithTBCase = tbObj.contactWithTBCase ? \"\" : \"This field is required\")\r\n      setErrors({\r\n          ...temp\r\n      })\r\n      return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    const handleInputChangeObject = e => {\r\n      setSelectedOption(e)\r\n      tests.labTestGroupId=e.testGroupId\r\n      tests.labTestId = e.value               \r\n    }\r\n      //Validations of the Lab Viral Load \r\n    const validateLabOrder = () => {        \r\n      temp.labTestGroupId = tests.labTestGroupId ? \"\" : \"This field is required\"\r\n      temp.labTestId = tests.labTestId ? \"\" : \"This field is required\"\r\n      tests.labTestId==='16' && (temp.viralLoadIndication = tests.viralLoadIndication ? \"\" : \"This field is required\")   \r\n      setErrors({\r\n          ...temp\r\n      })\r\n      return Object.values(temp).every(x => x == \"\")\r\n    }\r\n  //Validations of the ARV DRUG Load \r\n  const validateArvDrug = () => {       \r\n    temp.regimenLine = arvDrugObj.regimenLine ? \"\" : \"This field is required\"\r\n    temp.regimenDrug = arvDrugObj.regimenDrug ? \"\" : \"This field is required\"\r\n    temp.dosage = arvDrugObj.dosage ? \"\" : \"This field is required\"\r\n    temp.regimenAdherance = arvDrugObj.regimenAdherance ? \"\" : \"This field is required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const addOrder = e => {  \r\n    if(validateLabOrder()){\r\n        tests.visitId=visitId\r\n        setTestOrderList([...testOrderList, tests])\r\n        setTests({\r\n          comments: \"\",\r\n          dateAssayed: \"\",\r\n          labNumber: \"\",\r\n          labTestGroupId: \"\",\r\n          labTestId: \"\",\r\n          dateResultReceived:\"\",\r\n          patientId:props.patientObj?props.patientObj.id:\"\",\r\n          result: \"\",\r\n          sampleCollectionDate: null,\r\n          viralLoadIndication: 0,\r\n          visitId:\"\" \r\n        })\r\n    }\r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeOrder = index => {       \r\n    testOrderList.splice(index, 1);\r\n    setTestOrderList([...testOrderList]);\r\n      \r\n  };\r\n  const addArvDrugOrder = e => { \r\n    if(validateArvDrug()){\r\n      const actualRegimen= patientAge <=5 ? childRegimenLine : adultRegimenLine //determine the regimen to filter by age \r\n      const regimenName = actualRegimen.find((x)=> x.id===parseInt(arvDrugObj.regimenLine))\r\n      arvDrugObj.regimenLineName= regimenName.description\r\n      const regimenType= regimenTypeObj.find((x)=> x.id===parseInt(arvDrugObj.regimenDrug))     \r\n      arvDrugObj.regimenDrugName= regimenType.description\r\n      setarvDrugOrderList([...arvDrugOrderList, arvDrugObj])\r\n      setArvDrugObj({\r\n        regimenLine: \"\",\r\n        regimenDrug: \"\",\r\n        regimenLineName: \"\",\r\n        regimenDrugName: \"\",\r\n        dosage: \"\",\r\n        regimenAdherance: \"\",\r\n     \r\n      })\r\n    }        \r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeArvDrugOrder = index => {       \r\n    arvDrugOrderList.splice(index, 1);\r\n    setarvDrugOrderList([...arvDrugOrderList]);\r\n      \r\n  };\r\n  const handleSelectedTestGroup = e =>{\r\n    setTests ({...tests,  labTestGroupId: e.target.value});\r\n    const getTestList= testGroup.filter((x)=> x.id===parseInt(e.target.value))\r\n    setTest(getTestList[0].labTests)\r\n    // if(e.target.value==='4'){            \r\n    //     setVlRequired(true)\r\n    // }else{\r\n    //     setVlRequired(false) \r\n    // }\r\n  }\r\n  const handleInputChangeTest = e => {\r\n  setErrors({...temp, [e.target.name]:\"\"})//reset the error message to empty once the field as value\r\n  setTests ({...tests,  [e.target.name]: e.target.value});       \r\n  }\r\n\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(validate()){\r\n    setSaving(true)\r\n    objValues.visitDate = vital && vital.encounterDate ? vital.encounterDate : objValues.visitDate\r\n    vital['captureDate'] = vital && vital.encounterDate ? vital.encounterDate : objValues.visitDate\r\n    if(vital && !vital.encounterDate){\r\n      vital['encounterDate'] = vital && vital.encounterDate ? vital.encounterDate : objValues.visitDate\r\n    }\r\n    \r\n    objValues.adverseDrugReactions = adrList\r\n    objValues.artStatusId = getPatientObj.artCommence.id\r\n    objValues.hivEnrollmentId = getPatientObj.enrollment.id\r\n    objValues.opportunisticInfections = infectionList\r\n    objValues.tbScreen = tbObj\r\n    objValues.tbStatus = tbObj.tbStatusId\r\n    objValues.viralLoadOrder= testOrderList\r\n    objValues.arvdrugsRegimen= arvDrugOrderList\r\n    objValues['vitalSignDto'] = vital\r\n\r\n    axios.put(`${baseUrl}hiv/art/clinic-visit/${objValues.id}`, objValues,\r\n      { headers: { \"Authorization\": `Bearer ${token}` } },\r\n\r\n    )\r\n      .then(response => {\r\n        setSaving(false);\r\n        props.ClinicVisitListHistory()\r\n        toast.success(\"Clinic Visit(Care card) updated successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n        GetVisitById(objValues.id)\r\n        props.setActiveContent({...props.activeContent, route:'recent-history', activeTab:\"history\", })\r\n      })\r\n      .catch(error => {\r\n        setSaving(false);\r\n        if(error.response && error.response.data){\r\n          let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n          if(error.response.data.apierror && error.response.data.apierror.message!==\"\" && error.response.data.apierror && error.response.data.apierror.subErrors[0].message!==\"\"){\r\n            toast.error(error.response.data.apierror.message + \" : \" + error.response.data.apierror.subErrors[0].field + \" \" + error.response.data.apierror.subErrors[0].message, {position: toast.POSITION.BOTTOM_CENTER});\r\n          }else{\r\n            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n          }\r\n\r\n        }\r\n       \r\n      });\r\n    }else{\r\n      toast.error(\"All field are required\", {position: toast.POSITION.BOTTOM_CENTER})\r\n    }\r\n  }\r\n  const getVisitDetail=(e)=>{\r\n    if(e.id){\r\n      setEnableUpdateButton(true)\r\n      setVisitId(e.id)\r\n      GetVisitById(e.id) \r\n    }      \r\n  }\r\n  const EnableUpdateAction =()=>{\r\n      setEnableUpdate(true)\r\n  }\r\n  //Get visit by ID\r\n   function GetVisitById(visitID) {\r\n    if(visitID!==''){\r\n    axios\r\n      .get(`${baseUrl}hiv/art/clinic-visit/${visitID}`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n          const e = response.data\r\n          setObjValues(e)\r\n          setVitalSignDto({ ...vital, ...e.vitalSignDto })\r\n          objValues.clinicalNote = e.clinicalNote\r\n          objValues.functionalStatusId= e.functionalStatusId\r\n          objValues.whoStagingId= e.whoStagingId \r\n          objValues.nextAppointment= e.nextAppointment\r\n          vital.captureDate=e.visitDate\r\n          objValues.visitDate=e.visitDate\r\n          //setObjValues(e)\r\n          const objTB = e.tbScreen!==null ? e.tbScreen : tbObj\r\n          setTbObj({...objTB})\r\n          const adrListObj = e.adverseDrugReactions!==null ? e.adverseDrugReactions : adrList\r\n          setAdrList([...adrListObj])\r\n          const inffectionObj = e.opportunisticInfections!==null ? e.opportunisticInfections : infectionList\r\n          setInfectionList([...inffectionObj])\r\n          const viralObj = e.viralLoadOrder!==null ? e.viralLoadOrder : testOrderList\r\n          setTestOrderList(viralObj)\r\n          const arvObj = e.arvdrugsRegimen!==null ? e.arvdrugsRegimen : arvDrugOrderList\r\n          setarvDrugOrderList([...arvObj])\r\n          tbObj.tbStatusId=objValues.tbStatus!==null && objValues.tbStatus!==\"\" ? objValues.tbStatus : \"\"\r\n         \r\n\r\n      })\r\n      .catch((error) => {\r\n      });\r\n    }\r\n  }\r\n  function BmiCal (bmi){\r\n    if(bmi<18.5){\r\n      return (\r\n        <Message        \r\n         size='mini'\r\n         color='brown'\r\n          content='Underweight'\r\n        />\r\n      )      \r\n    }else if(bmi >=18.5 && bmi<=24.9){\r\n      <Message        \r\n         size='mini'\r\n         color='olive'\r\n          content='Well nourished'\r\n        />\r\n    }\r\n    else if( bmi>25){\r\n      <Message        \r\n         size='mini'\r\n         color='blue'\r\n          content='Overweight/Obese'\r\n        />\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <div className=\"row\">\r\n            <div className=\"col-xl-3 col-xxl-3 col-lg-3\" >\r\n                <div className=\"card\" style={{ height: \"500px\" }}>\r\n                    <div className=\"card-header  border-0 pb-2\" style={{backgroundColor:\"#014D88\"}}>\r\n                    <h4 className=\"card-title\" style={{color:\"#fff\"}}> Clinic Visits</h4>\r\n                    </div>\r\n                    <div className=\"card-body\" >\r\n                    <PerfectScrollbar\r\n                        style={{ height: \"370px\" }}\r\n                        id=\"DZ_W_Todo1\"\r\n                        className=\"widget-media dz-scroll ps ps--active-y\"\r\n                    >\r\n                    {props.clinicVisitList.map((visit,index)=>(\t\r\n                    <div className=\"media pb-3 border-bottom mb-0 align-items-center\" key={index}>\t\t\t\t\t\t\t\t\r\n                      <div className=\"media-body\">\r\n                            <ButtonSMUI\r\n                                color='black'\r\n                                content='Visit Date'\r\n                                //icon='calendar alternate'\r\n                                size='mini'\r\n                                onClick={()=>getVisitDetail(visit)}\r\n                                label={{ basic: true, color: 'grey', pointing: 'left', content: `${visit.visitDate}` }}\r\n                            />\r\n                            \r\n                      </div>\r\n                    </div>\r\n\t\t\t\t\t\t        ))}\r\n                    </PerfectScrollbar>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-xl-9 col-xxl-9 col-lg-9\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header  border-0 pb-2\" style={{backgroundColor:\"#014D88\"}}>\r\n                    <h4 className=\"card-title\" style={{color:\"#fff\"}}> </h4>\r\n                    {enableUpdateButton && (\r\n                    <ButtonSMUI color='facebook' onClick={()=>EnableUpdateAction()} >\r\n                      <Icon name='edit' /> Edit Visit \r\n                    </ButtonSMUI>\r\n                    )}\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                    <Grid columns='equal'>\r\n                    <Grid.Column className={classes.root}>\r\n                    <Segment>\r\n                    <Label as='a' color='black' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}> Visit Date - {vital.encounterDate && vital.encounterDate!==\"\"? vital.encounterDate : objValues.visitDate}</h4>\r\n                        </Label>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <FormLabelName >Date of Visit <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                            <Input\r\n                                type=\"date\"\r\n                                name=\"encounterDate\"\r\n                                id=\"encounterDate\"\r\n                                value={vital.encounterDate && vital.encounterDate!==\"\"? vital.encounterDate : objValues.visitDate}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                disabled={!enableUpdate}\r\n                                required\r\n                            />\r\n                            {errors.encounterDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.encounterDate}</span>\r\n                            ) : \"\" }\r\n\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n\r\n                        </div>\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Pulse</FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Respiratory Rate </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Temperature </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Body Weight <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Height <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                                isOpen={dropdownOpen}\r\n                                toggle={toggleDropDown}\r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                                <InputGroupText\r\n                                addonType=\"append\"\r\n                                isOpen={dropdownOpen}\r\n                                toggle={toggleDropDown}\r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height!=='' ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-2\">\r\n                        {vital.bodyWeight!==\"\" && vital.height!=='' && (\r\n                            <FormGroup>\r\n                            <Label > {\" \"}</Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-12\">\r\n                        {\r\n                            BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\r\n                          }\r\n                    </div>\r\n              </div>\r\n              <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-12\">\r\n                  <FormGroup>\r\n                  <FormLabelName >Blood Pressure </FormLabelName>\r\n                  <InputGroup>\r\n                  <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                          systolic(mmHg)\r\n                  </InputGroupText> \r\n                      <Input \r\n                          type=\"number\"\r\n                          name=\"systolic\"\r\n                          id=\"systolic\"\r\n                          min=\"90\"\r\n                          max=\"240\"\r\n                          onChange={handleInputChangeVitalSignDto}\r\n                          value={vital.systolic}\r\n                          onKeyUp={handleInputValueCheckSystolic}\r\n                          style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                          disabled={!enableUpdate}\r\n                      />\r\n                      <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                      diastolic(mmHg)\r\n                      </InputGroupText>\r\n                          <Input \r\n                          type=\"number\"\r\n                          name=\"diastolic\"\r\n                          id=\"diastolic\"\r\n                          min={0}\r\n                          max={140}\r\n                          onChange={handleInputChangeVitalSignDto}\r\n                          value={vital.diastolic}\r\n                          onKeyUp={handleInputValueCheckDiastolic} \r\n                          style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                          />\r\n                      \r\n                      \r\n                  </InputGroup>\r\n                  {vitalClinicalSupport.systolic !==\"\" ? (\r\n                  <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                  ) : \"\"}\r\n                  {errors.systolic !==\"\" ? (\r\n                      <span className={classes.error}>{errors.systolic}</span>\r\n                  ) : \"\" }  \r\n                  {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                  <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                  ) : \"\"}\r\n                  {errors.diastolic !==\"\" ? (\r\n                      <span className={classes.error}>{errors.diastolic}</span>\r\n                  ) : \"\" }          \r\n                  </FormGroup>\r\n              </div>\r\n\r\n              </div>\r\n              </div>\r\n              {patientAge && patientAge<14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Head Circumference </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"text\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <FormLabelName >Surface Area </FormLabelName>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"text\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                disabled={!enableUpdate}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <FormLabelName >MUAC</FormLabelName>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        value={vital.muac} \r\n                                        disabled={!enableUpdate}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n                                    <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        cm\r\n                                    </InputGroupText>\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                    </div>\r\n              )}\r\n              \r\n              <Label as='a' color='grey' style={{width:'106%', height:'35px'}} ribbon>\r\n              <h4 style={{color:'#fff'}}>CONSULTATION</h4>\r\n              </Label>\r\n              <br /><br />\r\n\r\n              <div className=\" mb-3\">\r\n              <FormLabelName >Clinical Notes</FormLabelName>\r\n              <textarea\r\n                  name=\"clinicalNote\"\r\n                  className=\"form-control\"\r\n                  value={objValues.clinicalNote}\r\n                  onChange={handleInputChange}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  disabled={!enableUpdate}\r\n              ></textarea>\r\n              {errors.clinicalNote !==\"\" ? (\r\n                      <span className={classes.error}>{errors.clinicalNote}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"row\">\r\n\r\n              <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                  <FormLabelName >WHO Staging <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                      type=\"select\"\r\n                      name=\"whoStagingId\"\r\n                      id=\"whoStagingId\"\r\n                      value={objValues.clinicalStageId!==null ? objValues.clinicalStageId :  objValues.whoStagingId}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      disabled={!enableUpdate}\r\n                      \r\n                  >\r\n                      <option value=\"select\">Select </option>\r\n\r\n                      {clinicalStage.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                          {value.display}\r\n                      </option>\r\n                      ))}\r\n                  </Input>\r\n                  {errors.whoStagingId !==\"\" ? (\r\n                      <span className={classes.error}>{errors.whoStagingId}</span>\r\n                  ) : \"\" }\r\n                  </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                  <FormLabelName >Functional Status <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                      type=\"select\"\r\n                      name=\"functionalStatusId\"\r\n                      id=\"functionalStatusId\"\r\n                      value={objValues.functionalStatusId}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      disabled={!enableUpdate}\r\n                      \r\n                  >\r\n                      <option value=\"select\">Select </option>\r\n\r\n                      {functionalStatus.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                          {value.display}\r\n                      </option>\r\n                      ))}\r\n                  </Input>\r\n                  {errors.functionalStatusId !==\"\" ? (\r\n                      <span className={classes.error}>{errors.functionalStatusId}</span>\r\n                  ) : \"\" }\r\n                  </FormGroup>\r\n              </div>\r\n              \r\n              <div className=\" mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <FormLabelName >Level of Adherence <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"levelOfAdherence\"\r\n                  id=\"levelOfAdherence\"\r\n                  value={objValues.levelOfAdherence}\r\n                  onChange={handleInputChange}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  disabled={!enableUpdate}\r\n                >\r\n                  <option value=\"select\">Select </option>\r\n\r\n                  {adherenceLevel.map((value) => (\r\n                    <option key={value.id} value={value.id}>\r\n                      {value.display}\r\n                    </option>\r\n                  ))}\r\n                </Input>\r\n                {errors.levelOfAdherence !==\"\" ? (\r\n                    <span className={classes.error}>{errors.levelOfAdherence}</span>\r\n                ) : \"\" }\r\n              </FormGroup>\r\n            </div>\r\n                <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName >Cryptococcal Screening Status</FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"cryptococcalScreeningStatus\"\r\n                      id=\"cryptococcalScreeningStatus\"\r\n                      value={objValues.cryptococcalScreeningStatus}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      disabled={!enableUpdate}\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n\r\n                      {cryptococcal.map((value) => (\r\n                              <option key={value.code} value={value.code}>\r\n                                  {value.display}\r\n                              </option>\r\n                          ))}\r\n                    </Input>\r\n                  \r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <FormLabelName >TB Status <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"tbStatus\"\r\n                        id=\"tbStatus\"\r\n                        value={objValues.tbStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                        disabled={!enableUpdate}\r\n                        >\r\n                        <option value=\"\"> Select</option>\r\n                            {tbStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n\r\n                    </Input>\r\n                    {errors.tbStatus !==\"\" ? (\r\n                        <span className={classes.error}>{errors.tbStatus}</span>\r\n                        ) : \"\" }\r\n                    </FormGroup>\r\n                </div>\r\n                {patientAge>= 10 && (patientObj.sex==='Female' || patientObj.sex==='FEMALE' || patientObj.sex==='female') && (\r\n                <>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Cervical Cancer Screening Status</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"cervicalCancerScreeningStatus\"\r\n                        id=\"cervicalCancerScreeningStatus\"\r\n                        value={objValues.cervicalCancerScreeningStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={!enableUpdate}\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {cervicalStatus.map((value) => (\r\n                                <option key={value.code} value={value.code}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                      </Input>\r\n                      \r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName >Cervical Cancer Treatment Provided</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"cervicalCancerTreatmentProvided\"\r\n                        id=\"cervicalCancerTreatmentProvided\"\r\n                        value={objValues.cervicalCancerTreatmentProvided}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={!enableUpdate}\r\n                      >\r\n                        <option value=\"select\">Select </option>\r\n\r\n                        {cervicalTreatment.map((value) => (\r\n                                <option key={value.code} value={value.code}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                      </Input>\r\n                      \r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName >Pregnancy Status <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"pregnancyStatus\"\r\n                      id=\"pregnancyStatus\"\r\n                      value={objValues.pregnancyStatus}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      disabled={!enableUpdate}\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n\r\n                      {pregnancyStatus.map((value) => (\r\n                              <option key={value.code} value={value.display}>\r\n                                  {value.display}\r\n                              </option>\r\n                          ))}\r\n                    </Input>\r\n                    {errors.pregnancyStatus !==\"\" ? (\r\n                                <span className={classes.error}>{errors.pregnancyStatus}</span>\r\n                            ) : \"\" }\r\n                  </FormGroup>\r\n                </div>\r\n                  </>\r\n              )}\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Hepatitis Screening Result</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"hepatitisScreeningResult\"\r\n                    id=\"hepatitisScreeningResult\"\r\n                    value={objValues.hepatitisScreeningResult}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    disabled={!enableUpdate}\r\n                  >\r\n                    <option value=\"select\">Select </option>\r\n\r\n                    {hepatitis.map((value) => (\r\n                            <option key={value.code} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                  </Input>\r\n                  \r\n                </FormGroup>\r\n              </div>\r\n              {/* This section is if the patient is Female */}\r\n\r\n                <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName >Family Planing ?</FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"familyPlaning\"\r\n                      id=\"familyPlaning\"\r\n                      value={objValues.familyPlaning}\r\n                      onChange={handleInputChange}\r\n                      style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                      disabled={!enableUpdate}\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n                      <option value=\"Yes\">Yes </option>\r\n                      <option value=\"No\">No </option>\r\n                    </Input>\r\n                   \r\n                  </FormGroup>\r\n                </div>\r\n                    {objValues.familyPlaning==='Yes' && (\r\n                      <div className=\" mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <FormLabelName >On Family Planing </FormLabelName>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"onFamilyPlaning\"\r\n                            id=\"onFamilyPlaning\"\r\n                            value={objValues.onFamilyPlaning}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            disabled={!enableUpdate}\r\n                          >\r\n                            <option value=\"select\">Select </option>\r\n\r\n                            {familyPlaining.map((value) => (\r\n                                  <option key={value.code} value={value.code}>\r\n                                      {value.display}\r\n                                  </option>\r\n                              ))}\r\n                          </Input>\r\n                          \r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    </div>\r\n                        <br />\r\n                        <Label as='a' color='red' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}>OPPORTUNISTIC INFECTION</h4>\r\n                        </Label>\r\n                        <br /><br />\r\n                        <OpportunisticInfection setInfection={setInfection} infection={infection} setInfectionList={setInfectionList} infectionList={infectionList} enableUpdate={enableUpdate} encounterDate={vital.encounterDate}/>\r\n                        <br />\r\n                        <Label as='a' color='pink' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}>ADR</h4>\r\n                        </Label>\r\n                        <br /><br />\r\n                        <ADR setAdrObj={setAdrObj} adrObj={adrObj} setAdrList={setAdrList} adrList={adrList}  enableUpdate={enableUpdate} encounterDate={vital.encounterDate}/>\r\n                        <br />\r\n\r\n                        <Label as='a'  color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            TB Screening\r\n                          </Label>\r\n                          <br />\r\n                          {/* TB Screening Form */}\r\n                          <TBScreening tbObj={tbObj} setTbObj={setTbObj} errors={errors} setErrors={setErrors}/>\r\n\r\n                        <br />\r\n                        <Label as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}>ARV DRUGS Regimen</h4>\r\n                        </Label>\r\n                       \r\n                        <br /><br />\r\n                        {/* ARV DRUGS Regimen */}\r\n                        <div className=\"row\">\r\n                          <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                  <FormLabelName >Regimen Line </FormLabelName>\r\n                                  <Input\r\n                                    type=\"select\"\r\n                                    name=\"regimenLine\"\r\n                                    id=\"regimenLine\"\r\n                                    value={arvDrugObj.regimenLine}\r\n                                    onChange={handleInputChangeRegimen}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={!enableUpdate}\r\n                                  >\r\n                                    <option value=\"select\">Select </option>\r\n                                    {patientAge >17 &&  (\r\n                                      <>\r\n                                        {adultRegimenLine.map((value) => (\r\n                                          <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                          </option>\r\n                                        ))}\r\n                                      </>\r\n                                    )}\r\n                                    {patientAge <=17 &&  (\r\n                                      <>\r\n                                        {childRegimenLine.map((value) => (\r\n                                          <option key={value.id} value={value.id}>\r\n                                            {value.description}\r\n                                          </option>\r\n                                        ))}\r\n                                      </>\r\n                                    )}\r\n                                  </Input>\r\n                                  {errors.regimenLine !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.regimenLine}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                          </div>\r\n                          <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                  <FormLabelName >Regimen </FormLabelName>\r\n                                  <Input\r\n                                    type=\"select\"\r\n                                    name=\"regimenDrug\"\r\n                                    id=\"regimenDrug\"\r\n                                    value={arvDrugObj.regimenDrug}\r\n                                    onChange={handleInputChangeRegimenLine}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={!enableUpdate}\r\n                                  >\r\n                                    <option value=\"select\">Select </option>\r\n\r\n                                    {regimenTypeObj.map((value) => (\r\n                                      <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Input>\r\n                                  {errors.regimenDrug !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.regimenDrug}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                          </div>\r\n                          <div className=\" mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                  <FormLabelName >Dosage </FormLabelName>\r\n                                  <Input\r\n                                    type=\"text\"\r\n                                    name=\"dosage\"\r\n                                    id=\"dosage\"\r\n                                    value={arvDrugObj.dosage}\r\n                                    onChange={handleInputChangeRegimenLine}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={!enableUpdate}\r\n                                  />\r\n                                  {errors.dosage !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dosage}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                          </div>\r\n                          <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                  <FormLabelName >Adherence </FormLabelName>\r\n                                  <Input\r\n                                    type=\"select\"\r\n                                    name=\"regimenAdherance\"\r\n                                    id=\"regimenAdherance\"\r\n                                    value={arvDrugObj.regimenAdherance}\r\n                                    onChange={handleInputChangeRegimenLine}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    disabled={!enableUpdate}\r\n                                  >\r\n                                    <option value=\"select\">Select </option>\r\n\r\n                                    {adherenceLevel.map((value) => (\r\n                                      <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                      </option>\r\n                                    ))}\r\n                                    <option value=\"None\">None </option>\r\n                                  </Input>\r\n                                  {errors.regimenAdherance !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.regimenAdherance}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                          </div>\r\n                          <div className=\"col-md-2 float-end\">\r\n                            <LabelSui as='a' color='black'  size='tiny' onClick={addArvDrugOrder} style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui>\r\n                            </div>\r\n                          <div className=\"row\">\r\n                            \r\n                          </div>\r\n                          {arvDrugOrderList.length >0 ?   \r\n                                <List>\r\n                                <Table  striped responsive>\r\n                                    <thead >\r\n                                        <tr>\r\n                                            <th>Regimen Line</th>\r\n                                            <th>Regimen</th>                                   \r\n                                            <th>Dosage</th>\r\n                                            <th>Adherence</th>                                        \r\n                                            <th ></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {arvDrugOrderList.map((regimenObject,index) => (\r\n\r\n                                      <ArvDrugOrderObjList\r\n                                      key={index}\r\n                                      index={index}\r\n                                      regimenObject={regimenObject}\r\n                                      adherenceLevel={adherenceLevel}\r\n                                      removeArvDrugOrder={removeArvDrugOrder}\r\n                                      />\r\n                                    ))}\r\n                                    </tbody>\r\n                                    </Table>\r\n                                    <br/>\r\n                                    <br/>\r\n                                </List>\r\n                                :\r\n                                \"\"\r\n                            } \r\n                        </div>\r\n                        {/* END ARV DRUGS Regimen */}\r\n                        <br />\r\n                        <Label as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}>Lab & Viral Load  Order</h4>\r\n                        </Label>\r\n                        <br /><br />\r\n                        {/* Viral Load  Form */}\r\n                        <div className=\"row\">\r\n                        {/* <div  className=\" col-md-4\">\r\n                            <FormGroup>\r\n                                  <FormLabelName for=\"testGroup\">Select Test Group</FormLabelName>\r\n\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"labTestGroupId\"\r\n                                        id=\"labTestGroupId\"\r\n                                        value={tests.labTestGroupId}\r\n                                        onChange={handleSelectedTestGroup} \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                  \r\n                                        >\r\n                                        <option value=\"\">Select </option>\r\n                                                        \r\n                                            {testGroup.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.groupName}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.labTestGroupId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.labTestGroupId}</span>\r\n                                        ) : \"\" }      \r\n                              </FormGroup>\r\n                          </div> */}\r\n                          <div  className=\"form-group mb-3 col-md-5\">\r\n                            <FormGroup>\r\n                                  <FormLabelName for=\"testGroup\">Select Test</FormLabelName>\r\n                            \r\n                                  <Select\r\n                                      //value={selectedOption}\r\n                                      onChange={handleInputChangeObject}\r\n                                      options={labTestOptions}\r\n                                      menuPortalTarget={document.body} \r\n                                      menuPosition={'fixed'} \r\n                                  />\r\n                                  {errors.labTestId !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.labTestId}</span>\r\n                                        ) : \"\" }\r\n                            </FormGroup>\r\n                          </div>\r\n                          {(tests.labTestId==='16' || tests.labTestId===16) && (\r\n                          <div  className=\"form-group mb-3 col-md-5\">\r\n                              <FormGroup>\r\n                                <FormLabelName for=\"vlIndication\">VL Indication</FormLabelName>\r\n                                <Input\r\n                                type=\"select\"\r\n                                name=\"viralLoadIndication\"\r\n                                id=\"viralLoadIndication\"\r\n                                value={tests.viralLoadIndication}\r\n                                onChange={handleInputChangeTest}  \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}  \r\n                                disabled={!enableUpdate}               \r\n                                >\r\n                                <option value=\"\">Select </option>\r\n                                                \r\n                                    {vLIndication.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </Input>\r\n                                {errors.viralLoadIndication !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.viralLoadIndication}</span>\r\n                                        ) : \"\" }\r\n                            </FormGroup>\r\n                          </div>\r\n                          )}\r\n                          <div className=\"form-group mb-3 col-md-2\">\r\n                            <LabelSui as='a' color='black'  size='tiny' onClick={addOrder} style={{ marginTop:35}}>\r\n                                <Icon name='plus' /> Add\r\n                            </LabelSui> \r\n                        </div>\r\n                        {testOrderList.length >0 ?   \r\n                            <List>\r\n                            <Table  striped responsive>\r\n                                <thead >\r\n                                    <tr>\r\n                                        <th>Test Group</th>\r\n                                        <th>Test</th>                                   \r\n                                        <th>VL Indication</th>                                       \r\n                                        <th ></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {testOrderList.map((tests,index) => (\r\n\r\n                                <TestOrdersList\r\n                                    key={index}\r\n                                    index={index}\r\n                                    order={tests}\r\n                                    testGroupObj={testGroup}\r\n                                    vLIndicationObj={vLIndication}\r\n                                    removeOrder={removeOrder}\r\n                                />\r\n                                ))}\r\n                                </tbody>\r\n                                </Table>\r\n                                <br/>\r\n                                <br/>\r\n                            </List>\r\n                            :\r\n                            \"\"\r\n                        } \r\n                        </div>\r\n                        <br/>\r\n                        {/* END Viral Load  Form */}\r\n                        \r\n                        <Label as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h4 style={{color:'#fff'}}>NEXT CLINICAL APPOINTMENT DATE</h4>\r\n                        </Label>\r\n                        <br /><br />\r\n                        {/* TB Screening Form */}\r\n                        <Input\r\n                                type=\"date\"\r\n                                name=\"nextAppointment\"\r\n                                id=\"nextAppointment\"\r\n                                className=\"col-md-6\"\r\n                                value={objValues.nextAppointment}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                min={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                disabled={!enableUpdate}\r\n                                \r\n                            />\r\n                        {errors.nextAppointment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.nextAppointment}</span>\r\n                            ) : \"\" }\r\n                        <br />\r\n                        <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        disabled={saving}\r\n                        startIcon={<SaveIcon />}\r\n                        style={{backgroundColor:\"#014d88\"}}\r\n                        onClick={handleSubmit}\r\n                        hidden={!enableUpdate}\r\n                        >\r\n                        {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                        ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                        )}\r\n                        </MatButton>\r\n                    </Segment>\r\n                    </Grid.Column>\r\n\r\n                </Grid>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>    \r\n      \r\n    </div>\r\n  );\r\n};\r\nfunction TestOrdersList({\r\n  order,\r\n  index,\r\n  removeOrder,\r\n  testGroupObj,\r\n  vLIndicationObj,\r\n}) {\r\n\r\n  const testGroupID= order && order.labTestGroupId ? order.labTestGroupId : \"\"\r\n  const testTestID= order && order.labTestId ? order.labTestId : \"\"\r\n  const testGroupName= testGroupObj.find((x)=> x.id===parseInt(testGroupID))\r\n  const testName= testGroupName && testGroupName.labTests.find((x)=> x.id===parseInt(testTestID))\r\n  const vLIndication=vLIndicationObj.length>0 ?\r\n  vLIndicationObj.find((x)=> x.id===parseInt(order.viralLoadIndication)) : {}\r\n  \r\n  return (\r\n          <tr>\r\n              <th>{testGroupName && testGroupName.groupName=='Others' && testName.labTestName==='Viral Load'?testName.labTestName: testGroupName.groupName}</th> \r\n              <th>{testGroupName && testGroupName.groupName==='Others' && testName.labTestName==='Viral Load'? vLIndication.display : testName.labTestName}</th>          \r\n              <th>{vLIndication && vLIndication.display ? vLIndication.display : \"\"}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeOrder(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\nfunction ArvDrugOrderObjList({\r\n  index,\r\n  removeArvDrugOrder,\r\n  regimenObject,\r\n  adherenceLevel,\r\n}) {\r\n\r\n  const adherence = adherenceLevel.find((x)=> x.id===parseInt(regimenObject.regimenAdherance))\r\n\r\n  return (\r\n          <tr>\r\n              <th>{regimenObject.regimenLineName }</th>\r\n              <th>{regimenObject.regimenDrugName }</th>             \r\n              <th>{regimenObject.dosage}</th>\r\n              <th>{adherence && adherence.display}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeArvDrugOrder(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\n\r\nexport default ClinicVisit;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\PastArv.js",["1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    //console.log(props.observation)\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    useEffect(() => { \r\n        if(props.observation.data ){\r\n            setPastArvMedicalMedical(props.observation.data.pastArvMedical)           \r\n        }\r\n    }, [props.observation.data]);   \r\n    const [hideOtherPastArv, setHideOtherPastArv]=useState(false)\r\n    const [pastArvMedical, setPastArvMedicalMedical] = useState({\r\n                                                                none:\"\",\r\n                                                                vomit: \"\",\r\n                                                                diarrhea: \"\",\r\n                                                                headache: \"\",\r\n                                                                pain_in_abdomen: \"\",\r\n                                                                jaundice: \"\",\r\n                                                                insomnia: \"\",\r\n                                                                dizzy: \"\",\r\n                                                                tingling: \"\",\r\n                                                                rash: \"\",\r\n                                                                pancreatities: \"\",\r\n                                                                steven_johnson_syndrome: \"\",\r\n                                                                itching: \"\",\r\n                                                                anemia: \"\",\r\n                                                                weekness: \"\",\r\n                                                                loss: \"\",\r\n                                                                hyperglycemia: \"\",\r\n                                                                kidney_problem: \"\",\r\n                                                                liver_problem: \"\",\r\n                                                                others: \"\",\r\n                                                                if_yes_past_current_arv: \"\"\r\n                                                            });\r\n    const handlePastArv =e =>{\r\n        if(e.target.name==='none'){\r\n            if(e.target.checked){\r\n                setHideOtherPastArv(true)\r\n                }else{\r\n                    setHideOtherPastArv(false)\r\n                }\r\n        }\r\n        setPastArvMedicalMedical({...pastArvMedical, [e.target.name]: e.target.value})\r\n    }\r\n   \r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n     /**** Submit Button Processing  */\r\n     const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.pastArvMedical=pastArvMedical   \r\n        //toast.success(\"Medical history save successful\");\r\n        handleItemClick('physical-examination', 'past-arv' )                  \r\n    }\r\n        \r\n    return (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Past or current ARV or other medication's side effect</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"none\"\r\n                            id=\"none\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            None\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherPastArv && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"vomit\"\r\n                            id=\"vomit\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Signif.nausea/<br/>vomit\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"diarrhea\"\r\n                            id=\"diarrhea\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Diarrhea\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"headache\"\r\n                            id=\"headache\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Headache\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pain_in_abdomen\"\r\n                            id=\"pain_in_abdomen\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Pain in <br/>abdomen/<br/> muscle\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"jaundice\"\r\n                            id=\"jaundice\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Jaundice\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"insomnia\"\r\n                            id=\"insomnia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Insomnia/<br/>bad dreams\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"dizzy\"\r\n                            id=\"dizzy\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Confussion/<br/>Dizzy\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"tingling\"\r\n                            id=\"tingling\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Tingling of <br/>extremities\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"rash\"\r\n                            id=\"rash\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Rash\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pancreatities\"\r\n                            id=\"pancreatities\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Pancreatities\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"steven_johnson_syndrome\"\r\n                            id=\"steven_johnson_syndrome\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Steven <br/>Johnson<br/> Syndrome\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"itching\"\r\n                            id=\"itching\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Itching\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"anemia\"\r\n                            id=\"anemia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Anemia\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"weekness\"\r\n                            id=\"weekness\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Weekness/<br/>Fatigue\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"loss\"\r\n                            id=\"loss\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Fat <br/>accumulation/<br/> loss\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"hyperglycemia\"\r\n                            id=\"hyperglycemia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Hyperglycemia\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"kidney_problem\"\r\n                            id=\"kidney_problem\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Kidney <br/>Problem\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"liver_problem\"\r\n                            id=\"liver_problem\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Liver Problem\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Others(Specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"others\"\r\n                                    id=\"others\"\r\n                                    onChange={handlePastArv} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                            <FormGroup>\r\n                            <Label >If yes to past or current ARV or other medication's side effect, specify medication(s) </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"if_yes_past_current_arv\"\r\n                                    id=\"if_yes_past_current_arv\"\r\n                                    onChange={handlePastArv}\r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('medical-history', 'medical-history')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\MedicalHistory.js",["1340","1341","1342","1343","1344","1345","1346"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        },\r\n        \r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst MedicalHistory = (props) => {\r\n    const classes = useStyles();\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [errors, setErrors] = useState({});\r\n    const [allergies, setAllergies]= useState([])\r\n    useEffect(() => {\r\n        PrepSideEffect();\r\n      }, []);\r\n        //Get list of PrepSideEffect\r\n        const PrepSideEffect =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setAllergies(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n    useEffect(() => { \r\n        GetPatientDTOObj();\r\n        if(props.observation.data && props.observation.data.medicalHistory){\r\n            setobjValues(props.observation.data.medicalHistory)           \r\n        }\r\n    }, [props.observation.data, props.patientObj]);\r\n\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n               setEnrollDate(patientDTO.entryPointId===21 ? patientDTO.dateConfirmedHiv : patientDTO.dateOfRegistration)\r\n               //setEnrollDate (patientDTO.dateOfRegistration)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });          \r\n    }\r\n    const [visit, setVisit] = useState({visitDate:\"\"})\r\n    const [objValues, setobjValues] = useState({Nausea:\"\", \r\n                                                Nausea_fever:\"\",\r\n                                                as_never_receive_arvs:\"\",\r\n                                                chronic:\"\",\r\n                                                chronic_duration:\"\",\r\n                                                cough:\"\",\r\n                                                cough_duration:\"\",\r\n                                                drug_allergies:\"\",\r\n                                                duration_of_care_from:\"\",\r\n                                                early_arv_but_not_transfer_in:\"\",\r\n                                                fever:\"\",\r\n                                                fever_duration:\"\",\r\n                                                genital:\"\",\r\n                                                genital_duration :\"\",\r\n                                                genital_score:\"\",\r\n                                                genital_score_duration:\"\",\r\n                                                headache:\"\",\r\n                                                headache_duration:\"\",\r\n                                                hospitalization:\"\",\r\n                                                itching:\"\",\r\n                                                itching_duration:\"\",\r\n                                                name_of_the_facility:\"\",\r\n                                                new_visual:\"\",\r\n                                                new_visual_duration:\"\",\r\n                                                night_duration:\"\",\r\n                                                numbness:\"\",\r\n                                                numbness_duration:\"\",\r\n                                                pain:\"\",\r\n                                                pain_duration:\"\",\r\n                                                past_medical_history:\"\",\r\n                                                previous_arv_exposure:\"\",\r\n                                                rash:\"\",\r\n                                                rash_duration:\"\",\r\n                                                recent:\"\",\r\n                                                recent_duration:\"\",\r\n                                                relevant_family_history:\"\",\r\n                                                screen_for_tb:\"\",\r\n                                                shortness_of_breath:\"\",\r\n                                                shortness_of_breath_duration:\"\",\r\n                                                duration_of_care_to:\"\",\r\n                                                disclosureNoOne:\"\",  \r\n                                                familyMember:\"\", \r\n                                                friend:\"\", \r\n                                                spouse:\"\", \r\n                                                spiritualLeader:\"\", \r\n                                                disclosureOthers:\"\", \r\n                                                HivStatusCanBeDiscussed:\"\",\r\n                                                CurrentMedicationNone :\"\",\r\n                                                currentART :\"\",\r\n                                                currentCTX:\"\", \r\n                                                currentAntiTbDdrugs :\"\",\r\n                                                currentOthers:\"\",\r\n                                                childMotherAlive:\"\", \r\n                                                motherName:\"\", \r\n                                                motherAddress:\"\", \r\n                                                childFatherAlive:\"\", \r\n                                                immunisationComplete:\"\",\r\n                                                fatherName:\"\", \r\n                                                fatherAddress:\"\", \r\n                                                parentChildMarriageStatus:\"\",  \r\n                                                howManySibiling:\"\", \r\n                                                immunisationComplete:\"\",\r\n                                                modeOfInfantFeeding:\"\"\r\n                                                });\r\n    let temp = { ...errors }\r\n    const [hideOtherPatientDisclosure, setHideOtherPatientDisclosure]=useState(false)\r\n    const [hideOtherCurrentMedication, setHideOtherCurrentMedication]=useState(false)\r\n    //Handle CheckBox \r\n    const handleMedicalHistory =e =>{\r\n        setErrors({...errors, [e.target.name]: \"\"}) \r\n        if(e.target.name==='disclosureNoOne'){\r\n            if(e.target.checked){\r\n            setHideOtherPatientDisclosure(true)\r\n                }else{\r\n                    setHideOtherPatientDisclosure(false)\r\n                }\r\n        }\r\n        if(e.target.name==='CurrentMedicationNone'){\r\n            if(e.target.checked){\r\n                setHideOtherCurrentMedication(true)\r\n\r\n                }else{\r\n                    setHideOtherCurrentMedication(false)\r\n                }\r\n        }  \r\n        if(e.target.name==='previous_arv_exposure' && e.target.value==='No'){\r\n            objValues.name_of_the_facility=\"\"\r\n            objValues.duration_of_care_from=\"\"\r\n            objValues.duration_of_care_to=\"\"  \r\n            setobjValues({...objValues, [e.target.name]: e.target.value})\r\n        }      \r\n        setobjValues({...objValues, [e.target.name]: e.target.value})\r\n    }\r\n    const handleInputChangeobjValues = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})           \r\n        setVisit ({...visit,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    } \r\n    //Validations of the forms\r\n  const validate = () => {        \r\n    temp.screen_for_tb = objValues.screen_for_tb ? \"\" : \"This field is required\"\r\n    //temp.past_medical_history = objValues.past_medical_history ? \"\" : \"This field is required\"\r\n    //temp.relevant_family_history = objValues.relevant_family_history ? \"\" : \"This field is required\"\r\n    temp.drug_allergies = objValues.drug_allergies ? \"\" : \"This field is required\"\r\n    temp.visitDate = visit.visitDate ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  } \r\n     /**** Submit Button Processing  */\r\n     const handleSubmit = (e) => { \r\n        e.preventDefault(); \r\n        if(validate()){\r\n            props.observation.dateOfObservation= visit.visitDate \r\n            props.observation.data.medicalHistory=objValues   \r\n            //toast.success(\"Medical history save successful\");\r\n            handleItemClick('past-arv', 'medical-history' ) \r\n        }else{\r\n            toast.error(\"All fields are required\");\r\n        }                 \r\n    }\r\n\r\n\r\n    return (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Medical History</h2>\r\n                <br/>\r\n                    <form >\r\n     \r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Visit Date <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    name=\"visitDate\"\r\n                                    id=\"visitDate\"\r\n                                    value={props.observation.dateOfObservation !==\"\" && props.observation.dateOfObservation!==null ? props.observation.dateOfObservation : visit.visitDate}\r\n                                    onChange={handleInputChangeobjValues} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                            {errors.visitDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.visitDate}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \r\n                    </div>\r\n                    {props.patientAge<=14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Is mother of the child alive ?</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"childMotherAlive\"\r\n                                    id=\"childMotherAlive\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.childMotherAlive} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input>\r\n                               \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    {objValues.childMotherAlive==='Yes' && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Mother Name</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"motherName\"\r\n                                    id=\"motherName\"\r\n                                    value={objValues.motherName}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                           \r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Mother Address</Label>\r\n                        <Input \r\n                                type=\"text\"\r\n                                name=\"motherAddress\"\r\n                                id=\"motherAddress\"\r\n                                value={objValues.motherAddress}\r\n                                onChange={handleMedicalHistory} \r\n                            />\r\n                        </FormGroup>\r\n                        \r\n                        </div>\r\n                    </>       \r\n                     )}\r\n                     <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Is father of the child alive ?</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"childFatherAlive\"\r\n                                    id=\"childFatherAlive\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.childFatherAlive} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    {objValues.childFatherAlive==='Yes' && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Father Name</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"fatherName\"\r\n                                    id=\"fatherName\"\r\n                                    value={objValues.fatherName}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                           \r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Father Address</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"fatherAddress\"\r\n                                    id=\"fatherAddress\"\r\n                                    value={objValues.fatherAddress}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                        </>\r\n                     )}\r\n\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Child's parents/caregivers are</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"parentChildMarriageStatus\"\r\n                                    id=\"parentChildMarriageStatus\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.parentChildMarriageStatus} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Married\">Married</option>\r\n                                <option value=\"Co-habiting\">Co-habiting</option>\r\n                                <option value=\"Signle\">Signle</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >How many sibiling does the child have ?</Label>\r\n                            <Input \r\n                                    type=\"number\"\r\n                                    name=\"howManySibiling\"\r\n                                    id=\"howManySibiling\"\r\n                                    value={objValues.howManySibiling}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Immunisation: Complete for Age</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"immunisationComplete\"\r\n                                    id=\"immunisationComplete\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.immunisationComplete} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Mode of infant({\"<=6\"} months) feeding </Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"modeOfInfantFeeding\"\r\n                                    id=\"modeOfInfantFeeding\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.modeOfInfantFeeding} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"EBF\">EBF</option>\r\n                                <option value=\"EBMS\">EBMS</option>\r\n                                <option value=\"Mixed\">Mixed</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    </div>\r\n                    )}\r\n                    <h4>Medical History</h4>\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Fever/Chills\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"fever\"\r\n                                id=\"fever\"\r\n                                value={objValues.fever} \r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"fever_duration\"\r\n                                    id=\"fever_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.fever_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Nausea /<br/>Vomitiing\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"Nausea\"\r\n                                id=\"Nausea\"\r\n                                value={objValues.Nausea} \r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"Nausea_fever\"\r\n                                    id=\"Nausea_fever\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.Nausea_fever} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Night Sweats\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"night_sweats\"\r\n                                id=\"night_sweats\"\r\n                                value={objValues.night_sweats}\r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"night_duration\"\r\n                                    id=\"night_duration\"\r\n                                    value={objValues.night_duration}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Recent Weight Loss\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"recent\"\r\n                                id=\"recent\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.recent}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div><br/>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"recent_duration\"\r\n                                    id=\"recent_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.recent_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Cough\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"cough\"\r\n                                id=\"cough\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.cough}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cough_duration\"\r\n                                    id=\"cough_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.cough_duration}\r\n                                   \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Headache\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"headache\"\r\n                                id=\"headache\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.headache}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"headache_duration\"\r\n                                    id=\"headache_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.headache_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    <br/><br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                New Visual imparity\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"new_visual\"\r\n                                id=\"new_visual\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.new_visual}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"new_visual_duration\"\r\n                                    id=\"new_visual_duration\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.new_visual_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Pain & Difficulty when swallowing \r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"pain\"\r\n                                id=\"pain\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.pain}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"pain_duration\"\r\n                                    id=\"pain_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.pain_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Rash\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"rash\"\r\n                                id=\"rash\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.rash} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"rash_duration\"\r\n                                    id=\"rash_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.rash_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    <br/><br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Itching\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"itching\"\r\n                                id=\"itching\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.itching}  \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"itching_duration\"\r\n                                    id=\"itching_duration\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.itching_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Chronic Diarrhea\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"chronic\"\r\n                                id=\"chronic\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.chronic}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"chronic_duration\"\r\n                                    id=\"chronic_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.chronic_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital itching\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"genital\"\r\n                                id=\"genital\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.genital} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"genital_duration\"\r\n                                    id=\"genital_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.genital_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    <br/><br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital Sores\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"genital_score\"\r\n                                id=\"genital_score\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.genital_score} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"genital_score_duration\"\r\n                                    id=\"genital_score_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.genital_score_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Shortness of breath\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"shortness_of_breath\"\r\n                                id=\"shortness_of_breath\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.shortness_of_breath}  \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"shortness_of_breath_duration\"\r\n                                    id=\"shortness_of_breath_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.shortness_of_breath_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Numbness/<br/>tingling\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"numbness\"\r\n                                id=\"numbness\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.numbness} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-5 col-md-2\">\r\n                            <FormGroup>\r\n                          \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"numbness_duration\"\r\n                                    id=\"numbness_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.numbness_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    {/* end of medical form inputs */}\r\n                    <br/>\r\n                     {/* TB Screening section */}\r\n                     <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Patient Screen for TB <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"screen_for_tb\"\r\n                                    id=\"screen_for_tb\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.screen_for_tb} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input>\r\n                               \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                            {errors.screen_for_tb !==\"\" ? (\r\n                                <span className={classes.error}>{errors.screen_for_tb}</span>\r\n                            ) : \"\" }\r\n                     </div>\r\n                     </div>\r\n                    {/* end of TB Screening section */}\r\n                    <div className=\"row\">\r\n                    {/* Past medical history */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Past Medical History </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"past_medical_history\"\r\n                                    id=\"past_medical_history\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.past_medical_history}   \r\n                                />\r\n                                \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                            {errors.past_medical_history !==\"\" ? (\r\n                                <span className={classes.error}>{errors.past_medical_history}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    {/* end of Past medical history  */}\r\n                    {/* Past Family medical history */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Relevant Family History </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"relevant_family_history\"\r\n                                    id=\"relevant_family_history\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.relevant_family_history}    \r\n                                />\r\n                                \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                            {errors.relevant_family_history !==\"\" ? (\r\n                                <span className={classes.error}>{errors.relevant_family_history}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    {/* end of FamilyPast medical history  */}\r\n                    {/* hospitalization */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Hospitalization</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"hospitalization\"\r\n                                    id=\"hospitalization\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.hospitalization}   \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    {/* end of hosiptalization */}\r\n                    {/* Drug Allergies */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Drug Allergies <span style={{ color:\"red\"}}> *</span></Label>\r\n                            \r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"drug_allergies\"\r\n                                id=\"drug_allergies\"\r\n                                value={objValues.drug_allergies}\r\n                                onChange={handleMedicalHistory}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                    {allergies.map((value) => (\r\n                                        <option key={value.id} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>    \r\n                            </FormGroup>\r\n                            {errors.drug_allergies !==\"\" ? (\r\n                                <span className={classes.error}>{errors.drug_allergies}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    </div>\r\n                    {/* end of Drug Allergies  */}\r\n                    <div className=\"row\">\r\n                    {(props.patientObj.sex==='Female' || props.patientObj.sex==='FEMALE' || props.patientObj.sex==='female') && (<>\r\n                    {props.patientAge>14 && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Currently Pregnant</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"current_pregnant\"\r\n                                        id=\"current_pregnant\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.current_pregnant} \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                    <option value=\"Uncertain\">Uncertain</option>\r\n                                    </Input>\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.current_pregnant==='Yes' && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Last menstrual period</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"date\"\r\n                                        name=\"last_menstrual_period\"\r\n                                        id=\"last_menstrual_period\"\r\n                                        onChange={handleMedicalHistory}\r\n                                        value={objValues.last_menstrual_period}   \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Gestational Age (weeks)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"gestational_age\"\r\n                                        id=\"gestational_age\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.gestational_age}  \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                        {objValues.current_pregnant!=='Yes' && objValues.current_pregnant!=='' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Current BreastFeeding</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"current_breastfeeding\"\r\n                                        id=\"current_breastfeeding\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.current_breastfeeding}  \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                    <option value=\"Uncertain\">Uncertain</option>\r\n                                    </Input>\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        )}\r\n                    </>)}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Previous ARV exposure</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"previous_arv_exposure\"\r\n                                    id=\"previous_arv_exposure\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.previous_arv_exposure}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                <option value=\"Uncertain\">Uncertain</option>\r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\"></div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"early_arv_but_not_transfer_in\"\r\n                            id=\"early_arv_but_not_transfer_in\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.early_arv_but_not_transfer_in}  \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Early ARV but not transfer in\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    {props.patientObj.sex==='Female' && (\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pmtct_only\"\r\n                            id=\"pmtct_only\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.pmtct_only} \r\n                            />\r\n                           <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            PMTCT only\r\n                        </label> \r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                     <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"as_never_receive_arvs\"\r\n                            id=\"as_never_receive_arvs\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.as_never_receive_arvs} \r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Has never received ARVs\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    {objValues.previous_arv_exposure==='Yes' &&  objValues.previous_arv_exposure!=='' && (\r\n                    <> \r\n                         <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Name of the Facility</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"name_of_the_facility\"\r\n                                        id=\"name_of_the_facility\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.name_of_the_facility}\r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Duration of care from</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"Date\"\r\n                                        name=\"duration_of_care_from\"\r\n                                        id=\"duration_of_care_from\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.duration_of_care_from}\r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >To</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"date\"\r\n                                        name=\"duration_of_care_to\"\r\n                                        id=\"duration_of_care_to\"\r\n                                        onChange={handleMedicalHistory}\r\n                                        value={objValues.duration_of_care_to} \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                    <h3>Current Medications(Caregiver should be prob ) if yes </h3>\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"CurrentMedicationNone\"\r\n                            id=\"CurrentMedicationNone\"\r\n                            value={objValues.CurrentMedicationNone} \r\n                            onChange={handleMedicalHistory} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            None\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherCurrentMedication && ( \r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentART\"\r\n                            id=\"currentART\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentART} \r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            ART\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentCTX\"\r\n                            id=\"currentCTX\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentCTX} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            CTX\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentAntiTbDdrugs\"\r\n                            id=\"currentAntiTbDdrugs\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentAntiTbDdrugs} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Anti-TB drugs\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Others</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"currentOthers\"\r\n                                    id=\"currentOthers\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.currentOthers}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                   <h3>Patient has disclosed status to:</h3>\r\n                   <hr/>\r\n                   <div className=\"row\">\r\n                   <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"disclosureNoOne\"\r\n                            id=\"disclosureNoOne\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.disclosureNoOne}\r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            No one\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherPatientDisclosure && ( \r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"familyMember\"\r\n                            id=\"familyMember\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.familyMember}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Family member\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"friend\"\r\n                            id=\"friend\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.friend}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Friend\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"spouse\"\r\n                            id=\"spouse\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.spouse}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Spouse\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"spiritualLeader\"\r\n                            id=\"spiritualLeader\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.spiritualLeader}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Spiritual leader\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label >Others</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"disclosureOthers\"\r\n                                    id=\"disclosureOthers\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.disclosureOthers} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div> \r\n                    <hr/>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >HIV Status can be discussed with (Record reported person, if any):</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"HivStatusCanBeDiscussed\"\r\n                                    id=\"HivStatusCanBeDiscussed\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.HivStatusCanBeDiscussed}\r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\"></div>\r\n                    <br/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default MedicalHistory","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Appearance.js",["1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        },\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    const [saving, setSaving] = useState(false);\r\n    let temp = { ...errors }   \r\n    const [hideGeneralApperance, setHideGeneralApperance]=useState(false)\r\n    const [hideSkin, setHideSkin] = useState(false)\r\n    const [hideEye, setHideEye] = useState(false)\r\n    const [hideBreast, setHideBreast] = useState(false)\r\n    const [hideCardiovascular, setHideCardiovascular] = useState(false)\r\n    const [hideGenitalia, setHideGenitalia] = useState(false);\r\n    const [hideRespiratory, setHideRespiratory] = useState(false);\r\n    const [hideGastrointestinal, setHideGastrointestinal] = useState(false);\r\n    const [hideNeurological, setHideNeurological] = useState(false);\r\n    const [handlementalstatus, setHideMentalStatus] = useState(false);\r\n    const [generalApperance, setGeneralApperance] = useState({\r\n        nsf: \"\",\r\n        pallor: \"\",\r\n        febrile: \"\",\r\n        dehydrated: \"\",\r\n        peripheral: \"\",\r\n        other: \"\"\r\n    });\r\n    const [skin, setSkin] = useState({\r\n        nsf: \"\",\r\n        pruritic: \"\",\r\n        abscesses: \"\",\r\n        herpes: \"\",\r\n        kaposi: \"\",\r\n        suborrheic: \"\",\r\n        fungal: \"\",\r\n        other: \"\"\r\n    });\r\n    const [eye, setEye] = useState({\r\n        nsf: \"\",\r\n        icterus: \"\",\r\n        thrush: \"\",\r\n        oral: \"\",\r\n        abnormal: \"\",\r\n        other: \"\"\r\n    });\r\n    const [breast, setBreast] = useState({\r\n        nsf: \"\",\r\n        lumps: \"\",\r\n        discharge: \"\",\r\n        other: \"\"\r\n    });\r\n    const [cardiovascular, setCardiovascular] = useState({\r\n                                                            nsf:\"\",  \r\n                                                            abnormal_heart_rate:\"\",\r\n                                                            other:\"\",\r\n                                                         });\r\n    const [genitalia, setGenitalia] = useState({ nsf:\"\", \r\n                                                genital_discharge:\"\", \r\n                                                genital_ulcer :\"\", \r\n                                                inguinal:\"\",   \r\n                                                other :\"\",\r\n                                            });\r\n    const [respiratory, setRespiratory] = useState({nsf:\"\",\r\n                                                    rate:\"\",\r\n                                                    labored:\"\",\r\n                                                    cyanosis:\"\",\r\n                                                    wheezing :\"\",\r\n                                                    intercostal :\"\",\r\n                                                    auscultation_finding :\"\",\r\n                                                    other:\"\",\r\n        \r\n                                                    });\r\n    const [gastrointestinal, setGastrointestinal] = useState({nsf :\"\", \r\n                                                                spenomegaly:\"\", \r\n                                                                distention:\"\",\r\n                                                                hepatomegaly:\"\", \r\n                                                                tenderness:\"\", \r\n                                                                other:\"\",\r\n                                                            });\r\n    const [neurological, setNeurological] = useState({  nsf:\"\",\r\n                                                        numbness :\"\",\r\n                                                        paresis:\"\", \r\n                                                        blindness:\"\", \r\n                                                        neckStiffness:\"\", \r\n                                                        speechSlurs:\"\",  \r\n                                                        orientation:\"\",\r\n                                                        other:\"\" \r\n                                                       \r\n                                                    });\r\n    const [mentalStatus, setMentalStatus] = useState({nsf:\"\",\r\n                                                        mentation:\"\", \r\n                                                        memoryloss:\"\", \r\n                                                        moodSwings:\"\",  \r\n                                                        depression:\"\", \r\n                                                        anxiety:\"\", \r\n                                                        ideation:\"\", \r\n                                                        tenderness:\"\", \r\n                                                        other:\"\",\r\n                                                    });\r\n    const handleGeneralApperance =e =>{\r\n        if(e.target.name!=='other'){\r\n        if(e.target.checked){\r\n            if(e.target.name==='nsf'){\r\n                generalApperance.nsf=\"\"\r\n                generalApperance.pallor=\"\"\r\n                generalApperance.febrile=\"\"\r\n                generalApperance.dehydrated=\"\"\r\n                generalApperance.peripheral=\"\"\r\n                generalApperance.other=\"\"\r\n            }\r\n            setGeneralApperance({...generalApperance, [e.target.name]: e.target.checked})\r\n        }else{\r\n            setGeneralApperance({...generalApperance, [e.target.name]: false})\r\n        }\r\n        }else{\r\n            setGeneralApperance({...generalApperance, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleSkin =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    skin.nsf=\"\"\r\n                    skin.pruritic=\"\"\r\n                    skin.abscesses=\"\"\r\n                    skin.herpes=\"\"\r\n                    skin.kaposi=\"\"\r\n                    skin.suborrheic=\"\"\r\n                    skin.fungal=\"\"\r\n                    skin.other=\"\"\r\n                }\r\n                setSkin({...skin, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setSkin({...skin, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setSkin({...skin, [e.target.name]: e.target.value})\r\n            }\r\n    }\r\n    const handleEye =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    eye.nsf=\"\"\r\n                    eye.icterus=\"\"\r\n                    eye.thrush=\"\"\r\n                    eye.oral=\"\"\r\n                    eye.abnormal=\"\"\r\n                    eye.other=\"\"\r\n                }\r\n                setEye({...eye, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setEye({...eye, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setEye({...eye, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleBreast =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    breast.nsf=\"\"\r\n                    breast.lumps=\"\"\r\n                    breast.discharge=\"\"\r\n                    breast.other=\"\"\r\n                }\r\n                setBreast({...breast, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setBreast({...breast, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setBreast({...breast, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleCardiovascular =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    cardiovascular.nsf=\"\"\r\n                    cardiovascular.abnormal_heart_rate=\"\"\r\n                    cardiovascular.other=\"\"\r\n                }\r\n                setCardiovascular({...cardiovascular, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setCardiovascular({...cardiovascular, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setCardiovascular({...cardiovascular, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleGenitalia =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    genitalia.nsf=\"\"\r\n                    genitalia.genital_discharge=\"\"\r\n                    genitalia.genital_ulcer=\"\"\r\n                    genitalia.inguinal=\"\"\r\n                    genitalia.other=\"\"\r\n                }\r\n                setGenitalia({...genitalia, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setGenitalia({...genitalia, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setGenitalia({...genitalia, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleRespiratory =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    respiratory.nsf=\"\"\r\n                    respiratory.rate=\"\"\r\n                    respiratory.labored=\"\"\r\n                    respiratory.cyanosis=\"\"\r\n                    respiratory.wheezing=\"\"\r\n                    respiratory.intercostal=\"\"\r\n                    respiratory.auscultation_finding=\"\"\r\n                    respiratory.other=\"\"\r\n                }\r\n                setRespiratory({...respiratory, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setRespiratory({...respiratory, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setRespiratory({...respiratory, [e.target.name]: e.target.value})\r\n        }\r\n        \r\n    }\r\n    const handleGastrointestinal =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    gastrointestinal.nsf=\"\"\r\n                    gastrointestinal.spenomegaly=\"\"\r\n                    gastrointestinal.distention=\"\"\r\n                    gastrointestinal.hepatomegaly=\"\"\r\n                    gastrointestinal.tenderness=\"\"\r\n                    gastrointestinal.other=\"\"\r\n                }\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleNeurological =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    neurological.nsf=\"\"\r\n                    neurological.numbness=\"\"\r\n                    neurological.paresis=\"\"\r\n                    neurological.blindness=\"\"\r\n                    neurological.neckStiffness=\"\"\r\n                    neurological.speechSlurs=\"\"\r\n                    neurological.orientation=\"\"\r\n                    neurological.other=\"\"\r\n                }\r\n                setNeurological({...neurological, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setNeurological({...neurological, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setNeurological({...neurological, [e.target.name]: e.target.value})\r\n        }\r\n       \r\n    }\r\n    const handleMentalStatus =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    mentalStatus.nsf=\"\"\r\n                    mentalStatus.mentation=\"\"\r\n                    mentalStatus.memoryloss=\"\"\r\n                    mentalStatus.moodSwings=\"\"\r\n                    mentalStatus.depression=\"\"\r\n                    mentalStatus.anxiety=\"\"\r\n                    mentalStatus.ideation=\"\"\r\n                    mentalStatus.tenderness=\"\"\r\n                    mentalStatus.other=\"\"\r\n                }\r\n                setMentalStatus({...mentalStatus, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setMentalStatus({...mentalStatus, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setMentalStatus({...mentalStatus, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n/**** Submit Button Processing  */\r\nconst handleSubmit = (e) => { \r\n    e.preventDefault();  \r\n    props.observation.data.generalApperance=generalApperance\r\n    props.observation.data.skin=skin\r\n    props.observation.data.eye=eye\r\n    props.observation.data.breast=breast\r\n    props.observation.data.cardiovascular= cardiovascular\r\n    props.observation.data.genitalia=genitalia\r\n    props.observation.data.neurological=neurological\r\n    props.observation.data.mentalstatus=mentalStatus\r\n    props.observation.data.respiratory=respiratory\r\n    props.observation.data.gastrointestinal = gastrointestinal   \r\n    //toast.success(\"Medical history save successful\");\r\n    handleItemClick('who', 'appearance' )                  \r\n}\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Appearance</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <div className=\"row\"> \r\n                    <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h3 style={{color:'#fff'}} >General Appearance</h3>\r\n                    </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    value={generalApperance.nsf}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            {(generalApperance.nsf==='' || generalApperance.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"pallor\"\r\n                                    id=\"pallor\"\r\n                                    value={generalApperance.pallor}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Pallor\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"febrile\"\r\n                                    id=\"febrile\"\r\n                                    value={generalApperance.febrile}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Febrile\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"dehydrated\"\r\n                                    id=\"dehydrated\"\r\n                                    value={generalApperance.dehydrated}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Dehydrated\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"peripheral\"\r\n                                    id=\"peripheral\"\r\n                                    value={generalApperance.peripheral}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Peripheral edema\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={generalApperance.other}\r\n                                            onChange={handleGeneralApperance} \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                    </div>\r\n                    <div className=\"row\"> \r\n                        <LabelRibbon as='a' color='purple' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Skin</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={skin.nsf}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {(skin.nsf==='' || skin.nsf===false) && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"pruritic\"\r\n                                id=\"pruritic\"\r\n                                value={skin.pruritic}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Pruritic paplar dermatitis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"abscesses\"\r\n                                id=\"abscesses\"\r\n                                value={skin.abscesses}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Abscesses\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"herpes\"\r\n                                id=\"herpes\"\r\n                                value={skin.herpes}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Herpes zoster\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"kaposi\"\r\n                                id=\"kaposi\"\r\n                                value={skin.kaposi}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Kaposi's lesions\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"suborrheic\"\r\n                                id=\"suborrheic\"\r\n                                value={skin.suborrheic}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Suborrheic dermatitis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"fungal\"\r\n                                id=\"fungal\"\r\n                                value={skin.fungal}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Fungal infections\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={skin.other}\r\n                                        onChange={handleSkin}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                       \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='black' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Head/Eye/ENT</h3>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    value={eye.nsf}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {(eye.nsf==='' || eye.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"icterus\"\r\n                                    id=\"icterus\"\r\n                                    value={eye.icterus}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Icterus\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"thrush\"\r\n                                    id=\"thrush\"\r\n                                    value={eye.thrush}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Thrush\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"oral\"\r\n                                    id=\"oral\"\r\n                                    value={eye.oral}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Oral KS\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"abnormal\"\r\n                                    id=\"abnormal\"\r\n                                    value={eye.abnormal}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Abnormal fundoscopy\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={eye.other}\r\n                                            onChange={handleEye}\r\n                                            \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n\r\n                            </>\r\n                            )}\r\n                     \r\n                    </div>\r\n                    {props.patientAge>14 && props.patientObj.sex==='Female' &&(\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='orange' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Breasts</h3>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    value={breast.nsf}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                           \r\n                            {(breast.nsf==='' || breast.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"lumps\"\r\n                                    id=\"lumps\"\r\n                                    value={breast.lumps}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Lumps, masses\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"discharge\"\r\n                                    id=\"discharge\"\r\n                                    value={breast.discharge}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Discharge\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={breast.other}\r\n                                            onChange={handleBreast} \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                    </div>\r\n                    )}\r\n                    <div className=\"row\">   \r\n                        <LabelRibbon as='a' color='green' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Cardiovascular</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={cardiovascular.nsf}\r\n                                onChange={handleCardiovascular}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                        {(cardiovascular.nsf==='' || cardiovascular.nsf===false) && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"abnormal_heart_rate\"\r\n                                id=\"abnormal_heart_rate\"\r\n                                value={cardiovascular.abnormal_heart_rate}\r\n                                onChange={handleCardiovascular}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Abnormal heart rate\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={cardiovascular.other}\r\n                                        onChange={handleCardiovascular}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                        \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Genitalia</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={genitalia.nsf}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                        {(genitalia.nsf==='' || genitalia.nsf===false ) && (\r\n                        <>\r\n                    \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"genital_discharge\"\r\n                                id=\"genital_discharge\"\r\n                                value={genitalia.genital_discharge}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital discharge\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"genital_ulcer\"\r\n                                id=\"genital_ulcer\"\r\n                                value={genitalia.genital_ulcer}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital ulcer/other lesion\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"inguinal\"\r\n                                id=\"inguinal\"\r\n                                value={genitalia.inguinal}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Inguinal node enlargement\r\n                                </label>\r\n                            </div>\r\n                        </div>         \r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={genitalia.other}\r\n                                        onChange={handleGenitalia}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                   \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Respiratory</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={respiratory.nsf}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                        {(respiratory.nsf==='' || respiratory.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Rate (breaths/min)\r\n                                </label>\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"rate\"\r\n                                id=\"rate\"\r\n                                value={respiratory.rate}\r\n                                onChange={handleRespiratory}\r\n                                placeholder='breaths/min'\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"labored\"\r\n                                id=\"labored\"\r\n                                value={respiratory.labored}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Labored breathing\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"cyanosis\"\r\n                                id=\"cyanosis\"\r\n                                value={respiratory.cyanosis}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Cyanosis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"wheezing\"\r\n                                id=\"wheezing\"\r\n                                value={respiratory.wheezing}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Wheezing\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"intercostal\"\r\n                                id=\"intercostal\"\r\n                                value={respiratory.intercostal}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Intercostal (sub) recession\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"auscultation_finding\"\r\n                                id=\"auscultation_finding\"\r\n                                value={respiratory.auscultation_finding}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Auscultation findings\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={respiratory.other}\r\n                                        onChange={handleRespiratory}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                    \r\n                        </>\r\n                        )}\r\n                   \r\n                    </div>\r\n                    <div className=\"row\">                \r\n                        <LabelRibbon as='a' color='violet' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Gastrointestinal</h3>\r\n                        </LabelRibbon>                   \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={gastrointestinal.nsf}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(gastrointestinal.nsf==='' || gastrointestinal.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"distention\"\r\n                                id=\"distention\"\r\n                                value={gastrointestinal.distention}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Distention\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"hepatomegaly\"\r\n                                id=\"hepatomegaly\"\r\n                                value={gastrointestinal.hepatomegaly}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Hepatomegaly\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"spenomegaly\"\r\n                                id=\"spenomegaly\"\r\n                                value={gastrointestinal.spenomegaly}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Spenomegaly\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"tenderness\"\r\n                                id=\"tenderness\"\r\n                                value={gastrointestinal.tenderness}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Tenderness\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={gastrointestinal.other}\r\n                                        onChange={handleGastrointestinal}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"row\">                                   \r\n                        <LabelRibbon as='a' color='brown' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Neurological</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={neurological.nsf}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(neurological.nsf==='' || neurological.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"orientation\"\r\n                                id=\"orientation\"\r\n                                value={neurological.orientation}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Orientation to TPP\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"speechSlurs\"\r\n                                id=\"speechSlurs\"\r\n                                value={neurological.speechSlurs}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Speech slurs\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"neckStiffness\"\r\n                                id=\"neckStiffness\"\r\n                                value={neurological.neckStiffness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Neck stiffness\r\n                                </label>\r\n                            </div>\r\n                        </div> \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"blindness\"\r\n                                id=\"blindness\"\r\n                                value={neurological.blindness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Blindness 1/2 eyes\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"paresis\"\r\n                                id=\"paresis\"\r\n                                value={neurological.paresis}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Hemiplegia/paresis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"numbness\"\r\n                                id=\"numbness\"\r\n                                value={neurological.numbness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Numbness of extremities\r\n                                </label>\r\n                            </div>\r\n                        </div>  \r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={neurological.other}\r\n                                        onChange={handleNeurological}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"row\">                \r\n                        <LabelRibbon as='a' color='grey' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Mental Status</h3>\r\n                        </LabelRibbon>                   \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                value={mentalStatus.nsf}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(mentalStatus.nsf==='' || mentalStatus.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"mentation\"\r\n                                id=\"mentation\"\r\n                                value={mentalStatus.mentation}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Slow mentation\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"memoryloss\"\r\n                                id=\"memoryloss\"\r\n                                value={mentalStatus.memoryloss}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Memory loss\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"moodSwings\"\r\n                                id=\"moodSwings\"\r\n                                value={mentalStatus.moodSwings}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Mood swings\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"depression\"\r\n                                id=\"depression\"\r\n                                value={mentalStatus.depression}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Depression\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"anxiety\"\r\n                                id=\"anxiety\"\r\n                                value={mentalStatus.anxiety}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Anxiety\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"ideation\"\r\n                                id=\"ideation\"\r\n                                value={mentalStatus.ideation}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Suicidal ideation\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"tenderness\"\r\n                                id=\"tenderness\"\r\n                                value={mentalStatus.tenderness}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Tenderness\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={mentalStatus.other}\r\n                                        onChange={handleMentalStatus}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('physical-examination', 'physical-examination')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\PhysicalExamination.js",["1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button, Message} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }   \r\n    useEffect(() => { \r\n        if(props.observation.data ){\r\n            setVitalSignDto(props.observation.data.physicalExamination)           \r\n        }\r\n    }, [props.observation.data]); \r\n    const [vital, setVitalSignDto]= useState({\r\n        bodyWeight: \"\",\r\n        diastolic:\"\",\r\n        encounterDate: \"\",\r\n        facilityId: 1,\r\n        height: \"\",\r\n        personId: props.patientObj.id,\r\n        serviceTypeId: 1,\r\n        systolic:\"\",\r\n        pulse:\"\",\r\n        temperature:\"\",\r\n        respiratoryRate:\"\" ,\r\n        muac:\"\",\r\n        surfaceArea:\"\",\r\n        headCircumference:\"\"\r\n    })\r\n    //Vital signs clinical decision support \r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                bodyWeight: \"\",\r\n                                diastolic: \"\",\r\n                                height: \"\",\r\n                                systolic: \"\",\r\n                                pulse:\"\",\r\n                                temperature:\"\",\r\n                                respiratoryRate:\"\"\r\n                            })\r\n    const handleInputChangeVitalSignDto = e => {\r\n        setErrors({...errors, [e.target.name]: \"\"}) \r\n        setVitalSignDto({ ...vital, [e.target.name]: e.target.value }); \r\n        // if(e.target.name==='muac'){\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value});\r\n        // } else{\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        // }\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight =(e)=>{\r\n        if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight =(e)=>{\r\n        if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n        const message =\"Body weight must not be greater than 150 and less than 3\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckSystolic =(e)=>{\r\n        if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n        const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckDiastolic =(e)=>{\r\n        if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n        const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckPulse =(e)=>{\r\n        if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n        const message =\"Pulse must not be greater than 120 and less than 40\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckRespiratoryRate =(e)=>{\r\n        if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n        const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckTemperature =(e)=>{\r\n        if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n        const message =\"Temperature must not be greater than 47 and less than 35\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n        }\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n    const validate = () => {        \r\n        temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n        temp.height = vital.height ? \"\" : \"This field is required\" \r\n        //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n        //temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"   \r\n       \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n        }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.physicalExamination=vital   \r\n        //toast.success(\"Medical history save successful\");\r\n        if(validate()){\r\n            handleItemClick('appearance', 'physical-examination' ) \r\n        }                 \r\n    }\r\n    function BmiCal (bmi){\r\n        if(bmi<18.5){\r\n          return (\r\n            <Message        \r\n             size='mini'\r\n             color='brown'\r\n              content='Underweight'\r\n            />\r\n          )      \r\n        }else if(bmi >=18.5 && bmi<=24.9){\r\n          <Message        \r\n             size='mini'\r\n             color='olive'\r\n              content='Well nourished'\r\n            />\r\n        }\r\n        else if( bmi>25){\r\n          <Message        \r\n             size='mini'\r\n             color='blue'\r\n              content='Overweight/Obese'\r\n            />\r\n        }\r\n        \r\n    }\r\n    \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Physical Examination</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                  \r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Pulse </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Respiratory Rate </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Temperature </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Body Weight <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-5\">\r\n                        <FormGroup>\r\n                        <Label >Height <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                                \r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                                <InputGroupText\r\n\r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-3\">\r\n                        {vital.bodyWeight && vital.height &&(\r\n                            <FormGroup>\r\n                            <Label > {\" \"}</Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                BMI : {(vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    {vital.bodyWeight && vital.height!==null && (\r\n                        \r\n                      <div className=\"form-group mb-3 mt-2 col-md-12\">\r\n                            {\r\n                              BmiCal((vital.bodyWeight/(((vital.height/100) * (vital.height/100)))).toFixed(2))\r\n                            }\r\n                      </div>\r\n                     )}\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                        <FormGroup>\r\n                        <Label >Blood Pressure </Label>\r\n                        <InputGroup>\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                systolic(mmHg)\r\n                        </InputGroupText> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"systolic\"\r\n                                id=\"systolic\"\r\n                                min=\"90\"\r\n                                max=\"2240\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.systolic}\r\n                                onKeyUp={handleInputValueCheckSystolic}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            diastolic(mmHg)\r\n                            </InputGroupText>\r\n                                <Input \r\n                                type=\"number\"\r\n                                name=\"diastolic\"\r\n                                id=\"diastolic\"\r\n                                min={0}\r\n                                max={140}\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.diastolic}\r\n                                onKeyUp={handleInputValueCheckDiastolic} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                />\r\n                            \r\n                            \r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.systolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.systolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.systolic}</span>\r\n                        ) : \"\" }  \r\n                        {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.diastolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.diastolic}</span>\r\n                        ) : \"\" }          \r\n                        </FormGroup>\r\n                    </div>\r\n                    </div>\r\n                    {props.patientAge<14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Head circumference</Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Surface Area </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >MUAC </Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        value={vital.muac} \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n                                    <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                        cm\r\n                                    </InputGroupText>\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('past-arv', 'past-arv')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\Plan.js",["1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    useEffect(() => { \r\n        if(props.observation.data ){\r\n            setPlan(props.observation.data.plan) \r\n            setPlanArt(props.observation.data.planArt)            \r\n            setEnrollIn(props.observation.data.enroll)  \r\n        }\r\n    }, [props.observation.data]);\r\n    const [planArt, setPlanArt] = useState({previousArvExposure:\"\", reasonForChange:\"\", reasonForChangeOther:\"\"});\r\n    const [enroll, setEnrollIn] = useState({enrollIn:\"\"});\r\n    const [plan, setPlan] = useState({  lab_evaluation:\"\", \r\n                                        cd4Count:\"\",\r\n                                        cd4Type:\"\",\r\n                                        cd4SemiQuantitative :\"\",\r\n                                        cxr:\"\", \r\n                                        lf_lam:\"\", \r\n                                        oi_prophylaxis:\"\", \r\n                                        adherence:\"\", \r\n                                        cervical:\"\", \r\n                                        cryptococcal:\"\",\r\n                                        cd4FlowCytometry :\"\",\r\n                                        previous_arv_exposure:\"\", \r\n                                        tb_investigation:\"\", \r\n                                        expert:\"\", \r\n                                        oi_therapy:\"\", \r\n                                        admission:\"\",\r\n                                        symptomatic :\"\",\r\n                                        other_referrals:\"\",\r\n    });   \r\n    const handlePlanArt =e =>{\r\n        setPlanArt({...planArt, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handlePlan =e =>{\r\n        setPlan({...plan, [e.target.name]: e.target.value})\r\n        setPlan({...plan, [e.target.name]: e.target.value})\r\n        //console.log(plan)\r\n    }\r\n\r\n    const handleEnroll =e =>{\r\n        setEnrollIn({...enroll, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();\r\n\r\n        // if(plan.cd4FlowCytometry!==\"\" && plan.cd4Count==='Flow Cyteometry'){//cleaning input field value against the correct selection\r\n        //     plan.cd4SemiQuantitative=\"\"\r\n        // }else if(plan.cd4SemiQuantitative!==\"\" && plan.cd4Count==='Semi-Quantitative'){\r\n        //     plan.cd4FlowCytometry=\"\"\r\n        // }  \r\n        props.observation.data.planArt = planArt\r\n        props.observation.data.plan = plan\r\n        props.observation.data.enroll=enroll \r\n        //toast.success(\"Record save successful\");\r\n        handleItemClick('regimen', 'plan' )                  \r\n    }\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Plan & Enroll In  </h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n\r\n                    <h3>Plan for ART</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                            <Label>Antiretroviral Therapy (ART)</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"previousArvExposure\"\r\n                                    id=\"previousArvExposure\"\r\n                                    value={planArt.previousArvExposure}\r\n                                    onChange={handlePlanArt}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Restart treatment\">Restart treatment</option>\r\n                                <option value=\"Start new treatment\">Start new treatment</option>\r\n                                <option value=\"Stop treatment\">Stop treatment </option>\r\n                                <option value=\"Change treatment\">Change treatment </option>\r\n                                <option value=\"Ongoing Monitoring ARV TX postponed for clinical reason\">Ongoing Monitoring ARV TX postponed for clinical reason</option>\r\n                                </Input>\r\n                        </FormGroup>\r\n                    </div>\r\n                    {props.patientAge<=14 && (\r\n                    <>\r\n                        {planArt.previousArvExposure==='Stop treatment' || planArt.previousArvExposure ==='Change treatment' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">                                    \r\n                            <FormGroup>\r\n                                <Label>Code for reason for change/stop ART</Label>\r\n                                <Input \r\n                                        type=\"select\"\r\n                                        name=\"reasonForChange\"\r\n                                        id=\"reasonForChange\"\r\n                                        value={planArt.reasonForChange}\r\n                                        onChange={handlePlanArt}  \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Can't adhere to schedule\"> Can't adhere to schedule</option>\r\n                                    <option value=\"Patient refusal/preference\">Patient refusal/preference</option>\r\n                                    <option value=\"Doctor's Instruction\">Doctor's Instruction </option>\r\n                                    <option value=\"Ran out of medicine\">Ran out of medicine</option>\r\n                                    <option value=\"Drugs not available\">Drugs not available</option>\r\n                                    <option value=\"Toxicity\">Toxicity</option>\r\n                                    <option value=\"Virologic failure\"> Virologic failure</option>\r\n                                    <option value=\"Clinical failure\">Clinical failure </option>\r\n                                    <option value=\"Drug interaction\">Drug interaction</option>\r\n                                    <option value=\"Immunologic failure\">Immunologic failure</option>\r\n                                    <option value=\"Other\">Other</option>\r\n                                    </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {planArt.reasonForChange ==='other' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">                                    \r\n                            <FormGroup>\r\n                                <Label>Code for reason for change/stop ART</Label>\r\n                                <Input \r\n                                        type=\"text\"\r\n                                        name=\"reasonForChangeOther\"\r\n                                        id=\"reasonForChangeOther\"\r\n                                        value={planArt.reasonForChangeOther}\r\n                                        onChange={handlePlanArt}  \r\n                                />\r\n\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                    </>\r\n                    )}\r\n                    <div className=\"form-group mb-3 col-md-6\"> </div>\r\n                    <h3> Plan (specify orders on requisition)</h3>\r\n                    <h3>Lab evaluation :</h3>\r\n                    {/* <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Lab evaluation</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"lab_evaluation\"\r\n                                    id=\"lab_evaluation\"\r\n                                    value={plan.lab_evaluation}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div> */}\r\n                    <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                    <Label>CD4 Count </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"cd4Type\"\r\n                                        id=\"cd4Type\"\r\n                                        value={plan.cd4Type}\r\n                                        onChange={handlePlan}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Semi-Quantitative\">Semi-Quantitative</option>\r\n                                        <option value=\"Flow Cyteometry\">Flow Cyteometry</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                    </div> \r\n                    {plan.cd4Type ==='Semi-Quantitative' && (\r\n                    <div className=\"form-group  col-md-5\">\r\n                        <FormGroup>\r\n                            <Label>CD4 Count Value</Label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"cd4Count\"\r\n                                id=\"cd4Count\"\r\n                                value={plan.cd4Count}\r\n                                onChange={handlePlan}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                            >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"<200\">{\"<200\"}</option>\r\n                                <option value=\">=200\">{\">=200\"}</option>\r\n                                \r\n                            </select>\r\n                            \r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {plan.cd4Type ==='Flow Cyteometry' && (\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">CD4 Count Value</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            min={1}\r\n                            name=\"cd4Count\"\r\n                            id=\"cd4Count\"\r\n                            value={plan.cd4Count}\r\n                            onChange={handlePlan}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                            \r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {/* <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >CD4 count evaluation</Label>                       \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"previous_arv_exposure\"\r\n                                    id=\"previous_arv_exposure\"\r\n                                    value={plan.previous_arv_exposure}\r\n                                    onChange={handlePlan}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"CD4 LFA\">CD4 LFA</option>\r\n                                <option value=\"less than 200\">{\"<\"}200</option>\r\n                                <option value=\"greater than and equal to 200\">  ≥200</option>\r\n                               \r\n                                </Input>\r\n\r\n                            </InputGroup>                                      \r\n                            </FormGroup>\r\n                    </div> */}\r\n                    <hr/>\r\n                    <div className=\"row\"> \r\n                    <div className=\"form-group mb-3 col-md-4\">                                    \r\n                      \r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            <h3>TB Investigations :</h3>\r\n                            </label>\r\n                       \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"expert\"\r\n                            id=\"expert\"\r\n                            value={plan.expert}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Xpert MTB/RIF\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"cxr\"\r\n                            id=\"cxr\"\r\n                            value={plan.cxr}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            CXR\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"lf_lam\"\r\n                            id=\"lf_lam\"\r\n                            value={plan.lf_lam}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            LF_LAM\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <hr/>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"oi_prophylaxis\"\r\n                            id=\"oi_prophylaxis\"\r\n                            value={plan.oi_prophylaxis}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            OI Prophylaxis\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                           \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"oi_therapy\"\r\n                            id=\"oi_therapy\"\r\n                            value={plan.oi_therapy}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            OI therapy\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Adherence counseling</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"adherence\"\r\n                                    id=\"adherence\"\r\n                                    value={plan.adherence}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Admission</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"admission\"\r\n                                    id=\"admission\"\r\n                                    value={plan.admission}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Cervical cancer screening</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cervical\"\r\n                                    id=\"cervical\" \r\n                                    value={plan.cervical}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Symptomatic treatment/pain control (specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"symptomatic\"\r\n                                    id=\"symptomatic\" \r\n                                    value={plan.symptomatic}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Cryptococcal antigen test</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cryptococcal\"\r\n                                    id=\"cryptococcal\"\r\n                                    value={plan.cryptococcal}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Other referrals (specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"other_referrals\"\r\n                                    id=\"other_referrals\" \r\n                                    value={plan.other_referrals}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <h3>Enroll in</h3>\r\n                    <div className=\"form-group mb-3 col-md-5\">                                    \r\n                            <Input \r\n                                type=\"select\"\r\n                                name=\"enrollIn\"\r\n                                id=\"enrollIn\"\r\n                                value={enroll.enrollIn}\r\n                                onChange={handleEnroll}  \r\n                            >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"General medical follow-up\">General medical follow-up</option>\r\n                            <option value=\"ARV therapy\">ARV therapy</option>\r\n                            <option value=\"AHD management\">AHD management</option>\r\n                            <option value=\"Pending lab results\">Pending lab results</option>\r\n                            </Input>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-7\">  </div>\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('who', 'who')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\WhoStaging.js",["1415","1416","1417","1418","1419","1420","1421","1422","1423","1424"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles()\r\n    const [errors, setErrors] = useState({});\r\n    const [selectedOptions1,setSelectedOptions1] = useState([]);\r\n    const [selectedOptions2,setSelectedOptions2] = useState([]);\r\n    const [selectedOptions3,setSelectedOptions3] = useState([]);\r\n    const [selectedOptions4,setSelectedOptions4] = useState([]);\r\n    const [clinicalStage, setClinicalStage] = useState([])\r\n    let temp = { ...errors } \r\n    useEffect(() => { \r\n        WhoStaging();\r\n        if(props.observation.data ){\r\n            setAssesment(props.observation.data.assesment) \r\n            setWho(props.observation.data.who) \r\n            setSelectedOptions1(props.observation.data.who.stage1ValueOption)   \r\n            setSelectedOptions2(props.observation.data.who.stage2ValueOption)      \r\n            setSelectedOptions3(props.observation.data.who.stage3ValueOption) \r\n            setSelectedOptions4(props.observation.data.who.stage4ValueOption)             \r\n        }\r\n    }, [props.observation.data]); \r\n    const WhoStaging =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setClinicalStage(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    } \r\n    const [who, setWho] = useState({stage:\"\", stage1Value:\"\",stage2Value:\"\", stage3Value:\"\",stage4Value:\"\", stage1ValueOption:\"\",stage2ValueOption:\"\", stage3ValueOption:\"\",stage4ValueOption:\"\"});\r\n    const [assesment, setAssesment] = useState({assessment:\"\"});\r\n    const handleAssessment =e =>{\r\n        setAssesment({...assesment, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handleWho =e =>{\r\n\r\n        setWho({...who, [e.target.name]: e.target.value})\r\n    }\r\n    \r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }\r\n    const validate = () => {        \r\n        temp.stage = who.stage ? \"\" : \"This field is required\"\r\n        temp.assessment = assesment.assessment ? \"\" : \"This field is required\" \r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    } \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();\r\n        if(validate()){  \r\n            props.observation.data.assesment = assesment\r\n            props.observation.data.who=who \r\n            //console.log(props.observation)\r\n            handleItemClick('plan', 'who' )  \r\n        }              \r\n    }\r\n    const onSelectedOption1 = (selectedValues) => {\r\n        setWho({...who, stage1ValueOption: selectedValues})\r\n        setSelectedOptions1(selectedValues);\r\n    };\r\n    const onSelectedOption2 = (selectedValues) => {\r\n        setWho({...who, stage2ValueOption: selectedValues})\r\n        setSelectedOptions2(selectedValues);\r\n    };\r\n    const onSelectedOption3 = (selectedValues) => {\r\n        setSelectedOptions3(selectedValues);\r\n        setWho({...who, stage3ValueOption: selectedValues})\r\n    };\r\n    const onSelectedOption4 = (selectedValues) => {\r\n        setWho({...who, stage4ValueOption: selectedValues})\r\n        setSelectedOptions4(selectedValues);\r\n    };\r\n    const options1 = [\r\n        { value: 'Asymptomatic', label: 'Asymptomatic' },\r\n        { value: 'Persistent generalized lymphadenopathy', label: 'Persistent generalized lymphadenopathy' },\r\n        { value: 'Herpes Zoster (within last 5 years)', label: 'Performance scale: 1 asymptomatic, normal activity' },\r\n        \r\n    ];\r\n    const options2 = [\r\n        { value: 'Weight loss less than 10% of body weight', label: 'Weight loss less than 10% of body weight' },\r\n        { value: 'Minor Mucocutaneous Manifestations', label: 'Minor Mucocutaneous Manifestations' },\r\n        { value: 'Herpes Zoster (within last 5 years)', label: 'Herpes Zoster (within last 5 years)' },\r\n        { value: 'Recurrent Upper Respiratory Tract Infections', label: 'Recurrent Upper Respiratory Tract Infections' },\r\n        { value: 'Performance scale: 2 symptomatic, normal activity', label: 'Performance scale: 2 symptomatic, normal activity' },\r\n        \r\n    ];\r\n    const options3 = [\r\n        { value: 'Weight loss greater than 10% of body weight', label: 'Weight loss greater than 10% of body weight' },\r\n        { value: 'Unexplained Chronic Diarrhea less than 1 month', label: 'Unexplained Chronic Diarrhea less than 1 month' },\r\n        { value: 'Unexplained Prolonged Fever', label: 'Unexplained Prolonged Fever' },\r\n        { value: 'Oral Candidiasis', label: 'Oral Candidiasis' },\r\n        { value: 'Oral Hairy Leukoplakia', label: 'Oral Hairy Leukoplakia' },\r\n\r\n        { value: 'TB, Pulmonary (within previous year)', label: 'TB, Pulmonary (within previous year)' },\r\n        { value: 'Severe Bacterial Infections', label: 'Severe Bacterial Infections' },\r\n        { value: 'Performance scale: 3 bedridden  less than 50% of day in last month', label: 'Performance scale: 3 bedridden  less than 50% of day in last month' },\r\n       \r\n    ];\r\n    const options4 = [\r\n        { value: 'HIV Wasting syndrome', label: 'HIV Wasting syndrome' },\r\n        { value: 'PCP', label: 'PCP' },\r\n        { value: 'Toxoplasmosis, CNS', label: 'Toxoplasmosis, CNS' },\r\n\r\n        { value: 'Cryptosporidiosis with Diarrhea greater than 1 month', label: 'Cryptosporidiosis with Diarrhea greater than 1 month' },\r\n        { value: 'Cryptococcosis, Extrapulmonary', label: 'Cryptococcosis, Extrapulmonary' },\r\n        { value: 'Cytomegalovirus disease', label: 'Cytomegalovirus disease' },\r\n        { value: 'Herpes Simplex (mucotaneous greater than 1 month)', label: 'Herpes Simplex (mucotaneous greater than 1 month)' },\r\n        { value: 'Progressive Multifocal Leukoencephalopathy', label: 'Progressive Multifocal Leukoencephalopathy' },\r\n        { value: 'Mycosis, disseminated', label: 'Mycosis, disseminated' },\r\n        { value: 'Oesophageal Candidiasis', label: 'Oesophageal Candidiasis' },\r\n        { value: 'Atypical Mycobacteriosis, disseminated', label: 'Atypical Mycobacteriosis, disseminated' },\r\n        { value: 'Salmonella Septicemia, Non-typhoid', label: 'Salmonella Septicemia, Non-typhoid' },\r\n\r\n\r\n        { value: 'TB, Extrapulmonary', label: 'TB, Extrapulmonary' },\r\n        { value: 'Lymphoma', label: 'Lymphoma' },\r\n        { value: \"Kaposi's Sarcoma\", label: \"Kaposi's Sarcoma\" },\r\n        { value: 'HIV encephalopathy', label: 'HIV encephalopathy' },\r\n        { value: 'Performance scale: 4 bedridden greater than 50% of the day in last month', label: 'Performance scale: 4 bedridden greater than 50% of the day in last month' },\r\n        \r\n    ];\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Physical Examination</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Assessment <span style={{ color:\"red\"}}> *</span></h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                        <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"assessment\"\r\n                                    id=\"assessment\"\r\n                                    onChange={handleAssessment} \r\n                                    value={assesment.assessment} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Asymptomatic\">Asymptomatic</option>\r\n                                <option value=\"Symptomatic\">Symptomatic</option>\r\n                                <option value=\"AIDS defining illness\">AIDS defining illness</option>\r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                            {errors.assessment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.assessment}</span>\r\n                                ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\"> </div>\r\n                    <hr/>\r\n                    <h3>WHO staging criteria (History of any of the following) </h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                        <Label >WHO STAGE <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"stage\"\r\n                                    id=\"stage\"\r\n                                    value={who.stage} \r\n                                    onChange={handleWho}  \r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                {clinicalStage.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                \r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                            {errors.stage !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.stage}</span>\r\n                                ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    {who.stage==='119' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 1 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options1}\r\n                            onChange={onSelectedOption1}\r\n                            selected={selectedOptions1}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {who.stage==='120' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 2 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options2}\r\n                            onChange={onSelectedOption2}\r\n                            selected={selectedOptions2}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {who.stage==='121' && (\r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 3 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options3}\r\n                            onChange={onSelectedOption3}\r\n                            selected={selectedOptions3}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    {who.stage==='122' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 4 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options4}\r\n                            onChange={onSelectedOption4}\r\n                            selected={selectedOptions4}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                   )}\r\n                  \r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('appearance', 'appearance')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\MedicalHistory.js",["1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        },\r\n        \r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst MedicalHistory = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    const [visit, setVisit] = useState({visitDate:\"\"})\r\n    const [allergies, setAllergies]= useState([])\r\n    useEffect(() => {\r\n        PrepSideEffect();\r\n      }, []);\r\n        //Get list of PrepSideEffect\r\n        const PrepSideEffect =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setAllergies(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n        }\r\n    useEffect(() => { \r\n        GetPatientDTOObj()\r\n        if(props.observation.data && props.observation.data.medicalHistory){\r\n            setobjValues(props.observation.data.medicalHistory) \r\n            visit.visitDate=moment(props.observation.dateOfObservation).format(\"YYYY-MM-DD\")          \r\n        }\r\n        // else{\r\n        //     console.log(props.observation)\r\n        // }\r\n    }, [props.observation.data, props.patientObj]);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               const patientDTO= response.data.enrollment\r\n            //    setEnrollDate (patientDTO.dateOfRegistration)\r\n               setEnrollDate(patientDTO.entryPointId===21 ? patientDTO.dateConfirmedHiv : patientDTO.dateOfRegistration)\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });          \r\n    }\r\n    const [objValues, setobjValues] = useState({Nausea:\"\", \r\n                                                Nausea_fever:\"\",\r\n                                                as_never_receive_arvs:\"\",\r\n                                                chronic:\"\",\r\n                                                chronic_duration:\"\",\r\n                                                cough:\"\",\r\n                                                cough_duration:\"\",\r\n                                                drug_allergies:\"\",\r\n                                                duration_of_care_from:\"\",\r\n                                                early_arv_but_not_transfer_in:\"\",\r\n                                                fever:\"\",\r\n                                                fever_duration:\"\",\r\n                                                genital:\"\",\r\n                                                genital_duration :\"\",\r\n                                                genital_score:\"\",\r\n                                                genital_score_duration:\"\",\r\n                                                headache:\"\",\r\n                                                headache_duration:\"\",\r\n                                                hospitalization:\"\",\r\n                                                itching:\"\",\r\n                                                itching_duration:\"\",\r\n                                                name_of_the_facility:\"\",\r\n                                                new_visual:\"\",\r\n                                                new_visual_duration:\"\",\r\n                                                night_duration:\"\",\r\n                                                numbness:\"\",\r\n                                                numbness_duration:\"\",\r\n                                                pain:\"\",\r\n                                                pain_duration:\"\",\r\n                                                past_medical_history:\"\",\r\n                                                previous_arv_exposure:\"\",\r\n                                                rash:\"\",\r\n                                                rash_duration:\"\",\r\n                                                recent:\"\",\r\n                                                recent_duration:\"\",\r\n                                                relevant_family_history:\"\",\r\n                                                screen_for_tb:\"\",\r\n                                                shortness_of_breath:\"\",\r\n                                                shortness_of_breath_duration:\"\",\r\n                                                duration_of_care_to:\"\",\r\n                                                disclosureNoOne:\"\",  \r\n                                                familyMember:\"\", \r\n                                                friend:\"\", \r\n                                                spouse:\"\", \r\n                                                spiritualLeader:\"\", \r\n                                                disclosureOthers:\"\", \r\n                                                HivStatusCanBeDiscussed:\"\",\r\n                                                CurrentMedicationNone :\"\",\r\n                                                currentART :\"\",\r\n                                                currentCTX:\"\", \r\n                                                currentAntiTbDdrugs :\"\",\r\n                                                currentOthers:\"\",\r\n                                                childMotherAlive:\"\", \r\n                                                motherName:\"\", \r\n                                                motherAddress:\"\", \r\n                                                childFatherAlive:\"\", \r\n                                                immunisationComplete:\"\",\r\n                                                fatherName:\"\", \r\n                                                fatherAddress:\"\", \r\n                                                parentChildMarriageStatus:\"\",  \r\n                                                howManySibiling:\"\", \r\n                                                immunisationComplete:\"\",\r\n                                                modeOfInfantFeeding:\"\"\r\n                                                });\r\n    let temp = { ...errors }\r\n    const [hideOtherPatientDisclosure, setHideOtherPatientDisclosure]=useState(false)\r\n    const [hideOtherCurrentMedication, setHideOtherCurrentMedication]=useState(false)\r\n    //Handle CheckBox \r\n    const handleMedicalHistory =e =>{\r\n        if(e.target.name==='disclosureNoOne'){\r\n            if(e.target.checked){\r\n            setHideOtherPatientDisclosure(true)\r\n                }else{\r\n                    setHideOtherPatientDisclosure(false)\r\n                }\r\n        }\r\n        if(e.target.name==='CurrentMedicationNone'){\r\n            if(e.target.checked){\r\n                setHideOtherCurrentMedication(true)\r\n\r\n                }else{\r\n                    setHideOtherCurrentMedication(false)\r\n                }\r\n        } \r\n        if(e.target.name==='previous_arv_exposure' && e.target.value==='No'){\r\n            objValues.name_of_the_facility=\"\"\r\n            objValues.duration_of_care_from=\"\"\r\n            objValues.duration_of_care_to=\"\"  \r\n            setobjValues({...objValues, [e.target.name]: e.target.value})\r\n        }         \r\n        setobjValues({...objValues, [e.target.name]: e.target.value})\r\n    }\r\n    const handleInputChangeobjValues = e => {            \r\n        setVisit ({...visit,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    } \r\n    //Validations of the forms\r\n  const validate = () => {        \r\n    temp.screen_for_tb = objValues.screen_for_tb ? \"\" : \"This field is required\"\r\n    //temp.past_medical_history = objValues.past_medical_history ? \"\" : \"This field is required\"\r\n    //temp.relevant_family_history = objValues.relevant_family_history ? \"\" : \"This field is required\"\r\n    temp.drug_allergies = objValues.drug_allergies ? \"\" : \"This field is required\"\r\n    temp.visitDate = visit.visitDate ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  } \r\n     /**** Submit Button Processing  */\r\n     const handleSubmit = (e) => { \r\n        e.preventDefault(); \r\n        if(validate()){\r\n            props.observation.dateOfObservation= visit.visitDate \r\n            props.observation.dateOfObservation= visit.visitDate\r\n            props.observation.data.medicalHistory=objValues   \r\n            //toast.success(\"Medical history save successful\");\r\n            handleItemClick('past-arv', 'medical-history' ) \r\n        }                 \r\n    }\r\n\r\n\r\n    return (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Medical History</h2>\r\n                <br/>\r\n                    <form >\r\n     \r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Visit Date <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    name=\"visitDate\"\r\n                                    id=\"visitDate\"\r\n                                    value={visit.visitDate}\r\n                                    onChange={handleInputChangeobjValues} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                            {errors.visitDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.visitDate}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-8\"></div>   \r\n                    </div>\r\n                    {props.patientAge<=14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Is mother of the child alive ?</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"childMotherAlive\"\r\n                                    id=\"childMotherAlive\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.childMotherAlive} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input>\r\n                               \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    {objValues.childMotherAlive==='Yes' && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Mother Name</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"motherName\"\r\n                                    id=\"motherName\"\r\n                                    value={visit.motherName}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                           \r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Mother Address</Label>\r\n                        <Input \r\n                                type=\"text\"\r\n                                name=\"motherAddress\"\r\n                                id=\"motherAddress\"\r\n                                value={objValues.motherAddress}\r\n                                onChange={handleMedicalHistory} \r\n                            />\r\n                        </FormGroup>\r\n                        \r\n                        </div>\r\n                    </> \r\n                     )}\r\n                     <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Is father of the child alive ?</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"childFatherAlive\"\r\n                                    id=\"childFatherAlive\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.childFatherAlive} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div> \r\n                    {objValues.childFatherAlive==='Yes' && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Father Name</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"fatherName\"\r\n                                    id=\"fatherName\"\r\n                                    value={objValues.fatherName}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                           \r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Father Address</Label>\r\n                            <Input \r\n                                    type=\"text\"\r\n                                    name=\"fatherAddress\"\r\n                                    id=\"fatherAddress\"\r\n                                    value={objValues.fatherAddress}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                        </>\r\n                     )}\r\n\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Child's parents/caregivers are</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"parentChildMarriageStatus\"\r\n                                    id=\"parentChildMarriageStatus\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.parentChildMarriageStatus} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Married\">Married</option>\r\n                                <option value=\"Co-habiting\">Co-habiting</option>\r\n                                <option value=\"Signle\">Signle</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >How many sibiling does the child have ?</Label>\r\n                            <Input \r\n                                    type=\"number\"\r\n                                    name=\"howManySibiling\"\r\n                                    id=\"howManySibiling\"\r\n                                    value={objValues.howManySibiling}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Immunisation: Complete for Age</Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"immunisationComplete\"\r\n                                    id=\"immunisationComplete\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.immunisationComplete} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Mode of infant({\"<=6\"} months) feeding </Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"modeOfInfantFeeding\"\r\n                                    id=\"modeOfInfantFeeding\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.modeOfInfantFeeding} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"EBF\">EBF</option>\r\n                                <option value=\"EBMS\">EBMS</option>\r\n                                <option value=\"Mixed\">Mixed</option>\r\n                                </Input> \r\n                                                                  \r\n                            </FormGroup>\r\n                            \r\n                    </div>\r\n                    </div>\r\n                    )}\r\n                    <h4>Medical History</h4>\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Fever/Chills\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"fever\"\r\n                                id=\"fever\"\r\n                                value={objValues.fever} \r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"fever_duration\"\r\n                                    id=\"fever_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.fever_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Nausea/Vomitiing\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"Nausea\"\r\n                                id=\"Nausea\"\r\n                                value={objValues.Nausea} \r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"Nausea_fever\"\r\n                                    id=\"Nausea_fever\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.Nausea_fever} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Night Sweats\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"night_sweats\"\r\n                                id=\"night_sweats\"\r\n                                value={objValues.night_sweats}\r\n                                onChange={handleMedicalHistory}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            <Label >Duration (Days)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"night_duration\"\r\n                                    id=\"night_duration\"\r\n                                    value={objValues.night_duration}\r\n                                    onChange={handleMedicalHistory} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Recent Weight Loss\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"recent\"\r\n                                id=\"recent\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.recent}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"recent_duration\"\r\n                                    id=\"recent_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.recent_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Cough\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"cough\"\r\n                                id=\"cough\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.cough}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cough_duration\"\r\n                                    id=\"cough_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.cough_duration}\r\n                                   \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Headache\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"headache\"\r\n                                id=\"headache\"\r\n                                onChange={handleMedicalHistory}\r\n                                value={objValues.headache}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"headache_duration\"\r\n                                    id=\"headache_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.headache_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                New Visual imparity\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"new_visual\"\r\n                                id=\"new_visual\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.new_visual}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"new_visual_duration\"\r\n                                    id=\"new_visual_duration\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.new_visual_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Pain & Difficulty when swallowing \r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"pain\"\r\n                                id=\"pain\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.pain}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"pain_duration\"\r\n                                    id=\"pain_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.pain_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Rash\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"rash\"\r\n                                id=\"rash\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.rash} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"rash_duration\"\r\n                                    id=\"rash_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.rash_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Itching\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"itching\"\r\n                                id=\"itching\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.itching}  \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"itching_duration\"\r\n                                    id=\"itching_duration\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.itching_duration}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Chronic Diarrhea\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"chronic\"\r\n                                id=\"chronic\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.chronic}\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"chronic_duration\"\r\n                                    id=\"chronic_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.chronic_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital itching\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"genital\"\r\n                                id=\"genital\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.genital} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"genital_duration\"\r\n                                    id=\"genital_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.genital_duration} \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital Sores\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"genital_score\"\r\n                                id=\"genital_score\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.genital_score} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                           \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"genital_score_duration\"\r\n                                    id=\"genital_score_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.genital_score_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Shortness of breath\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"shortness_of_breath\"\r\n                                id=\"shortness_of_breath\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.shortness_of_breath}  \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                            \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"shortness_of_breath_duration\"\r\n                                    id=\"shortness_of_breath_duration\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.shortness_of_breath_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\"> \r\n                            <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Numbness/tingling\r\n                            </label>                                      \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                                \r\n                                name=\"numbness\"\r\n                                id=\"numbness\"\r\n                                onChange={handleMedicalHistory} \r\n                                value={objValues.numbness} \r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-2\">\r\n                            <FormGroup>\r\n                          \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"numbness_duration\"\r\n                                    id=\"numbness_duration\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.numbness_duration}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    {/* end of medical form inputs */}\r\n                    <br/>\r\n                     {/* TB Screening section */}\r\n                     <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Patient Screen for TB <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"screen_for_tb\"\r\n                                    id=\"screen_for_tb\"\r\n                                    onChange={handleMedicalHistory}  \r\n                                    value={objValues.screen_for_tb} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                </Input>\r\n                               \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                            {errors.screen_for_tb !==\"\" ? (\r\n                                <span className={classes.error}>{errors.screen_for_tb}</span>\r\n                            ) : \"\" }\r\n                     </div>\r\n                     </div>\r\n                    {/* end of TB Screening section */}\r\n                    <div className=\"row\">\r\n                    {/* Past medical history */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Past Medical History </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"past_medical_history\"\r\n                                    id=\"past_medical_history\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.past_medical_history}   \r\n                                />\r\n                                \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                          \r\n                    </div>\r\n                    {/* end of Past medical history  */}\r\n                    {/* Past Family medical history */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Relevant Family History</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"relevant_family_history\"\r\n                                    id=\"relevant_family_history\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.relevant_family_history}    \r\n                                />\r\n                                \r\n                            </InputGroup>\r\n                            </FormGroup>\r\n                          \r\n                    </div>\r\n                    {/* end of FamilyPast medical history  */}\r\n                    {/* hospitalization */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Hospitalization</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"textarea\"\r\n                                    name=\"hospitalization\"\r\n                                    id=\"hospitalization\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.hospitalization}   \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    {/* end of hosiptalization */}\r\n                    {/* Drug Allergies */}\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Drug Allergies <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"drug_allergies\"\r\n                                id=\"drug_allergies\"\r\n                                value={objValues.drug_allergies}\r\n                                onChange={handleMedicalHistory}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                required\r\n                                >\r\n                                <option value=\"\"> Select</option>\r\n                                    {allergies.map((value) => (\r\n                                        <option key={value.id} value={value.display}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                            </Input>   \r\n                                 \r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                            {errors.drug_allergies !==\"\" ? (\r\n                                <span className={classes.error}>{errors.drug_allergies}</span>\r\n                            ) : \"\" }\r\n                    </div>\r\n                    </div>\r\n                    {/* end of Drug Allergies  */}\r\n                    <div className=\"row\">\r\n                    {(props.patientObj.sex==='Female' || props.patientObj.sex==='FEMALE' || props.patientObj.sex==='female')  && (<>\r\n                        {props.patientAge>14 && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Currently Pregnant</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"current_pregnant\"\r\n                                        id=\"current_pregnant\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.current_pregnant} \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                    <option value=\"Uncertain\">Uncertain</option>\r\n                                    </Input>\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {objValues.current_pregnant==='Yes' && (<>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Last menstrual period</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"date\"\r\n                                        name=\"last_menstrual_period\"\r\n                                        id=\"last_menstrual_period\"\r\n                                        onChange={handleMedicalHistory}\r\n                                        value={objValues.last_menstrual_period}   \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Gestational Age (weeks)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"gestational_age\"\r\n                                        id=\"gestational_age\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.gestational_age}  \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                        {objValues.current_pregnant!=='Yes' && objValues.current_pregnant!=='' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >Current BreastFeeding</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"current_breastfeeding\"\r\n                                        id=\"current_breastfeeding\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.current_breastfeeding}  \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                    <option value=\"Uncertain\">Uncertain</option>\r\n                                    </Input>\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        )}\r\n                    </>)}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Previous ARV exposure</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"previous_arv_exposure\"\r\n                                    id=\"previous_arv_exposure\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.previous_arv_exposure}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                                <option value=\"Uncertain\">Uncertain</option>\r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                     </div>\r\n                     <div className=\"form-group mb-3 col-md-6\"></div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"early_arv_but_not_transfer_in\"\r\n                            id=\"early_arv_but_not_transfer_in\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.early_arv_but_not_transfer_in}  \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Early ARV but not transfer in\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    {props.patientObj.sex==='Female' && (\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pmtct_only\"\r\n                            id=\"pmtct_only\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.pmtct_only} \r\n                            />\r\n                           <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            PMTCT only\r\n                        </label> \r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                     <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"as_never_receive_arvs\"\r\n                            id=\"as_never_receive_arvs\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.as_never_receive_arvs} \r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Has never received ARVs\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    {objValues.previous_arv_exposure==='Yes' &&  objValues.previous_arv_exposure!=='' && (\r\n                    <>\r\n                         <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Name of the Facility</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"name_of_the_facility\"\r\n                                        id=\"name_of_the_facility\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.name_of_the_facility}\r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >Duration of care from</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"Date\"\r\n                                        name=\"duration_of_care_from\"\r\n                                        id=\"duration_of_care_from\"\r\n                                        onChange={handleMedicalHistory} \r\n                                        value={objValues.duration_of_care_from}\r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label >To</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"date\"\r\n                                        name=\"duration_of_care_to\"\r\n                                        id=\"duration_of_care_to\"\r\n                                        onChange={handleMedicalHistory}\r\n                                        value={objValues.duration_of_care_to} \r\n                                    />\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                    <h3>Current Medications(Caregiver should be prob ) if yes </h3>\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"CurrentMedicationNone\"\r\n                            id=\"CurrentMedicationNone\"\r\n                            value={objValues.CurrentMedicationNone} \r\n                            onChange={handleMedicalHistory} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            None\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherCurrentMedication && ( \r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentART\"\r\n                            id=\"currentART\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentART} \r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            ART\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentCTX\"\r\n                            id=\"currentCTX\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentCTX} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            CTX\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"currentAntiTbDdrugs\"\r\n                            id=\"currentAntiTbDdrugs\"\r\n                            onChange={handleMedicalHistory} \r\n                            value={objValues.currentAntiTbDdrugs} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Anti-TB drugs\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                            <FormGroup>\r\n                            <Label >Others</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"currentOthers\"\r\n                                    id=\"currentOthers\"\r\n                                    onChange={handleMedicalHistory} \r\n                                    value={objValues.currentOthers}  \r\n                                />\r\n\r\n                            </InputGroup>\r\n                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                   <h3>Patient has disclosed status to:</h3>\r\n                   <hr/>\r\n                   <div className=\"row\">\r\n                   <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                       \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"disclosureNoOne\"\r\n                            id=\"disclosureNoOne\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.disclosureNoOne}\r\n                            />\r\n                             <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            No one\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherPatientDisclosure && ( \r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"familyMember\"\r\n                            id=\"familyMember\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.familyMember}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Family member\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"friend\"\r\n                            id=\"friend\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.friend}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Friend\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"spouse\"\r\n                            id=\"spouse\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.spouse}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Spouse\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">\r\n                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                        \r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"spiritualLeader\"\r\n                            id=\"spiritualLeader\"\r\n                            onChange={handleMedicalHistory}\r\n                            value={objValues.spiritualLeader}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Spiritual leader\r\n                        </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">\r\n                            <FormGroup>\r\n                            <Label >Others</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"disclosureOthers\"\r\n                                    id=\"disclosureOthers\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.disclosureOthers} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div> \r\n                    <hr/>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >HIV Status can be discussed with (Record reported person, if any):</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"HivStatusCanBeDiscussed\"\r\n                                    id=\"HivStatusCanBeDiscussed\"\r\n                                    onChange={handleMedicalHistory}\r\n                                    value={objValues.HivStatusCanBeDiscussed}\r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\"></div>\r\n                    <br/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default MedicalHistory","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\PastArv.js",["1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    console.log(props.observation)\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    useEffect(() => { \r\n        //console.log(props.observation.data.pastArvMedical)\r\n        if(props.observation.data ){\r\n            setPastArvMedicalMedical(props.observation.data.pastArvMedical)           \r\n        }\r\n        if(props.observation.data.pastArvMedical.none==='on'){\r\n            setHideOtherPastArv(true)\r\n        }\r\n    }, [props.observation.data]);   \r\n    const [hideOtherPastArv, setHideOtherPastArv]=useState(false)\r\n    const [pastArvMedical, setPastArvMedicalMedical] = useState({\r\n                                                                none:\"\",\r\n                                                                vomit: \"\",\r\n                                                                diarrhea: \"\",\r\n                                                                headache: \"\",\r\n                                                                pain_in_abdomen: \"\",\r\n                                                                jaundice: \"\",\r\n                                                                insomnia: \"\",\r\n                                                                dizzy: \"\",\r\n                                                                tingling: \"\",\r\n                                                                rash: \"\",\r\n                                                                pancreatities: \"\",\r\n                                                                steven_johnson_syndrome: \"\",\r\n                                                                itching: \"\",\r\n                                                                anemia: \"\",\r\n                                                                weekness: \"\",\r\n                                                                loss: \"\",\r\n                                                                hyperglycemia: \"\",\r\n                                                                kidney_problem: \"\",\r\n                                                                liver_problem: \"\",\r\n                                                                others: \"\",\r\n                                                                if_yes_past_current_arv: \"\"\r\n                                                            });\r\n    const handlePastArv =e =>{\r\n        if(e.target.name==='none'){\r\n            if(e.target.checked){\r\n                setHideOtherPastArv(true)\r\n                }else{\r\n                    setHideOtherPastArv(false)\r\n                }\r\n        }\r\n        setPastArvMedicalMedical({...pastArvMedical, [e.target.name]: e.target.value})\r\n    }\r\n   \r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n     /**** Submit Button Processing  */\r\n     const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.pastArvMedical=pastArvMedical   \r\n        //toast.success(\"Medical history save successful\");\r\n        handleItemClick('physical-examination', 'past-arv' )                  \r\n    }\r\n        \r\n    return (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Past or current ARV or other medication's side effect</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"none\"\r\n                            checked={props.observation.data.pastArvMedical.none==='on' ? true : false}\r\n                            id=\"none\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            None\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    {!hideOtherPastArv && (\r\n                        <>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"vomit\"\r\n                            id=\"vomit\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Signif.nausea/vomit\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"diarrhea\"\r\n                            id=\"diarrhea\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Diarrhea\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"headache\"\r\n                            id=\"headache\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Headache\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pain_in_abdomen\"\r\n                            id=\"pain_in_abdomen\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Pain in abdomen or muscle\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"jaundice\"\r\n                            id=\"jaundice\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Jaundice\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"insomnia\"\r\n                            id=\"insomnia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Insomnia/bad dreams\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"dizzy\"\r\n                            id=\"dizzy\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Confussion/Dizzy\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"tingling\"\r\n                            id=\"tingling\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Tingling of extremities\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"rash\"\r\n                            id=\"rash\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Rash\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"pancreatities\"\r\n                            id=\"pancreatities\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Pancreatities\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"steven_johnson_syndrome\"\r\n                            id=\"steven_johnson_syndrome\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Steven Johnson Syndrome\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"itching\"\r\n                            id=\"itching\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Itching\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"anemia\"\r\n                            id=\"anemia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Anemia\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"weekness\"\r\n                            id=\"weekness\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Weekness/Fatigue\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"loss\"\r\n                            id=\"loss\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Fat accumulation or loss\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"hyperglycemia\"\r\n                            id=\"hyperglycemia\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Hyperglycemia\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"kidney_problem\"\r\n                            id=\"kidney_problem\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Kidney Problem\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                            \r\n                            name=\"liver_problem\"\r\n                            id=\"liver_problem\"\r\n                            onChange={handlePastArv}\r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Liver Problem\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Others(Specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"others\"\r\n                                    id=\"others\"\r\n                                    onChange={handlePastArv} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-12\">\r\n                            <FormGroup>\r\n                            <Label >If yes to past or current ARV or other medication's side effect, specify medication(s) </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"if_yes_past_current_arv\"\r\n                                    id=\"if_yes_past_current_arv\"\r\n                                    onChange={handlePastArv}\r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('medical-history', 'medical-history')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\AdultRegimenNextAppointment.js",["1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst AdultRegimenNextAppointment = (props) => {\r\n    const classes = useStyles()\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors } \r\n    const [saving, setSaving] = useState(false); \r\n    const [objValues, setobjValues] = useState({nextAppointment:\"\", clinicianName:\"\"});\r\n    const [regimenObj, setRegimen] = useState({regimenLine:\"\", regimen:\"\"}); \r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    useEffect(() => { \r\n        if(props.observation.data ){\r\n        setRegimen({...props.observation.data.regimen}) \r\n        objValues.nextAppointment = props.observation.data.nextAppointment\r\n        regimenObj.regimenLine= props.observation.data.regimen.regimenLine \r\n        objValues.clinicianName = props.observation.data.clinicianName \r\n        regimenObj.regimenLine=props.observation.data.regimen.regimenLine\r\n        RegimenType(props.observation.data.regimen.regimenLine)        \r\n        }\r\n        AdultRegimenLine()\r\n    }, [props.observation.data, props.observation.data.regimen]);\r\n    const handleRegimen =e =>{\r\n       \r\n        setRegimen({...regimenObj, [e.target.name]: e.target.value})\r\n    }\r\n    const handleInputChangeobjValues = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"})            \r\n        setobjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    } \r\n    const handleSelecteRegimen = e => { \r\n        let regimenID=  e.target.value\r\n        //regimenTypeId regimenId\r\n        setRegimen ({...regimenObj, regimenLine:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14)) \r\n                setAdultRegimenLine(artRegimen);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setRegimenType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    } \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.regimen= regimenObj\r\n        props.observation.personId =props.patientObj.id\r\n        props.observation.data.nextAppointment=objValues.nextAppointment\r\n        axios.put(`${baseUrl}observation/${props.observation.id}`, props.observation,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},            \r\n        )\r\n          .then(response => {\r\n              setSaving(false);\r\n              handleItemClick('', 'regimen' ) \r\n              props.patientObj.clinicalEvaluation=true\r\n              toast.success(\"Initial Clinic Evaluation save successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n              props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n          })\r\n          .catch(error => {\r\n              setSaving(false);\r\n              if(error.response && error.response.data){\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }else{\r\n                toast.error(\"Something went wrong, please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }\r\n             \r\n          });\r\n       \r\n                         \r\n    }\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Regimen & Next Appointment</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Regimen</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen Line <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenLine\"\r\n                            id=\"regimenLine\"\r\n                            value={regimenObj.regimenLine}\r\n                            onChange={handleSelecteRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                    {adultRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                \r\n                        </Input>\r\n                        {errors.regimenLine !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenLine}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>                    \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimen\"\r\n                            id=\"regimen\"\r\n                            value={regimenObj.regimen}\r\n                            onChange={handleRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>    \r\n                                {regimenType.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.regimen !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimen}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>\r\n                    <br/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Next appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    name=\"nextAppointment\"\r\n                                    id=\"nextAppointment\"\r\n                                    min={props.observation.dateOfObservation}\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.nextAppointment}  \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >ART Clinician Name</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"clinicianName\"\r\n                                    id=\"clinicianName\"\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.clinicianName}  \r\n                                />\r\n                            </InputGroup>\r\n                                                                  \r\n                            </FormGroup>\r\n                    </div>\r\n                    </div> \r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('plan', 'plan')}/>\r\n                    <Button content='Save Record' type=\"submit\" disabled={!saving?false:true} icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdultRegimenNextAppointment","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\PhysicalExamination.js",["1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }   \r\n    useEffect(() => { \r\n        if(props.observation.data && props.observation.data.physicalExamination){\r\n            setVitalSignDto( props.observation.data.physicalExamination)           \r\n        }\r\n    }, [props.observation.data]); \r\n    const [vital, setVitalSignDto]= useState({\r\n        bodyWeight: \"\",\r\n        diastolic:\"\",\r\n        encounterDate: \"\",\r\n        facilityId: 1,\r\n        height: \"\",\r\n        personId: props.patientObj.id,\r\n        serviceTypeId: 1,\r\n        systolic:\"\",\r\n        pulse:\"\",\r\n        temperature:\"\",\r\n        respiratoryRate:\"\" ,\r\n        muac:\"\",\r\n        surfaceArea:\"\",\r\n        headCircumference:\"\"\r\n    })\r\n    //Vital signs clinical decision support \r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n                                bodyWeight: \"\",\r\n                                diastolic: \"\",\r\n                                height: \"\",\r\n                                systolic: \"\",\r\n                                pulse:\"\",\r\n                                temperature:\"\",\r\n                                respiratoryRate:\"\"\r\n                            })\r\n    const handleInputChangeVitalSignDto = e => {\r\n        setErrors({...errors, [e.target.name]: \"\"})\r\n        setVitalSignDto ({...vital,  [e.target.name]: e.target.value});\r\n        // if(e.target.name==='muac'){\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value});\r\n        // } else{\r\n        //     setVitalSignDto ({...vital,  [e.target.name]: e.target.value.replace(/\\D/g, '')});\r\n        // }\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight =(e)=>{\r\n        if(e.target.name===\"height\" && (e.target.value < 48.26 || e.target.value>216.408)){\r\n        const message =\"Height cannot be greater than 216.408 and less than 48.26\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, height:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight =(e)=>{\r\n        if(e.target.name===\"bodyWeight\" && (e.target.value < 3 || e.target.value>150)){      \r\n        const message =\"Body weight must not be greater than 150 and less than 3\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, bodyWeight:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckSystolic =(e)=>{\r\n        if(e.target.name===\"systolic\" && (e.target.value < 90 || e.target.value>240)){      \r\n        const message =\"Blood Pressure systolic must not be greater than 240 and less than 90\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, systolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckDiastolic =(e)=>{\r\n        if(e.target.name===\"diastolic\" && (e.target.value < 60 || e.target.value>140)){      \r\n        const message =\"Blood Pressure diastolic must not be greater than 140 and less than 60\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, diastolic:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckPulse =(e)=>{\r\n        if(e.target.name===\"pulse\" && (e.target.value < 40 || e.target.value>120)){      \r\n        const message =\"Pulse must not be greater than 120 and less than 40\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, pulse:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckRespiratoryRate =(e)=>{\r\n        if(e.target.name===\"respiratoryRate\" && (e.target.value < 10 || e.target.value>70)){      \r\n        const message =\"Respiratory Rate must not be greater than 70 and less than 10\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, respiratoryRate:\"\"})\r\n        }\r\n    }\r\n    const handleInputValueCheckTemperature =(e)=>{\r\n        if(e.target.name===\"temperature\" && (e.target.value < 35 || e.target.value>47)){      \r\n        const message =\"Temperature must not be greater than 47 and less than 35\"\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:message})\r\n        }else{\r\n        setVitalClinicalSupport({...vitalClinicalSupport, temperature:\"\"})\r\n        }\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n    const validate = () => {        \r\n        temp.bodyWeight = vital.bodyWeight ? \"\" : \"This field is required\"\r\n        temp.height = vital.height ? \"\" : \"This field is required\" \r\n        //temp.systolic = vital.systolic ? \"\" : \"This field is required\"\r\n        //temp.diastolic = vital.diastolic ? \"\" : \"This field is required\"    \r\n       \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n        }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.physicalExamination=vital   \r\n        //toast.success(\"Medical history save successful\");\r\n        if(validate()){\r\n            handleItemClick('appearance', 'physical-examination' ) \r\n        }                 \r\n    }\r\n\r\n    \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Physical Examination</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                  \r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Pulse</Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"pulse\"\r\n                                id=\"pulse\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"40\"\r\n                                max=\"120\"\r\n                                value={vital.pulse}\r\n                                onKeyUp={handleInputValueCheckPulse} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.pulse !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.pulse}</span>\r\n                        ) : \"\"}\r\n                        {errors.pulse !==\"\" ? (\r\n                            <span className={classes.error}>{errors.pulse}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Respiratory Rate </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"respiratoryRate\"\r\n                                id=\"respiratoryRate\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"10\"\r\n                                max=\"70\"\r\n                                value={vital.respiratoryRate}\r\n                                onKeyUp={handleInputValueCheckRespiratoryRate} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                bmp\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.respiratoryRate !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.respiratoryRate}</span>\r\n                        ) : \"\"}\r\n                        {errors.respiratoryRate !==\"\" ? (\r\n                            <span className={classes.error}>{errors.respiratoryRate}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Temperature </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"temperature\"\r\n                                id=\"temperature\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.temperature}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                <sup>o</sup>c\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.temperature !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.temperature}</span>\r\n                        ) : \"\"}\r\n                        {errors.temperature !==\"\" ? (\r\n                            <span className={classes.error}>{errors.temperature}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Body Weight <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"bodyWeight\"\r\n                                id=\"bodyWeight\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"3\"\r\n                                max=\"150\"\r\n                                value={vital.bodyWeight}\r\n                                onKeyUp={handleInputValueCheckBodyWeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                kg\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.bodyWeight !==\"\" ? (\r\n                                <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                        ) : \"\"}\r\n                        {errors.bodyWeight !==\"\" ? (\r\n                            <span className={classes.error}>{errors.bodyWeight}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>                                   \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Height <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                        <InputGroupText\r\n                                addonType=\"append\"\r\n                                \r\n                                style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                cm\r\n                        </InputGroupText>\r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"height\"\r\n                                id=\"height\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.height}\r\n                                min=\"48.26\"\r\n                                max=\"216.408\"\r\n                                onKeyUp={handleInputValueCheckHeight} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                                <InputGroupText\r\n\r\n                                style={{ backgroundColor:\"#992E62\", color:\"#fff\", border: \"1px solid #992E62\", borderRadius:\"0rem\"}}\r\n                                >\r\n                                {vital.height ? (vital.height/100).toFixed(2) + \"m\" : \"m\"}\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.height !==\"\" ? (\r\n                            <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                        ) : \"\"}\r\n                        {errors.height !==\"\" ? (\r\n                            <span className={classes.error}>{errors.height}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 mt-2 col-md-4\">\r\n                        {vital.bodyWeight && vital.height &&(\r\n                            <FormGroup>\r\n                            <Label > {\" \"}</Label>\r\n                            <InputGroup> \r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                BMI : {(vital.bodyWeight/((vital.height * vital.height)/100)).toFixed(2)}\r\n                            </InputGroupText>                   \r\n                           \r\n                            </InputGroup>                \r\n                            </FormGroup>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-8\">\r\n                        <FormGroup>\r\n                        <Label >Blood Pressure </Label>\r\n                        <InputGroup>\r\n                        <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                systolic(mmHg)\r\n                        </InputGroupText> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"systolic\"\r\n                                id=\"systolic\"\r\n                                min=\"90\"\r\n                                max=\"2240\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.systolic}\r\n                                onKeyUp={handleInputValueCheckSystolic}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}} \r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                            diastolic(mmHg)\r\n                            </InputGroupText>\r\n                                <Input \r\n                                type=\"number\"\r\n                                name=\"diastolic\"\r\n                                id=\"diastolic\"\r\n                                min={0}\r\n                                max={140}\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.diastolic}\r\n                                onKeyUp={handleInputValueCheckDiastolic} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                                />\r\n                            \r\n                            \r\n                        </InputGroup>\r\n                        {vitalClinicalSupport.systolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.systolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.systolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.systolic}</span>\r\n                        ) : \"\" }  \r\n                        {vitalClinicalSupport.diastolic !==\"\" ? (\r\n                        <span className={classes.error}>{vitalClinicalSupport.diastolic}</span>\r\n                        ) : \"\"}\r\n                        {errors.diastolic !==\"\" ? (\r\n                            <span className={classes.error}>{errors.diastolic}</span>\r\n                        ) : \"\" }          \r\n                        </FormGroup>\r\n                    </div>\r\n                    </div>\r\n                    {props.patientAge<=14 && (\r\n                    <div className=\"row\">\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Head circumference </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"headCircumference\"\r\n                                id=\"headCircumference\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                min=\"35\"\r\n                                max=\"47\"\r\n                                value={vital.headCircumference}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\" mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Surface Area </Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"number\"\r\n                                name=\"surfaceArea\"\r\n                                id=\"surfaceArea\"\r\n                                onChange={handleInputChangeVitalSignDto}\r\n                                value={vital.surfaceArea}\r\n                                onKeyUp={handleInputValueCheckTemperature} \r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0rem\"}}\r\n                            />\r\n                            <InputGroupText addonType=\"append\" style={{ backgroundColor:\"#014D88\", color:\"#fff\", border: \"1px solid #014D88\", borderRadius:\"0rem\"}}>\r\n                                cm<sup>3</sup>\r\n                            </InputGroupText>\r\n                        </InputGroup>\r\n                        \r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >MUAC</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"select\"\r\n                                        name=\"muac\"\r\n                                        id=\"muac\"\r\n                                        onChange={handleInputChangeVitalSignDto} \r\n                                        value={vital.muac} \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Normal\">Normal</option>\r\n                                    <option value=\"Under\">Under</option>\r\n                                    <option value=\"Over\">Over</option>\r\n                                    </Input>\r\n\r\n                                </InputGroup>\r\n                            \r\n                                </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('past-arv', 'past-arv')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Appearance.js",["1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    const [saving, setSaving] = useState(false);\r\n    let temp = { ...errors }   \r\n    const [hideGeneralApperance, setHideGeneralApperance]=useState(false)\r\n    const [hideSkin, setHideSkin] = useState(false)\r\n    const [hideEye, setHideEye] = useState(false)\r\n    const [hideBreast, setHideBreast] = useState(false)\r\n    const [hideCardiovascular, setHideCardiovascular] = useState(false)\r\n    const [hideGenitalia, setHideGenitalia] = useState(false);\r\n    const [hideRespiratory, setHideRespiratory] = useState(false);\r\n    const [hideGastrointestinal, setHideGastrointestinal] = useState(false);\r\n    const [hideNeurological, setHideNeurological] = useState(false);\r\n    const [handlementalstatus, setHideMentalStatus] = useState(false);\r\n    const [generalApperance, setGeneralApperance] = useState({\r\n        nsf: \"\",\r\n        pallor: \"\",\r\n        febrile: \"\",\r\n        dehydrated: \"\",\r\n        peripheral: \"\",\r\n        other: \"\"\r\n    });\r\n    const [skin, setSkin] = useState({\r\n        nsf: \"\",\r\n        pruritic: \"\",\r\n        abscesses: \"\",\r\n        herpes: \"\",\r\n        kaposi: \"\",\r\n        suborrheic: \"\",\r\n        fungal: \"\",\r\n        other: \"\"\r\n    });\r\n    const [eye, setEye] = useState({\r\n        nsf: \"\",\r\n        icterus: \"\",\r\n        thrush: \"\",\r\n        oral: \"\",\r\n        abnormal: \"\",\r\n        other: \"\"\r\n    });\r\n    const [breast, setBreast] = useState({\r\n        nsf: \"\",\r\n        lumps: \"\",\r\n        discharge: \"\",\r\n        other: \"\"\r\n    });\r\n    const [cardiovascular, setCardiovascular] = useState({\r\n                                                            nsf:\"\",  \r\n                                                            abnormal_heart_rate:\"\",\r\n                                                            other:\"\",\r\n                                                         });\r\n    const [genitalia, setGenitalia] = useState({ nsf:\"\", \r\n                                                genital_discharge:\"\", \r\n                                                genital_ulcer :\"\", \r\n                                                inguinal:\"\",   \r\n                                                other :\"\",\r\n                                            });\r\n    const [respiratory, setRespiratory] = useState({nsf:\"\",\r\n                                                    rate:\"\",\r\n                                                    labored:\"\",\r\n                                                    cyanosis:\"\",\r\n                                                    wheezing :\"\",\r\n                                                    intercostal :\"\",\r\n                                                    auscultation_finding :\"\",\r\n                                                    other:\"\",\r\n        \r\n                                                    });\r\n    const [gastrointestinal, setGastrointestinal] = useState({nsf :\"\", \r\n                                                                spenomegaly:\"\", \r\n                                                                distention:\"\",\r\n                                                                hepatomegaly:\"\", \r\n                                                                tenderness:\"\", \r\n                                                                other:\"\",\r\n                                                            });\r\n    const [neurological, setNeurological] = useState({  nsf:\"\",\r\n                                                        numbness :\"\",\r\n                                                        paresis:\"\", \r\n                                                        blindness:\"\", \r\n                                                        neckStiffness:\"\", \r\n                                                        speechSlurs:\"\",  \r\n                                                        orientation:\"\",\r\n                                                        other:\"\" \r\n                                                       \r\n                                                    });\r\n    const [mentalStatus, setMentalStatus] = useState({nsf:\"\",\r\n                                                        mentation:\"\", \r\n                                                        memoryloss:\"\", \r\n                                                        moodSwings:\"\",  \r\n                                                        depression:\"\", \r\n                                                        anxiety:\"\", \r\n                                                        ideation:\"\", \r\n                                                        tenderness:\"\", \r\n                                                        other:\"\",\r\n                                                    });\r\n\r\n    useEffect(() => { \r\n        if(props.observation.data){\r\n            setGeneralApperance(props.observation.data.generalApperance)\r\n            setMentalStatus(props.observation.data.mentalstatus)\r\n            setNeurological(props.observation.data.neurological)\r\n            setGastrointestinal(props.observation.data.gastrointestinal)\r\n            setRespiratory(props.observation.data.respiratory)\r\n            setGenitalia(props.observation.data.genitalia)\r\n            setCardiovascular(props.observation.data.cardiovascular)\r\n            setBreast(props.observation.data.breast)\r\n            setEye(props.observation.data.eye)\r\n            setSkin(props.observation.data.skin)\r\n        }\r\n        \r\n    }, [props.observation.data])\r\n\r\n   \r\n    const handleGeneralApperance =e =>{\r\n        if(e.target.name!=='other'){\r\n        if(e.target.checked){\r\n            if(e.target.name==='nsf'){\r\n                generalApperance.nsf=\"\"\r\n                generalApperance.pallor=\"\"\r\n                generalApperance.febrile=\"\"\r\n                generalApperance.dehydrated=\"\"\r\n                generalApperance.peripheral=\"\"\r\n                generalApperance.other=\"\"\r\n            }\r\n            setGeneralApperance({...generalApperance, [e.target.name]: e.target.checked})\r\n        }else{\r\n            setGeneralApperance({...generalApperance, [e.target.name]: false})\r\n        }\r\n        }else{\r\n            setGeneralApperance({...generalApperance, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleSkin =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    skin.nsf=\"\"\r\n                    skin.pruritic=\"\"\r\n                    skin.abscesses=\"\"\r\n                    skin.herpes=\"\"\r\n                    skin.kaposi=\"\"\r\n                    skin.suborrheic=\"\"\r\n                    skin.fungal=\"\"\r\n                    skin.other=\"\"\r\n                }\r\n                setSkin({...skin, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setSkin({...skin, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setSkin({...skin, [e.target.name]: e.target.value})\r\n            }\r\n    }\r\n    const handleEye =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    eye.nsf=\"\"\r\n                    eye.icterus=\"\"\r\n                    eye.thrush=\"\"\r\n                    eye.oral=\"\"\r\n                    eye.abnormal=\"\"\r\n                    eye.other=\"\"\r\n                }\r\n                setEye({...eye, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setEye({...eye, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setEye({...eye, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleBreast =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    breast.nsf=\"\"\r\n                    breast.lumps=\"\"\r\n                    breast.discharge=\"\"\r\n                    breast.other=\"\"\r\n                }\r\n                setBreast({...breast, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setBreast({...breast, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setBreast({...breast, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleCardiovascular =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    cardiovascular.nsf=\"\"\r\n                    cardiovascular.abnormal_heart_rate=\"\"\r\n                    cardiovascular.other=\"\"\r\n                }\r\n                setCardiovascular({...cardiovascular, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setCardiovascular({...cardiovascular, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setCardiovascular({...cardiovascular, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleGenitalia =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    genitalia.nsf=\"\"\r\n                    genitalia.genital_discharge=\"\"\r\n                    genitalia.genital_ulcer=\"\"\r\n                    genitalia.inguinal=\"\"\r\n                    genitalia.other=\"\"\r\n                }\r\n                setGenitalia({...genitalia, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setGenitalia({...genitalia, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setGenitalia({...genitalia, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleRespiratory =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    respiratory.nsf=\"\"\r\n                    respiratory.rate=\"\"\r\n                    respiratory.labored=\"\"\r\n                    respiratory.cyanosis=\"\"\r\n                    respiratory.wheezing=\"\"\r\n                    respiratory.intercostal=\"\"\r\n                    respiratory.auscultation_finding=\"\"\r\n                    respiratory.other=\"\"\r\n                }\r\n                setRespiratory({...respiratory, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setRespiratory({...respiratory, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setRespiratory({...respiratory, [e.target.name]: e.target.value})\r\n        }\r\n        \r\n    }\r\n    const handleGastrointestinal =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    gastrointestinal.nsf=\"\"\r\n                    gastrointestinal.spenomegaly=\"\"\r\n                    gastrointestinal.distention=\"\"\r\n                    gastrointestinal.hepatomegaly=\"\"\r\n                    gastrointestinal.tenderness=\"\"\r\n                    gastrointestinal.other=\"\"\r\n                }\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setGastrointestinal({...gastrointestinal, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n    const handleNeurological =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    neurological.nsf=\"\"\r\n                    neurological.numbness=\"\"\r\n                    neurological.paresis=\"\"\r\n                    neurological.blindness=\"\"\r\n                    neurological.neckStiffness=\"\"\r\n                    neurological.speechSlurs=\"\"\r\n                    neurological.orientation=\"\"\r\n                    neurological.other=\"\"\r\n                }\r\n                setNeurological({...neurological, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setNeurological({...neurological, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setNeurological({...neurological, [e.target.name]: e.target.value})\r\n        }\r\n       \r\n    }\r\n    const handleMentalStatus =e =>{\r\n        if(e.target.name!=='other'){\r\n            if(e.target.checked){\r\n                if(e.target.name==='nsf'){\r\n                    mentalStatus.nsf=\"\"\r\n                    mentalStatus.mentation=\"\"\r\n                    mentalStatus.memoryloss=\"\"\r\n                    mentalStatus.moodSwings=\"\"\r\n                    mentalStatus.depression=\"\"\r\n                    mentalStatus.anxiety=\"\"\r\n                    mentalStatus.ideation=\"\"\r\n                    mentalStatus.tenderness=\"\"\r\n                    mentalStatus.other=\"\"\r\n                }\r\n                setMentalStatus({...mentalStatus, [e.target.name]: e.target.checked})\r\n            }else{\r\n                setMentalStatus({...mentalStatus, [e.target.name]: false})\r\n            }\r\n            }else{\r\n                setMentalStatus({...mentalStatus, [e.target.name]: e.target.value})\r\n        }\r\n    }\r\n\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n/**** Submit Button Processing  */\r\nconst handleSubmit = (e) => { \r\n    e.preventDefault();  \r\n    props.observation.data.generalApperance=generalApperance\r\n    props.observation.data.skin=skin\r\n    props.observation.data.eye=eye\r\n    props.observation.data.breast=breast\r\n    props.observation.data.cardiovascular= cardiovascular\r\n    props.observation.data.genitalia=genitalia\r\n    props.observation.data.neurological=neurological\r\n    props.observation.data.mentalstatus=mentalStatus\r\n    props.observation.data.respiratory=respiratory\r\n    props.observation.data.gastrointestinal = gastrointestinal   \r\n    //toast.success(\"Medical history save successful\");\r\n    handleItemClick('who', 'appearance' )                  \r\n}\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>General Appearance</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <div className=\"row\"> \r\n                    <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                        <h3 style={{color:'#fff'}} >General Appearance</h3>\r\n                    </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    checked={generalApperance.nsf}\r\n                                    value={generalApperance.nsf}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            {(generalApperance.nsf==='' || generalApperance.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"pallor\"\r\n                                    id=\"pallor\"\r\n                                    checked={generalApperance.pallor}\r\n                                    value={generalApperance.pallor}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Pallor\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"febrile\"\r\n                                    id=\"febrile\"\r\n                                    checked={generalApperance.febrile}\r\n                                    value={generalApperance.febrile}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Febrile\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"dehydrated\"\r\n                                    id=\"dehydrated\"\r\n                                    checked={generalApperance.dehydrated}\r\n                                    value={generalApperance.dehydrated}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Dehydrated\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"peripheral\"\r\n                                    id=\"peripheral\"\r\n                                    checked={generalApperance.peripheral}\r\n                                    value={generalApperance.peripheral}\r\n                                    onChange={handleGeneralApperance}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Peripheral edema\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={generalApperance.other}\r\n                                            onChange={handleGeneralApperance} \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                    </div>\r\n                    <div className=\"row\"> \r\n                        <LabelRibbon as='a' color='purple' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Skin</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={skin.nsf }\r\n                                value={skin.nsf}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(skin.nsf==='' || skin.nsf===false) && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"pruritic\"\r\n                                id=\"pruritic\"\r\n                                value={skin.pruritic}\r\n                                checked={skin.pruritic}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Pruritic paplar dermatitis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"abscesses\"\r\n                                id=\"abscesses\"\r\n                                checked={skin.abscesses}\r\n                                value={skin.abscesses}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Abscesses\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"herpes\"\r\n                                id=\"herpes\"\r\n                                checked={skin.herpes}\r\n                                value={skin.herpes}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Herpes zoster\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"kaposi\"\r\n                                id=\"kaposi\"\r\n                                checked={skin.kaposi}\r\n                                value={skin.kaposi}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Kaposi's lesions\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"suborrheic\"\r\n                                id=\"suborrheic\"\r\n                                checked={skin.suborrheic}\r\n                                value={skin.suborrheic}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Suborrheic dermatitis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"fungal\"\r\n                                id=\"fungal\"\r\n                                value={skin.fungal}\r\n                                checked={skin.fungal}\r\n                                onChange={handleSkin}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Fungal infections\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={skin.other}\r\n                                        onChange={handleSkin}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                       \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='black' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Head/Eye/ENT</h3>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    value={eye.nsf}\r\n                                    checked={eye.nsf}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            {(eye.nsf==='' || eye.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"icterus\"\r\n                                    id=\"icterus\"\r\n                                    checked={eye.icterus}\r\n                                    value={eye.icterus}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Icterus\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"thrush\"\r\n                                    id=\"thrush\"\r\n                                    checked={eye.thrush}\r\n                                    value={eye.thrush}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Thrush\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"oral\"\r\n                                    id=\"oral\"\r\n                                    checked={eye.oral}\r\n                                    value={eye.oral}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Oral KS\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"abnormal\"\r\n                                    id=\"abnormal\"\r\n                                    checked={eye.abnormal}\r\n                                    value={eye.abnormal}\r\n                                    onChange={handleEye}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Abnormal fundoscopy\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={eye.other}\r\n                                            onChange={handleEye}\r\n                                            \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n\r\n                            </>\r\n                            )}\r\n                     \r\n                    </div>\r\n                    {props.patientAge>14 && props.patientObj.sex==='Female' &&(\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='orange' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Breasts</h3>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"nsf\"\r\n                                    id=\"nsf\"\r\n                                    checked={breast.nsf}\r\n                                    value={breast.nsf}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    NSF\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            {(breast.nsf===''  || breast.nsf===false) && (\r\n                                <>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"lumps\"\r\n                                    id=\"lumps\"\r\n                                    checked={breast.lumps}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Lumps, masses\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">                                    \r\n                                <div className=\"form-check custom-checkbox ml-1 \">\r\n                                    <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"                           \r\n                                    name=\"discharge\"\r\n                                    id=\"discharge\"\r\n                                    checked={breast.discharge}\r\n                                    value={breast.discharge}\r\n                                    onChange={handleBreast}\r\n                                    />\r\n                                    <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"basic_checkbox_1\"\r\n                                    >\r\n                                    Discharge\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-3\">\r\n                                    <FormGroup>\r\n                                    <Label >Other (specify)</Label>\r\n                                    <InputGroup> \r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            name=\"other\"\r\n                                            id=\"other\"\r\n                                            value={breast.other}\r\n                                            onChange={handleBreast} \r\n                                        />\r\n                                    </InputGroup>                                        \r\n                                    </FormGroup>\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                    </div>\r\n                    )}\r\n                    <div className=\"row\">   \r\n                        <LabelRibbon as='a' color='green' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Cardiovascular</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={cardiovascular.nsf}\r\n                                value={cardiovascular.nsf}\r\n                                onChange={handleCardiovascular}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(cardiovascular.nsf==='' || cardiovascular.nsf===false) && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"abnormal_heart_rate\"\r\n                                id=\"abnormal_heart_rate\"\r\n                                checked={cardiovascular.abnormal_heart_rate}\r\n                                value={cardiovascular.abnormal_heart_rate}\r\n                                onChange={handleCardiovascular}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Abnormal heart rate\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={cardiovascular.other}\r\n                                        onChange={handleCardiovascular}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                        \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='teal' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Genitalia</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={genitalia.nsf}\r\n                                value={genitalia.nsf}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(genitalia.nsf==='' || genitalia.nsf===false) && (\r\n                        <>\r\n                    \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"genital_discharge\"\r\n                                id=\"genital_discharge\"\r\n                                checked={genitalia.genital_discharge}\r\n                                value={genitalia.genital_discharge}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital discharge\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"genital_ulcer\"\r\n                                id=\"genital_ulcer\"\r\n                                checked={genitalia.genital_ulcer}\r\n                                value={genitalia.genital_ulcer}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Genital ulcer/other lesion\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"inguinal\"\r\n                                id=\"inguinal\"\r\n                                checked={genitalia.inguinal}\r\n                                value={genitalia.inguinal}\r\n                                onChange={handleGenitalia}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Inguinal node enlargement\r\n                                </label>\r\n                            </div>\r\n                        </div>         \r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={genitalia.other}\r\n                                        onChange={handleGenitalia}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        </>\r\n                        )}\r\n                   \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Respiratory</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={respiratory.nsf}\r\n                                value={respiratory.nsf}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(respiratory.nsf==='' || respiratory.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Rate (breaths/min)\r\n                                </label>\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"rate\"\r\n                                id=\"rate\"\r\n                                checked={respiratory.rate}\r\n                                value={respiratory.rate}\r\n                                onChange={handleRespiratory}\r\n                                placeholder='breaths/min'\r\n                                />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"labored\"\r\n                                id=\"labored\"\r\n                                checked={respiratory.labored}\r\n                                value={respiratory.labored}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Labored breathing\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"cyanosis\"\r\n                                id=\"cyanosis\"\r\n                                checked={respiratory.cyanosis}\r\n                                value={respiratory.cyanosis}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Cyanosis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"wheezing\"\r\n                                id=\"wheezing\"\r\n                                checked={respiratory.wheezing}\r\n                                value={respiratory.wheezing}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Wheezing\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"intercostal\"\r\n                                id=\"intercostal\"\r\n                                checked={respiratory.intercostal}\r\n                                value={respiratory.intercostal}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Intercostal (sub) recession\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"auscultation_finding\"\r\n                                id=\"auscultation_finding\"\r\n                                checked={respiratory.auscultation_finding}\r\n                                value={respiratory.auscultation_finding}\r\n                                onChange={handleRespiratory}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Auscultation findings\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={respiratory.other}\r\n                                        onChange={handleRespiratory}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                    \r\n                        </>\r\n                        )}\r\n                   \r\n                    </div>\r\n                    <div className=\"row\">                \r\n                        <LabelRibbon as='a' color='violet' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Gastrointestinal</h3>\r\n                        </LabelRibbon>                   \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={gastrointestinal.nsf}\r\n                                value={gastrointestinal.nsf}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(gastrointestinal.nsf==='' || gastrointestinal.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"distention\"\r\n                                id=\"distention\"\r\n                                checked={gastrointestinal.distention}\r\n                                value={gastrointestinal.distention}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Distention\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"hepatomegaly\"\r\n                                id=\"hepatomegaly\"\r\n                                checked={gastrointestinal.hepatomegaly}\r\n                                value={gastrointestinal.hepatomegaly}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Hepatomegaly\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"spenomegaly\"\r\n                                id=\"spenomegaly\"\r\n                                checked={gastrointestinal.spenomegaly}\r\n                                value={gastrointestinal.spenomegaly}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Spenomegaly\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"tenderness\"\r\n                                id=\"tenderness\"\r\n                                checked={gastrointestinal.tenderness}\r\n                                value={gastrointestinal.tenderness}\r\n                                onChange={handleGastrointestinal}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Tenderness\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={gastrointestinal.other}\r\n                                        onChange={handleGastrointestinal}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"row\">                                   \r\n                        <LabelRibbon as='a' color='brown' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Neurological</h3>\r\n                        </LabelRibbon>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={neurological.nsf}\r\n                                value={neurological.nsf}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(neurological.nsf==='' || neurological.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"orientation\"\r\n                                id=\"orientation\"\r\n                                checked={neurological.orientation}\r\n                                value={neurological.orientation}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Orientation to TPP\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"speechSlurs\"\r\n                                id=\"speechSlurs\"\r\n                                checked={neurological.speechSlurs}\r\n                                value={neurological.speechSlurs}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Speech slurs\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"neckStiffness\"\r\n                                id=\"neckStiffness\"\r\n                                checked={neurological.neckStiffness}\r\n                                value={neurological.neckStiffness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Neck stiffness\r\n                                </label>\r\n                            </div>\r\n                        </div> \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"blindness\"\r\n                                id=\"blindness\"\r\n                                checked={neurological.blindness}\r\n                                value={neurological.blindness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Blindness 1/2 eyes\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"paresis\"\r\n                                id=\"paresis\"\r\n                                checked={neurological.paresis}\r\n                                value={neurological.paresis}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Hemiplegia/paresis\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"numbness\"\r\n                                checked={neurological.numbness}\r\n                                id=\"numbness\"\r\n                                value={neurological.numbness}\r\n                                onChange={handleNeurological}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Numbness of extremities\r\n                                </label>\r\n                            </div>\r\n                        </div>  \r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={neurological.other}\r\n                                        onChange={handleNeurological}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"row\">                \r\n                        <LabelRibbon as='a' color='grey' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h3 style={{color:'#fff'}} >Mental Status</h3>\r\n                        </LabelRibbon>                   \r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"nsf\"\r\n                                id=\"nsf\"\r\n                                checked={mentalStatus.nsf}\r\n                                value={mentalStatus.nsf}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                NSF\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {(mentalStatus.nsf==='' || mentalStatus.nsf===false) && (\r\n                            <>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"mentation\"\r\n                                id=\"mentation\"\r\n                                checked={mentalStatus.mentation}\r\n                                value={mentalStatus.mentation}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Slow mentation\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"memoryloss\"\r\n                                id=\"memoryloss\"\r\n                                checked={mentalStatus.memoryloss}\r\n                                value={mentalStatus.memoryloss}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Memory loss\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"moodSwings\"\r\n                                id=\"moodSwings\"\r\n                                checked={mentalStatus.moodSwings}\r\n                                value={mentalStatus.moodSwings}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Mood swings\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"depression\"\r\n                                id=\"depression\"\r\n                                checked={mentalStatus.depression}\r\n                                value={mentalStatus.depression}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Depression\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"anxiety\"\r\n                                id=\"anxiety\"\r\n                                checked={mentalStatus.anxiety}\r\n                                value={mentalStatus.anxiety}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Anxiety\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"ideation\"\r\n                                id=\"ideation\"\r\n                                checked={mentalStatus.ideation}\r\n                                value={mentalStatus.ideation}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Suicidal ideation\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-3\">                                    \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                           \r\n                                name=\"tenderness\"\r\n                                id=\"tenderness\"\r\n                                checked={mentalStatus.tenderness}\r\n                                value={mentalStatus.tenderness}\r\n                                onChange={handleMentalStatus}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                Tenderness\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                <Label >Other (specify)</Label>\r\n                                <InputGroup> \r\n                                    <Input \r\n                                        type=\"text\"\r\n                                        name=\"other\"\r\n                                        id=\"other\"\r\n                                        value={mentalStatus.other}\r\n                                        onChange={handleMentalStatus}\r\n                                    />\r\n                                </InputGroup>                                        \r\n                                </FormGroup>\r\n                        </div>\r\n                        \r\n                        </>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('physical-examination', 'physical-examination')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\Plan.js",["1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    useEffect(() => { \r\n        \r\n        if(props.observation.data ){\r\n            setPlan(props.observation.data.plan) \r\n            setPlanArt(props.observation.data.planArt)            \r\n            setEnrollIn(props.observation.data.enroll)  \r\n        }\r\n    }, [props.observation.data]);\r\n    const [planArt, setPlanArt] = useState({previousArvExposure:\"\", reasonForChange:\"\", reasonForChangeOther:\"\"});\r\n    const [enroll, setEnrollIn] = useState({enrollIn:\"\"});\r\n    const [plan, setPlan] = useState({  lab_evaluation:\"\", \r\n                                        cd4Count:\"\",\r\n                                        cd4SemiQuantitative :\"\",\r\n                                        cxr:\"\", \r\n                                        lf_lam:\"\", \r\n                                        oi_prophylaxis:\"\", \r\n                                        adherence:\"\", \r\n                                        cervical:\"\", \r\n                                        cryptococcal:\"\",\r\n                                        cd4FlowCytometry :\"\",\r\n                                        previous_arv_exposure:\"\", \r\n                                        tb_investigation:\"\", \r\n                                        expert:\"\", \r\n                                        oi_therapy:\"\", \r\n                                        admission:\"\",\r\n                                        symptomatic :\"\",\r\n                                        other_referrals:\"\",\r\n    });\r\n    let temp = { ...errors }   \r\n    const handlePlanArt =e =>{\r\n        setPlanArt({...planArt, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handlePlan =e =>{\r\n        if(e.target.name==='cd4FlowCytometry' && plan.cd4SemiQuantitative!==\"\"){ \r\n            plan.cd4SemiQuantitative=\"\"\r\n        }\r\n        if(e.target.name==='cd4SemiQuantitative' && plan.cd4FlowCytometry!==\"\"){          \r\n            plan.cd4FlowCytometry=\"\"\r\n        }\r\n        setPlan({...plan, [e.target.name]: e.target.value})\r\n        //console.log(plan)\r\n    }\r\n    const handleEnroll =e =>{\r\n        setEnrollIn({...enroll, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault(); \r\n        if(plan.cd4FlowCytometry!==\"\" && plan.cd4Count==='Flow Cyteometry'){//cleaning input field value against the correct selection\r\n            plan.cd4SemiQuantitative=\"\"\r\n        }else if(plan.cd4SemiQuantitative!==\"\" && plan.cd4Count==='Semi-Quantitative'){\r\n            plan.cd4FlowCytometry=\"\"\r\n        } \r\n        props.observation.data.planArt = planArt\r\n        props.observation.data.plan = plan\r\n        props.observation.data.enroll=enroll  \r\n        //toast.success(\"Record save successful\");\r\n        handleItemClick('regimen', 'plan' )                  \r\n    }\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Enroll In & Plan</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Enroll in</h3>\r\n                    <div className=\"form-group mb-3 col-md-5\">                                    \r\n                            <Input \r\n                                type=\"select\"\r\n                                name=\"enrollIn\"\r\n                                id=\"enrollIn\"\r\n                                value={enroll.enrollIn}\r\n                                onChange={handleEnroll}  \r\n                            >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"General medical follow-up\">General medical follow-up</option>\r\n                            <option value=\"ARV therapy\">ARV therapy</option>\r\n                            <option value=\"AHD management\">AHD management</option>\r\n                            <option value=\"Pending lab results\">Pending lab results</option>\r\n                            </Input>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-7\">  </div>\r\n                    <hr/>\r\n                    <h3>Plan for Antiretroviral Therapy (ART)</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                            <Label>Ongoing Monitoring </Label>\r\n                            <Input \r\n                                    type=\"select\"\r\n                                    name=\"previousArvExposure\"\r\n                                    id=\"previousArvExposure\"\r\n                                    value={planArt.previousArvExposure}\r\n                                    onChange={handlePlanArt}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Restart treatment\">Restart treatment</option>\r\n                                <option value=\"Start new treatment\">Start new treatment</option>\r\n                                <option value=\"Stop treatment\">Stop treatment </option>\r\n                                <option value=\"Change treatment\">Change treatment </option>\r\n                                <option value=\"ARV TX postponed for clinical reason\">ARV TX postponed for clinical reason</option>\r\n                                </Input>\r\n                        </FormGroup>\r\n                    </div>\r\n                    {props.patientAge<=14 && (\r\n                    <>\r\n                        {planArt.previousArvExposure==='Stop treatment' || planArt.previousArvExposure ==='Change treatment' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">                                    \r\n                            <FormGroup>\r\n                                <Label>Code for reason for change/stop ART</Label>\r\n                                <Input \r\n                                        type=\"select\"\r\n                                        name=\"reasonForChange\"\r\n                                        id=\"reasonForChange\"\r\n                                        value={planArt.reasonForChange}\r\n                                        onChange={handlePlanArt}  \r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Can't adhere to schedule\"> Can't adhere to schedule</option>\r\n                                    <option value=\"Patient refusal/preference\">Patient refusal/preference</option>\r\n                                    <option value=\"Doctor's Instruction\">Doctor's Instruction </option>\r\n                                    <option value=\"Ran out of medicine\">Ran out of medicine</option>\r\n                                    <option value=\"Drugs not available\">Drugs not available</option>\r\n                                    <option value=\"Toxicity\">Toxicity</option>\r\n                                    <option value=\"Virologic failure\"> Virologic failure</option>\r\n                                    <option value=\"Clinical failure\">Clinical failure </option>\r\n                                    <option value=\"Drug interaction\">Drug interaction</option>\r\n                                    <option value=\"Immunologic failure\">Immunologic failure</option>\r\n                                    <option value=\"Other\">Other</option>\r\n                                    </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        {planArt.reasonForChange ==='other' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">                                    \r\n                            <FormGroup>\r\n                                <Label>Code for reason for change/stop ART</Label>\r\n                                <Input \r\n                                        type=\"text\"\r\n                                        name=\"reasonForChangeOther\"\r\n                                        id=\"reasonForChangeOther\"\r\n                                        value={planArt.reasonForChangeOther}\r\n                                        onChange={handlePlanArt}  \r\n                                />\r\n\r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                    </>\r\n                    )}\r\n                    <div className=\"form-group mb-3 col-md-6\"> </div>\r\n                    <h3> Plan (specify orders on requisition)</h3>\r\n                    <h3>Lab evaluation :</h3>\r\n                    {/* <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Lab evaluation</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"lab_evaluation\"\r\n                                    id=\"lab_evaluation\"\r\n                                    value={plan.lab_evaluation}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div> */}\r\n                   <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                    <Label>CD4 Count </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"cd4Type\"\r\n                                        id=\"cd4Type\"\r\n                                        value={plan.cd4Type}\r\n                                        onChange={handlePlan}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Semi-Quantitative\">Semi-Quantitative</option>\r\n                                        <option value=\"Flow Cyteometry\">Flow Cyteometry</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                    </div> \r\n                    {plan.cd4Type ==='Semi-Quantitative' && (\r\n                    <div className=\"form-group  col-md-5\">\r\n                        <FormGroup>\r\n                            <Label>CD4 Count Value</Label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"cd4Count\"\r\n                                id=\"cd4Count\"\r\n                                value={plan.cd4Count}\r\n                                onChange={handlePlan}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                            >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"<200\">{\"<200\"}</option>\r\n                                <option value=\">=200\">{\">=200\"}</option>\r\n                                \r\n                            </select>\r\n                            \r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {plan.cd4Type ==='Flow Cyteometry' && (\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label for=\"\">CD4 Count Value</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            min={1}\r\n                            name=\"cd4Count\"\r\n                            id=\"cd4Count\"\r\n                            value={plan.cd4Count}\r\n                            onChange={handlePlan}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            \r\n                        />\r\n                            \r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {/* <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >CD4 count evaluation</Label>                       \r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"previous_arv_exposure\"\r\n                                    id=\"previous_arv_exposure\"\r\n                                    value={plan.previous_arv_exposure}\r\n                                    onChange={handlePlan}  \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"CD4 LFA\">CD4 LFA</option>\r\n                                <option value=\"less than 200\">{\"<\"}200</option>\r\n                                <option value=\"greater than and equal to 200\">  ≥200</option>\r\n                               \r\n                                </Input>\r\n\r\n                            </InputGroup>                                      \r\n                            </FormGroup>\r\n                    </div> */}\r\n                    <hr/>\r\n                    <div className=\"form-group mb-3 col-md-4\">                                                          \r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            <h3>TB Investigations :</h3>\r\n                            </label>                       \r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-3\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"expert\"\r\n                            id=\"expert\"\r\n                            value={plan.expert}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            Xpert MTB/RIF\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"cxr\"\r\n                            id=\"cxr\"\r\n                            value={plan.cxr}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            CXR\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-2\">                                    \r\n                        <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"lf_lam\"\r\n                            id=\"lf_lam\"\r\n                            value={plan.lf_lam}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            LF_LAM\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                    <hr/>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"oi_prophylaxis\"\r\n                            id=\"oi_prophylaxis\"\r\n                            value={plan.oi_prophylaxis}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            OI Prophylaxis\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                           \r\n                            <div className=\"form-check custom-checkbox ml-1 \">\r\n                            <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"                           \r\n                            name=\"oi_therapy\"\r\n                            id=\"oi_therapy\"\r\n                            value={plan.oi_therapy}\r\n                            onChange={handlePlan} \r\n                            />\r\n                            <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor=\"basic_checkbox_1\"\r\n                            >\r\n                            OI therapy\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Adherence counseling</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"adherence\"\r\n                                    id=\"adherence\"\r\n                                    value={plan.adherence}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Admission</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"admission\"\r\n                                    id=\"admission\"\r\n                                    value={plan.admission}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Cervical cancer screening</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cervical\"\r\n                                    id=\"cervical\" \r\n                                    value={plan.cervical}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Symptomatic treatment/pain control (specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"symptomatic\"\r\n                                    id=\"symptomatic\" \r\n                                    value={plan.symptomatic}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Cryptococcal antigen test</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"cryptococcal\"\r\n                                    id=\"cryptococcal\"\r\n                                    value={plan.cryptococcal}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Other referrals (specify)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"other_referrals\"\r\n                                    id=\"other_referrals\" \r\n                                    value={plan.other_referrals}\r\n                                    onChange={handlePlan} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('who', 'who')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\WhoStaging.js",["1532","1533","1534","1535","1536","1537","1538"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n} from \"reactstrap\";\r\n//import * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\n\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\n//import {  Modal } from \"react-bootstrap\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles()\r\n    const [errors, setErrors] = useState({});\r\n    const [selectedOptions1,setSelectedOptions1] = useState([]);\r\n    const [selectedOptions2,setSelectedOptions2] = useState([]);\r\n    const [selectedOptions3,setSelectedOptions3] = useState([]);\r\n    const [selectedOptions4,setSelectedOptions4] = useState([]);\r\n    const [clinicalStage, setClinicalStage] = useState([])\r\n    let temp = { ...errors } \r\n    useEffect(() => {\r\n        WhoStaging(); \r\n        if(props.observation.data ){\r\n            setAssesment(props.observation.data.assesment) \r\n            setWho(props.observation.data.who)   \r\n            setSelectedOptions1(props.observation.data.who.stage1ValueOption)   \r\n            setSelectedOptions2(props.observation.data.who.stage2ValueOption)      \r\n            setSelectedOptions3(props.observation.data.who.stage3ValueOption) \r\n            setSelectedOptions4(props.observation.data.who.stage4ValueOption) \r\n        }\r\n    }, [props.observation.data]); \r\n    const WhoStaging =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/CLINICAL_STAGE`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setClinicalStage(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    } \r\n    const [who, setWho] = useState({stage:\"\", stage1Value:\"\",stage2Value:\"\", stage3Value:\"\",stage4Value:\"\", stage1ValueOption:\"\",stage2ValueOption:\"\", stage3ValueOption:\"\",stage4ValueOption:\"\"});\r\n\r\n    const [assesment, setAssesment] = useState({assessment:\"\"});\r\n    const handleAssessment =e =>{\r\n        setAssesment({...assesment, [e.target.name]: e.target.value})\r\n        \r\n    }\r\n    const handleWho =e =>{\r\n        //console.log(e.target.value)\r\n        setWho({...who, [e.target.name]: e.target.value})\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }\r\n    const validate = () => {        \r\n        temp.stage = who.stage ? \"\" : \"This field is required\"\r\n        temp.assessment = assesment.assessment ? \"\" : \"This field is required\" \r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }   \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();\r\n        if(validate()){   \r\n            props.observation.data.assesment = assesment\r\n            props.observation.data.who=who \r\n            handleItemClick('plan', 'who' ) \r\n        }                 \r\n    }\r\n    const onSelectedOption1 = (selectedValues) => {\r\n        setWho({...who, stage1ValueOption: selectedValues})\r\n        setSelectedOptions1(selectedValues);\r\n    };\r\n    const onSelectedOption2 = (selectedValues) => {\r\n        setWho({...who, stage2ValueOption: selectedValues})\r\n        setSelectedOptions2(selectedValues);\r\n    };\r\n    const onSelectedOption3 = (selectedValues) => {\r\n        setSelectedOptions3(selectedValues);\r\n        setWho({...who, stage3ValueOption: selectedValues})\r\n    };\r\n    const onSelectedOption4 = (selectedValues) => {\r\n        setWho({...who, stage4ValueOption: selectedValues})\r\n        setSelectedOptions4(selectedValues);\r\n    };\r\n    const options1 = [\r\n        { value: 'Asymptomatic', label: 'Asymptomatic' },\r\n        { value: 'Persistent generalized lymphadenopathy', label: 'Persistent generalized lymphadenopathy' },\r\n        { value: 'Herpes Zoster (within last 5 years)', label: 'Performance scale: 1 asymptomatic, normal activity' },\r\n        \r\n    ];\r\n    const options2 = [\r\n        { value: 'Weight loss less than 10% of body weight', label: 'Weight loss less than 10% of body weight' },\r\n        { value: 'Minor Mucocutaneous Manifestations', label: 'Minor Mucocutaneous Manifestations' },\r\n        { value: 'Herpes Zoster (within last 5 years)', label: 'Herpes Zoster (within last 5 years)' },\r\n        { value: 'Recurrent Upper Respiratory Tract Infections', label: 'Recurrent Upper Respiratory Tract Infections' },\r\n        { value: 'Performance scale: 2 symptomatic, normal activity', label: 'Performance scale: 2 symptomatic, normal activity' },\r\n        \r\n    ];\r\n    const options3 = [\r\n        { value: 'Weight loss greater than 10% of body weight', label: 'Weight loss greater than 10% of body weight' },\r\n        { value: 'Unexplained Chronic Diarrhea less than 1 month', label: 'Unexplained Chronic Diarrhea less than 1 month' },\r\n        { value: 'Unexplained Prolonged Fever', label: 'Unexplained Prolonged Fever' },\r\n        { value: 'Oral Candidiasis', label: 'Oral Candidiasis' },\r\n        { value: 'Oral Hairy Leukoplakia', label: 'Oral Hairy Leukoplakia' },\r\n\r\n        { value: 'TB, Pulmonary (within previous year)', label: 'TB, Pulmonary (within previous year)' },\r\n        { value: 'Severe Bacterial Infections', label: 'Severe Bacterial Infections' },\r\n        { value: 'Performance scale: 3 bedridden  less than 50% of day in last month', label: 'Performance scale: 3 bedridden  less than 50% of day in last month' },\r\n       \r\n    ];\r\n    const options4 = [\r\n        { value: 'HIV Wasting syndrome', label: 'HIV Wasting syndrome' },\r\n        { value: 'PCP', label: 'PCP' },\r\n        { value: 'Toxoplasmosis, CNS', label: 'Toxoplasmosis, CNS' },\r\n\r\n        { value: 'Cryptosporidiosis with Diarrhea greater than 1 month', label: 'Cryptosporidiosis with Diarrhea greater than 1 month' },\r\n        { value: 'Cryptococcosis, Extrapulmonary', label: 'Cryptococcosis, Extrapulmonary' },\r\n        { value: 'Cytomegalovirus disease', label: 'Cytomegalovirus disease' },\r\n        { value: 'Herpes Simplex (mucotaneous greater than 1 month)', label: 'Herpes Simplex (mucotaneous greater than 1 month)' },\r\n        { value: 'Progressive Multifocal Leukoencephalopathy', label: 'Progressive Multifocal Leukoencephalopathy' },\r\n        { value: 'Mycosis, disseminated', label: 'Mycosis, disseminated' },\r\n        { value: 'Oesophageal Candidiasis', label: 'Oesophageal Candidiasis' },\r\n        { value: 'Atypical Mycobacteriosis, disseminated', label: 'Atypical Mycobacteriosis, disseminated' },\r\n        { value: 'Salmonella Septicemia, Non-typhoid', label: 'Salmonella Septicemia, Non-typhoid' },\r\n\r\n\r\n        { value: 'TB, Extrapulmonary', label: 'TB, Extrapulmonary' },\r\n        { value: 'Lymphoma', label: 'Lymphoma' },\r\n        { value: \"Kaposi's Sarcoma\", label: \"Kaposi's Sarcoma\" },\r\n        { value: 'HIV encephalopathy', label: 'HIV encephalopathy' },\r\n        { value: 'Performance scale: 4 bedridden greater than 50% of the day in last month', label: 'Performance scale: 4 bedridden greater than 50% of the day in last month' },\r\n        \r\n    ];\r\n\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Physical Examination</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Assessment <span style={{ color:\"red\"}}> *</span></h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                        <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"assessment\"\r\n                                    id=\"assessment\"\r\n                                    onChange={handleAssessment} \r\n                                    value={assesment.assessment} \r\n                                >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Asymptomatic\">Asymptomatic</option>\r\n                                <option value=\"Symptomatic\">Symptomatic</option>\r\n                                <option value=\"AIDS defining illness\">AIDS defining illness</option>\r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                            {errors.assessment !==\"\" ? (\r\n                                <span className={classes.error}>{errors.assessment}</span>\r\n                            ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\"> </div>\r\n                    <hr/>\r\n                    <h3>WHO staging criteria (History of any of the following)</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">                                    \r\n                        <FormGroup>\r\n                        <Label >WHO STAGE <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                                <Input \r\n                                    type=\"select\"\r\n                                    name=\"stage\"\r\n                                    id=\"stage\"\r\n                                    value={who.stage} \r\n                                    onChange={handleWho}  \r\n                                >\r\n                                 <option value=\"\"> Select</option>\r\n                                {clinicalStage.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n\r\n                            </InputGroup>\r\n                            {errors.stage !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.stage}</span>\r\n                                ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    {who.stage==='119' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 1 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options1}\r\n                            onChange={onSelectedOption1}\r\n                            selected={selectedOptions1}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {who.stage==='120' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 2 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options2}\r\n                            onChange={onSelectedOption2}\r\n                            selected={selectedOptions2}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    {who.stage==='121' && (\r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 3 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options3}\r\n                            onChange={onSelectedOption3}\r\n                            selected={selectedOptions3}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    {who.stage==='122' && (\r\n                    <div className=\"form-group mb-3 col-md-12\">                                    \r\n                        <FormGroup>\r\n                        <Label >Stage 4 options</Label>\r\n                        <DualListBox\r\n                            //canFilter\r\n                            options={options4}\r\n                            onChange={onSelectedOption4}\r\n                            selected={selectedOptions4}\r\n                        />\r\n                        </FormGroup>\r\n                    </div>\r\n                   )}\r\n                  \r\n                    </div>\r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('appearance', 'appearance')}/>\r\n                    <Button content='Next' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\ViewAdultHistory\\ChildRegimenNextAppointment.js",["1539","1540","1541","1542","1543"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\n//import * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, } from \"@material-ui/core\";\r\n//import SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\n//import {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst ChildRegimenNextAppointment = (props) => {\r\n    const classes = useStyles()\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors } \r\n    const [saving, setSaving] = useState(false); \r\n    const [objValues, setobjValues] = useState({nextAppointment:\"\", clinicianName:\"\"});\r\n    const [regimenObj, setRegimen] = useState({regimenLine:\"\", regimen:\"\"}); \r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    useEffect(() => { \r\n        if(props.observation.data ){\r\n        setRegimen(props.observation.data.regimen) \r\n        objValues.nextAppointment = props.observation.data.nextAppointment  \r\n        objValues.clinicianName = props.observation.data.clinicianName          \r\n        }\r\n    }, [props.observation.data]);\r\n    const handleRegimen =e =>{\r\n        \r\n        setRegimen({...regimenObj, [e.target.name]: e.target.value})\r\n    }\r\n    const handleSelecteRegimen = e => { \r\n        let regimenID=  e.target.value\r\n        //regimenTypeId regimenId\r\n        setRegimen ({...regimenObj, regimenLine:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/children`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimenChildren=response.data.filter((x)=> (x.id===3 || x.id===4))\r\n                setAdultRegimenLine(artRegimenChildren);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setRegimenType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const handleInputChangeobjValues = e => {  \r\n        setErrors({...errors, [e.target.name]: \"\"})           \r\n        setobjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }  \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.regimen= regimenObj\r\n        props.observation.personId =props.patientObj.id\r\n        props.observation.data.nextAppointment=objValues.nextAppointment\r\n        axios.put(`${baseUrl}observation/${props.observation.id}`, props.observation,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},            \r\n        )\r\n          .then(response => {\r\n              setSaving(false);\r\n              handleItemClick('', 'regimen' ) \r\n              props.patientObj.clinicalEvaluation=true\r\n              toast.success(\"Initial Clinic Evaluation save successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n              props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n          })\r\n          .catch(error => {\r\n              setSaving(false);\r\n              if(error.response && error.response.data){\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }else{\r\n                toast.error(\"Something went wrong, please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }\r\n             \r\n          });\r\n       \r\n                         \r\n    }\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Regimen & Next Appointment</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Regimen</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen Line <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenLine\"\r\n                            id=\"regimenLine\"\r\n                            value={regimenObj.regimenLine}\r\n                            onChange={handleSelecteRegimen}\r\n                            \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                    {adultRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                \r\n                        </Input>\r\n                        {errors.regimenLine !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenLine}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>                    \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen <span style={{ color:\"red\"}}> *</span></Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimen\"\r\n                            id=\"regimen\"\r\n                            value={regimenObj.regimen}\r\n                            onChange={handleRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>    \r\n                                {regimenType.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.regimen !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimen}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>\r\n                   \r\n                    <br/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Next appointment </Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    name=\"nextAppointment\"\r\n                                    id=\"nextAppointment\"\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.nextAppointment} \r\n                                    min={props.observation.dateOfObservation} \r\n                                />\r\n                            </InputGroup>                                        \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >ART Clinician Name</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"clinicianName\"\r\n                                    id=\"clinicianName\"\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.clinicianName}  \r\n                                />\r\n                            </InputGroup>\r\n                                                                  \r\n                            </FormGroup>\r\n                    </div>\r\n                    </div> \r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('plan', 'plan')}/>\r\n                    <Button content='Save Record' type=\"submit\" disabled={!saving?false:true} icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChildRegimenNextAppointment","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\ChildRegimenNextAppointment.js",["1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup,\r\n    InputGroupText,\r\n\r\n} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory, } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\nimport {  Modal } from \"react-bootstrap\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst ChildRegimenNextAppointment = (props) => {\r\n    const classes = useStyles()\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors } \r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    useEffect(() => { \r\n        AdultRegimenLine();\r\n        if(props.observation.data ){\r\n            if(props.observation.data.regimen!==\"\"){\r\n                setRegimen(props.observation.data.regimen) \r\n            } \r\n            setobjValues(props.observation.data.nextAppointment)             \r\n        }\r\n    }, [props.observation.data]);\r\n    const [saving, setSaving] = useState(false); \r\n    const [objValues, setobjValues] = useState({nextAppointment:\"\", clinicianName:\"\"});\r\n    const [regimenObj, setRegimen] = useState({regimenLine:\"\", regimen:\"\"}); \r\n    const handleRegimen =e =>{\r\n        setErrors({...errors, [e.target.name]: \"\"})\r\n        \r\n        setRegimen({...regimenObj, [e.target.name]: e.target.value})\r\n    }\r\n    const handleInputChangeobjValues = e => {   \r\n        setErrors({...errors, [e.target.name]: \"\"})         \r\n        setobjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleSelecteRegimen = e => { \r\n        let regimenID=  e.target.value\r\n        //regimenTypeId regimenId\r\n        setRegimen ({...regimenObj, regimenLine:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/children`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimenChildren=response.data.filter((x)=> (x.id===3 || x.id===4))\r\n                setAdultRegimenLine(artRegimenChildren);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setRegimenType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    } \r\n    const validate = () => {        \r\n        temp.nextAppointment = objValues.nextAppointment ? \"\" : \"This field is required\"\r\n        //temp.regimenLine = regimenObj.regimenLine ? \"\" : \"This field is required\" \r\n        //temp.regimen = regimenObj.regimen ? \"\" : \"This field is required\" \r\n       \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n        }   \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.regimen= regimenObj\r\n        props.observation.personId =props.patientObj.id\r\n        props.observation.data.nextAppointment=objValues.nextAppointment\r\n        props.observation.data.clinicianName = objValues.clinicianName\r\n        //console.log(props.observation)\r\n        if(validate()){\r\n        axios.post(`${baseUrl}observation`, props.observation,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},            \r\n        )\r\n          .then(response => {\r\n              setSaving(false);\r\n              handleItemClick('', 'regimen' ) \r\n              props.patientObj.clinicalEvaluation=true\r\n              toast.success(\"Initial Clinic Evaluation successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n              props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n          })\r\n          .catch(error => {\r\n              setSaving(false);\r\n              //console.log(error.response)\r\n              if(error.response && error.response.data){\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }else{\r\n                toast.error(\"Something went wrong, please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n              }\r\n             \r\n          });\r\n        }\r\n                         \r\n    }\r\n        \r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Regimen & Next Appointment</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Regimen</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen Line </Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenLine\"\r\n                            id=\"regimenLine\"\r\n                            value={regimenObj.regimenLine}\r\n                            onChange={handleSelecteRegimen}\r\n                            \r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                    {adultRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                \r\n                        </Input>\r\n                        {errors.regimenLine !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenLine}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>                    \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen </Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimen\"\r\n                            id=\"regimen\"\r\n                            value={regimenObj.regimen}\r\n                            onChange={handleRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>    \r\n                                {regimenType.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.regimen !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimen}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>\r\n                   \r\n                    <br/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Next appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    name=\"nextAppointment\"\r\n                                    id=\"nextAppointment\"\r\n                                    min={props.observation.dateOfObservation}\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.nextAppointment}  \r\n                                />\r\n                            </InputGroup>\r\n                            {errors.nextAppointment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.nextAppointment}</span>\r\n                                ) : \"\" }                                           \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >ART Clinician Name</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"clinicianName\"\r\n                                    id=\"clinicianName\"\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.clinicianName}  \r\n                                />\r\n                            </InputGroup>\r\n                                                                  \r\n                            </FormGroup>\r\n                    </div>\r\n                    </div> \r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('plan', 'plan')}/>\r\n                    <Button content='Save Record' type=\"submit\" disabled={!saving?false:true} icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChildRegimenNextAppointment","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\InitailClinicEvaluation\\Adult\\AdultRegimenNextAppointment.js",["1555"],"\r\nimport React, { useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody,Input, InputGroup,} from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card,} from \"@material-ui/core\";\r\nimport { toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Button} from 'semantic-ui-react'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    //console.log(props.activeContent)\r\n    const [errors, setErrors] = useState({});\r\n    const classes = useStyles()\r\n    let temp = { ...errors } \r\n    useEffect(() => { \r\n        AdultRegimenLine()\r\n        if(props.observation.data ){\r\n            if(props.observation.data.regimen!==\"\"){\r\n                setRegimen(props.observation.data.regimen) \r\n            } \r\n            setobjValues(props.observation.data.nextAppointment)             \r\n        }\r\n    }, [props.observation.data]);\r\n    const [saving, setSaving] = useState(false); \r\n    const [objValues, setobjValues] = useState({nextAppointment:\"\", clinicianName:\"\"});\r\n    const [regimenObj, setRegimen] = useState({regimenLine:\"\", regimen:\"\"}); \r\n    const [adultRegimenLine, setAdultRegimenLine] = useState([]);\r\n    const [regimenType, setRegimenType] = useState([]);\r\n    const handleInputChangeobjValues = e => {  \r\n        setErrors({...errors, [e.target.name]: \"\"})          \r\n        setobjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }\r\n    const handleSelecteRegimen = e => { \r\n        let regimenID=  e.target.value\r\n        //regimenTypeId regimenId\r\n        setRegimen ({...regimenObj, regimenLine:regimenID});\r\n        RegimenType(regimenID)           \r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n    }\r\n    //GET AdultRegimenLine \r\n    const AdultRegimenLine =()=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/arv/adult`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                const artRegimen=response.data.filter((x)=> (x.id===1 || x.id===2 || x.id===14)) \r\n                setAdultRegimenLine(artRegimen);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of RegimenLine\r\n    const RegimenType =(id)=>{\r\n        axios\r\n            .get(`${baseUrl}hiv/regimen/types/${id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setRegimenType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });\r\n        \r\n    }\r\n    const handleRegimen =e =>{\r\n        setErrors({...errors, [e.target.name]: \"\"})\r\n        \r\n        setRegimen({...regimenObj, [e.target.name]: e.target.value})\r\n    }\r\n    const validate = () => {        \r\n        temp.nextAppointment = objValues.nextAppointment ? \"\" : \"This field is required\"\r\n        //temp.regimenLine = regimenObj.regimenLine ? \"\" : \"This field is required\" \r\n        //temp.regimen = regimenObj.regimen ? \"\" : \"This field is required\" \r\n       \r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n        }  \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();  \r\n        props.observation.data.regimen= regimenObj\r\n        props.observation.personId =props.patientObj.id\r\n        props.observation.data.nextAppointment=objValues.nextAppointment\r\n        props.observation.data.clinicianName = objValues.clinicianName\r\n        if(validate()){\r\n            setSaving(true)\r\n        axios.post(`${baseUrl}observation`, props.observation,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`}},            \r\n        )\r\n          .then(response => {\r\n              setSaving(false);\r\n              handleItemClick('', 'regimen' ) \r\n              props.patientObj.clinicalEvaluation=true\r\n              toast.success(\"Initial Clinic Evaluation successful\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n              props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n          })\r\n          .catch(error => {\r\n              setSaving(false);\r\n              //console.log(error.response)\r\n              if(error.response && error.response.data){\r\n                let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER}); \r\n            }else{\r\n                toast.error(\"Something went wrong, please try again...\",  {position: toast.POSITION.BOTTOM_CENTER}); \r\n            }\r\n             \r\n          });\r\n        }\r\n                         \r\n    }\r\n      \r\n\r\nreturn (\r\n        <>  \r\n        \r\n            <Card className={classes.root}>\r\n                <CardBody>   \r\n                <h2 style={{color:'#000'}}>Regimen & Next Appointment</h2>\r\n                <br/>\r\n                    <form >\r\n                    {/* Medical History form inputs */}\r\n                    <div className=\"row\">\r\n                    <h3>Regimen</h3>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen Line </Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimenLine\"\r\n                            id=\"regimenLine\"\r\n                            value={regimenObj.regimenLine}\r\n                            onChange={handleSelecteRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            >\r\n                                <option value=\"\"> Select</option>\r\n                                    {adultRegimenLine.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                    ))}\r\n                                \r\n                        </Input>\r\n                        {errors.regimenLine !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimenLine}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>                    \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                    <Label >Original Regimen </Label>\r\n                    <Input\r\n                            type=\"select\"\r\n                            name=\"regimen\"\r\n                            id=\"regimen\"\r\n                            value={regimenObj.regimen}\r\n                            onChange={handleRegimen}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                            required\r\n                            >\r\n                                <option value=\"\"> Select</option>    \r\n                                {regimenType.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.description}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.regimen !==\"\" ? (\r\n                            <span className={classes.error}>{errors.regimen}</span>\r\n                            ) : \"\" }\r\n                    </FormGroup>\r\n                    </div>\r\n                    <br/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Next appointment <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"date\"\r\n                                    name=\"nextAppointment\"\r\n                                    id=\"nextAppointment\"\r\n                                    min={props.observation.dateOfObservation}\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.nextAppointment}  \r\n                                />\r\n                            </InputGroup>\r\n                            {errors.nextAppointment !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.nextAppointment}</span>\r\n                                ) : \"\" }                                       \r\n                            </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >ART Clinician Name</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"clinicianName\"\r\n                                    id=\"clinicianName\"\r\n                                    onChange={handleInputChangeobjValues} \r\n                                    value={objValues.clinicianName}  \r\n                                />\r\n                            </InputGroup>\r\n                                                                  \r\n                            </FormGroup>\r\n                    </div>\r\n                    </div> \r\n                    <br/>\r\n                    <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('plan', 'plan')}/>\r\n                    <Button content='Save Record' type=\"submit\" icon='right arrow' disabled={!saving?false:true} labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit} disabled={saving}/>\r\n                    \r\n                    </form>\r\n                    \r\n                </CardBody>\r\n            </Card> \r\n                                     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\ADR\\Index.js",["1556","1557"],"import React, {useState, useEffect } from \"react\";\r\n// import { Link } from 'react-router-dom';\r\nimport { Table  } from \"react-bootstrap\";\r\nimport { Input, Label, FormGroup, } from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { url as baseUrl,token } from \"./../../../../../api\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst ADR = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const classes = useStyles()\r\n  let temp = { ...errors }\r\n  const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    PrepSideEffect();\r\n  }, []);\r\n       //Get list of PrepSideEffect\r\n       const PrepSideEffect =()=>{\r\n        axios\r\n           .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               //console.log(response.data);\r\n               setPrepSideEffect(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });\r\n       \r\n        }\r\n  const handAdrleInputChange = e => {\r\n    props.setAdrObj ({...props.adrObj,  [e.target.name]: e.target.value});\r\n  }\r\n   //Validations of the forms\r\n   const validate = () => {        \r\n    temp.adr = props.adrObj.adr ? \"\" : \"This field is required\"\r\n    temp.adrOnsetDate = props.adrObj.adrOnsetDate ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const addADR = e => { \r\n    if(validate()){\r\n        props.setAdrList([...props.adrList, props.adrObj])\r\n        props.setAdrObj({ adr: \"\", adrOnsetDate: \"\" })\r\n    }else{\r\n      toast.error(\" Field are required \");\r\n    }\r\n  }\r\n  /* Remove ADR  function **/\r\n  const removeRelativeLocation = index => {       \r\n      props.adrList.splice(index, 1);\r\n      props.setAdrList([...props.adrList]);\r\n     \r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"row\">\r\n        {props.enableUpdate && (\r\n        <>\r\n        <div className=\"form-group mb-3 col-md-5\">\r\n\r\n            <FormGroup>\r\n            <Label >ADR </Label>\r\n            \r\n              <Input\r\n                  type=\"select\"\r\n                  name=\"adr\"\r\n                  id=\"adr\"\r\n                  value={props.adrObj.adr}\r\n                  onChange={handAdrleInputChange}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  required\r\n                  >\r\n                    <option value=\"\"> Select</option>\r\n                      {prepSideEffect.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                              {value.display}\r\n                          </option>\r\n                      ))}\r\n              </Input>\r\n                {errors.adr !==\"\" ? (\r\n                    <span className={classes.error}>{errors.adr}</span>\r\n                ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        <div className=\"form-group mb-3 col-md-5\">        \r\n        <FormGroup>\r\n            <Label > Onset Date</Label>\r\n            <Input\r\n                type=\"date\"\r\n                name=\"adrOnsetDate\"\r\n                id=\"adrOnsetDate\"\r\n                value={props.adrObj.adrOnsetDate}\r\n                min={props.artStartDate}\r\n                onChange={handAdrleInputChange}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                max= {props.encounterDate}\r\n                required\r\n                > \r\n            </Input>\r\n            {errors.adrOnsetDate !==\"\" ? (\r\n                <span className={classes.error}>{errors.adrOnsetDate}</span>\r\n            ) : \"\" }\r\n            </FormGroup>\r\n        </div>\r\n        \r\n        <div className=\"form-group mb-3 col-md-2\">\r\n          <LabelSui as='a' color='black'  onClick={addADR}  size='tiny' style={{ marginTop:35}}>\r\n              <Icon name='plus' /> Add\r\n          </LabelSui>\r\n        </div>\r\n        </>)}\r\n        {props.adrList.length >0 \r\n          ?\r\n            <List>\r\n            <Table  striped responsive>\r\n                  <thead >\r\n                      <tr>\r\n                          <th>ADR</th>\r\n                          <th>OnSetDate</th>\r\n                          <th ></th>\r\n                      </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                {props.adrList.map((relative, index) => (\r\n\r\n                  <RelativeList\r\n                      key={index}\r\n                      index={index}\r\n                      relative={relative}\r\n                      removeRelativeLocation={removeRelativeLocation}\r\n                  />\r\n                  ))}\r\n                  </tbody>\r\n                  </Table>\r\n            </List>\r\n            :\r\n            \"\"\r\n        }       \r\n    </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\nfunction RelativeList({\r\n  relative,\r\n  index,\r\n  removeRelativeLocation,\r\n}) {\r\n\r\n\r\n  return (\r\n          <tr>\r\n              <th>{relative.adr}</th>\r\n              <th>{relative.adrOnsetDate}</th>\r\n              <th></th>\r\n              <th >\r\n                  <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeRelativeLocation(index)}>\r\n                      <DeleteIcon fontSize=\"inherit\" />\r\n                  </IconButton>\r\n                  \r\n              </th>\r\n          </tr> \r\n  );\r\n}\r\n\r\n\r\nexport default ADR;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\TBScreening\\Index.js",["1558","1559"],"import React, { useState, useEffect } from \"react\";\r\nimport { Input, Label, FormGroup} from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { token, url as baseUrl } from \"./../../../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    },\r\n    \"& .card-title\":{\r\n      color:'#fff',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& .form-control\":{\r\n      borderRadius:'0.25rem',\r\n      height:'41px'\r\n  },\r\n  \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n  },\r\n  \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\"\r\n  },\r\n  \"& select\":{\r\n      \"-webkit-appearance\": \"listbox !important\"\r\n  },\r\n  \"& p\":{\r\n      color:'red'\r\n  },\r\n  \"& FormLabelName\":{\r\n      fontSize:'14px',\r\n      color:'#014d88',\r\n      fontWeight:'bold'\r\n  },\r\n  \"& label\":{\r\n    fontSize:'14px',\r\n    color:'#014d88',\r\n    fontWeight:'bold'\r\n}\r\n  },\r\n  input: {\r\n    display: 'none'\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst TBScreeningForm = (props) => {\r\n  const classes = useStyles()\r\n  const [tbStatus, setTbStatus] = useState([]); \r\n  useEffect(() => {\r\n    TBStatus();\r\n    if(props.tbObj.currentOnIpt!==\"\" && (props.tbObj.coughing===\"YES\") || (props.tbObj.nightSweat===\"YES\") || (props.tbObj.fever===\"YES\") || (props.tbObj.contactWithTBCase===\"YES\") || (props.tbObj.lethergy===\"YES\")){\r\n      props.tbObj.tbStatusId=68 //for any option with YES     \r\n    }else if(props.tbObj.currentOnIpt!==\"\" &&  props.tbObj.coughing===\"NO\" && props.tbObj.nightSweat===\"NO\" && props.tbObj.fever===\"NO\" && props.tbObj.contactWithTBCase===\"NO\" && props.tbObj.lethergy===\"NO\"){\r\n      props.tbObj.tbStatusId=67\r\n    }else if(props.tbObj.tbStatusId===\"\" || props.tbObj.tbStatusId===null){\r\n      props.tbObj.tbStatusId=\"\"\r\n    }\r\n    }, [props.tbObj]);\r\n    ///GET LIST OF FUNCTIONAL%20_STATUS\r\n    // TB STATUS\r\n    const TBStatus =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setTbStatus(response.data);\r\n            //actualTbSTatus=response.data\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n    }\r\n\r\n    const handleInputChange = e => {\r\n      props.setErrors({...props.errors, [e.target.name]: \"\"})\r\n        if(e.target.name ===\"antiTBDrug\" && e.target.value!==\"\"){\r\n          if(e.target.value===\"NO\" && (props.tbObj.currentOnIpt ===\"\" || props.tbObj.currentOnIpt ===null)){\r\n            props.tbObj.tbStatusId=\"\"\r\n          }else if(e.target.value===\"YES\"){\r\n            props.tbObj.tbStatusId=70\r\n          }\r\n        }\r\n        props.setTbObj ({...props.tbObj,  [e.target.name]: e.target.value});\r\n      }\r\n    //console.log(props.errors)\r\n\r\n  return (\r\n    <div>\r\n       <div className=\"row\">\r\n          \r\n          <div className=\"form-group mb-3 col-md-6\">\r\n          <FormGroup>\r\n              <Label >Patient on Anti TB Drugs?</Label>\r\n              <Input\r\n                  type=\"select\"\r\n                  name=\"antiTBDrug\"\r\n                  id=\"antiTBDrug\"\r\n                  value={props.tbObj.antiTBDrug}\r\n                  onChange={handleInputChange}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"YES\"> YES</option>\r\n                    <option value=\"NO\">NO </option>\r\n\r\n              </Input>\r\n              \r\n            </FormGroup>\r\n            {props.errors.antiTBDrug !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.antiTBDrug}</span>\r\n                  ) : \"\" }\r\n          </div>\r\n          {props.tbObj.antiTBDrug==='NO' && (\r\n            <>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label >Patient Currently on IPT?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"currentOnIpt\"\r\n                    id=\"currentOnIpt\"\r\n                    value={props.tbObj.currentOnIpt}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                        <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.currentOnIpt !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.currentOnIpt}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >coughing?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"coughing\"\r\n                    id=\"coughing\"\r\n                    value={props.tbObj.coughing}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.coughing !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.coughing}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Night Sweat?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"nightSweat\"\r\n                    id=\"nightSweat\"\r\n                    value={props.tbObj.nightSweat}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.nightSweat !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.nightSweat}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Fever</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"fever\"\r\n                    id=\"fever\"\r\n                    value={props.tbObj.fever}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.fever !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.fever}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Contact with TB Case?</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"contactWithTBCase\"\r\n                    id=\"contactWithTBCase\"\r\n                    value={props.tbObj.contactWithTBCase}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\"> Select</option>\r\n                      <option value=\"YES\"> YES</option>\r\n                      <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.contactWithTBCase !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.contactWithTBCase}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n              <FormGroup>\r\n                <Label >Lethergy</Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"lethergy\"\r\n                    id=\"lethergy\"\r\n                    value={props.tbObj.lethergy}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      <option value=\"YES\"> YES</option>\r\n                    <option value=\"NO\">NO </option>\r\n                </Input>\r\n              </FormGroup>\r\n              {props.errors.lethergy !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.lethergy}</span>\r\n                  ) : \"\" }\r\n              </div>\r\n\r\n          </>\r\n          )}\r\n           <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label >TB Status</Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"tbStatusId\"\r\n                        id=\"tbStatusId\"\r\n                        value={props.tbObj.tbStatusId}\r\n                        onChange={handleInputChange}\r\n                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                        disabled={props.tbObj.tbStatusId===67 ? false :true }\r\n                        >\r\n                          <option value=\"\"></option>\r\n                          {props.tbObj.tbStatusId===67 ? (\r\n                            <>\r\n                            {tbStatus.filter((x)=> (x.id===67 || x.id===633)).map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                            </>\r\n                            )\r\n                              : \r\n                           (\r\n                            <>\r\n                              <option value=\"\"></option>\r\n                              {tbStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                              ))}\r\n                            </> \r\n                            )\r\n                        }\r\n                    </Input>\r\n                  </FormGroup>\r\n                  {props.errors.tbStatusId !==\"\" ? (\r\n                      <span className={classes.error}>{props.errors.tbStatusId}</span>\r\n                  ) : \"\" }\r\n                  </div>\r\n        </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\n\r\n\r\nexport default TBScreeningForm;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Consultation\\ViewUpdate\\OpportunisticInfection\\Index.js",["1560","1561"],"import React, { useState, useEffect } from \"react\";\r\nimport {  Table  } from \"react-bootstrap\";\r\nimport { Input, Label, FormGroup, } from \"reactstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from \"moment\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl,token } from \"./../../../../../api\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}))\r\n\r\nconst ADR = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const classes = useStyles()\r\n  let temp = { ...errors }\r\n  const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    PrepSideEffect();\r\n  }, []);\r\n  const handleInfectionInputChange = e => {\r\n  props.setInfection ({...props.infection,  [e.target.name]: e.target.value});\r\n  }\r\n\r\n  const PrepSideEffect =()=>{\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/OPPORTUNISTIC_INFECTION_ILLNESS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPrepSideEffect(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });\r\n    \r\n  }\r\n  //Validations of the forms\r\n  const validate = () => {        \r\n    temp.ondateInfection = props.infection.ondateInfection ? \"\" : \"This field is required\"\r\n    temp.illnessInfection = props.infection.illnessInfection ? \"\" : \"This field is required\"\r\n\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n    const addInfection = e => { \r\n      if(validate()){\r\n        props.setInfectionList([...props.infectionList, props.infection])\r\n        props.setInfection({ illnessInfection: \"\", ondateInfection: \"\" });\r\n      }else{\r\n        toast.error(\" Field are required \");\r\n      }\r\n    \r\n    }\r\n    /* Remove ADR  function **/\r\n    const removeInfection = index => {       \r\n    props.infectionList.splice(index, 1);\r\n    props.setInfectionList([...props.infectionList]);\r\n        \r\n    };\r\n                                            \r\n\r\n  return (\r\n    <div>\r\n       <div className=\"row\">\r\n       {props.enableUpdate && (\r\n        <>\r\n          <div className=\"form-group mb-3 col-md-5\">\r\n              <FormGroup>\r\n              <Label >Onset Date </Label>\r\n              <Input\r\n                  type=\"date\"\r\n                  name=\"ondateInfection\"\r\n                  id=\"ondateInfection\"\r\n                  value={props.infection.ondateInfection}\r\n                  onChange={handleInfectionInputChange}\r\n                  max={props.encounterDate}\r\n                  style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                  required\r\n                  > \r\n              </Input>\r\n              {errors.ondateInfection !==\"\" ? (\r\n                  <span className={classes.error}>{errors.ondateInfection}</span>\r\n              ) : \"\" }\r\n              </FormGroup>\r\n          </div>\r\n          <div className=\"form-group mb-3 col-md-5\">        \r\n          <FormGroup>\r\n              <Label > Illness</Label>\r\n              <Input\r\n                type=\"select\"\r\n                name=\"illnessInfection\"\r\n                id=\"illnessInfection\"\r\n                value={props.infection.illnessInfection}\r\n                onChange={handleInfectionInputChange}\r\n                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                required\r\n                >\r\n                  <option value=\"\"> Select</option>\r\n                    {prepSideEffect.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                        </option>\r\n                    ))} \r\n            </Input>\r\n              {errors.illnessInfection !==\"\" ? (\r\n                  <span className={classes.error}>{errors.illnessInfection}</span>\r\n              ) : \"\" }\r\n              </FormGroup>\r\n          </div>\r\n          <div className=\"form-group mb-3 col-md-2\">\r\n          <LabelSui as='a' color='black'  onClick={addInfection}  size='tiny' style={{ marginTop:35}}>\r\n              <Icon name='plus' /> Add\r\n          </LabelSui>\r\n          </div>\r\n        </>\r\n        )}\r\n        {props.infectionList.length >0 \r\n          ?\r\n            <List>\r\n            <div style={{padding:'3px 0px'}} >\r\n            <Table  striped responsive size=\"sm\" >\r\n                  <thead  >\r\n                      <tr >\r\n                          <th>Illness</th>\r\n                          <th>OnSetDate</th>\r\n                          <th ></th>\r\n                      </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                {props.infectionList.map((relative, index) => (\r\n\r\n                  <InfectionList\r\n                      key={index}\r\n                      index={index}\r\n                      relative={relative}\r\n                      removeInfection={removeInfection}\r\n                  />\r\n                  ))}\r\n                  </tbody>\r\n                  </Table>\r\n                  </div>\r\n                </List>\r\n                :\r\n                \"\"\r\n            } \r\n    </div>\r\n    </div>\r\n     \r\n  );\r\n};\r\n\r\nfunction InfectionList({\r\n    relative,\r\n    index,\r\n    removeInfection,\r\n  }) {\r\n  \r\n   \r\n    return (\r\n            <tr>\r\n  \r\n                <th>{relative.illnessInfection}</th>\r\n                <th>{relative.ondateInfection}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeInfection(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default ADR;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Patient\\ArtPatients.js",["1562","1563","1564","1565"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar }  from 'material-table';\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport {TiArrowForward} from 'react-icons/ti'\r\n\r\n\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\nconst Patients = (props) => {    \r\n    //const [patientList, setPatientList] = useState([])\r\n    const [showPPI, setShowPPI] = useState(true)\r\n    //const [loading, setLoading] = useState(true)\r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setShowPPI(false)\r\n        }else{\r\n            setShowPPI(true)\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div>\r\n                \r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                title= \"ART Patients\" \r\n                columns={[\r\n                // { title: \" ID\", field: \"Id\" },\r\n                    {\r\n                    title: \"Patient Name\",\r\n                    field: \"name\",\r\n                    hidden:showPPI\r\n                    },\r\n                    { title: \"Unique ID\", field: \"uniqueId\", filtering: false },\r\n                    { title: \"Sex\", field: \"sex\", filtering: false },\r\n                    { title: \"Age\", field: \"age\", filtering: false },\r\n                    //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n                    //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n                    { title: \"ART Status\", field: \"status\", filtering: false },\r\n                    { title: \"Actions\", field: \"actions\", filtering: false }, \r\n                ]}\r\n\r\n                data={query =>\r\n                    new Promise((resolve, reject) =>\r\n                        axios.get(`${baseUrl}hiv/patient/enrollment/list?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n                            .then(response => response)\r\n                            .then(result => {\r\n                                //console.log(result.data.records.filter(x=> x.currentStatus=== \"Not Enrolled\" ))\r\n                                resolve({\r\n                                    data: result.data.records.map((row) =>   ({\r\n                                    name:row.currentStatus!== \"Not Enrolled\" ?\r\n                                        (\r\n                                        <>\r\n                                            <Link\r\n                                            to ={{\r\n                                                pathname: \"/patient-history\",\r\n                                                state: { patientObj: row  }\r\n                                            }}\r\n\r\n                                            title={\"Click to view patient dashboard\"}\r\n                                            > {row.firstName + \" \" + row.surname}\r\n                                            </Link>\r\n                                            </>\r\n                                        ):\r\n                                        (\r\n                                            <>\r\n                                            <Link\r\n                                                to={{\r\n                                                    pathname: \"/enroll-patient\",\r\n                                                    state: { patientId : row.id, patientObj: row }\r\n                                                }}\r\n                \r\n                                            title={\"Enroll Patient\"}\r\n                                            > {row.firstName + \" \" + row.surname}\r\n                                            </Link>\r\n                                            </>\r\n                                        ),\r\n                                    uniqueId: row.uniqueId,\r\n                                    sex: row.sex,\r\n                                    age: row.age,\r\n                                    \r\n                                    status: (<Label color=\"blue\" size=\"mini\">{row.currentStatus}</Label>),                           \r\n                                    actions:\r\n                                    <div>\r\n\r\n                                                {row.currentStatus!== \"Not Enrolled\" ?\r\n                                                    (\r\n                                                        <>\r\n                                                            <Link\r\n                                                                to={{\r\n                                                                    pathname: \"/patient-history\",\r\n                                                                    state: { patientObj: row  }\r\n                                                                }}\r\n                                                            >\r\n                                                                <ButtonGroup variant=\"contained\" \r\n                                                                    aria-label=\"split button\"\r\n                                                                    style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'215px'}}\r\n                                                                    size=\"large\"\r\n                                                                >\r\n                                                                <Button\r\n                                                                color=\"primary\"\r\n                                                                size=\"small\"\r\n                                                                aria-label=\"select merge strategy\"\r\n                                                                aria-haspopup=\"menu\"\r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                                >\r\n                                                                    <MdDashboard />\r\n                                                                </Button>\r\n                                                                <Button \r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                                >\r\n                                                                    <span style={{fontSize:'12px', color:'#fff', fontWeight:'bolder'}}>Patient Dashboard</span>\r\n                                                                </Button>\r\n                                                                \r\n                                                                </ButtonGroup>\r\n                                                            </Link>\r\n                                                        </>\r\n                                                    )\r\n                                                    :\r\n                                                    (\r\n                                                        <>\r\n                                                            <Link\r\n                                                                to={{\r\n                                                                    pathname: \"/enroll-patient\",\r\n                                                                    state: { patientId : row.id, patientObj: row }\r\n                                                                }}\r\n                                                            >\r\n                                                                <ButtonGroup variant=\"contained\" \r\n                                                                    aria-label=\"split button\"\r\n                                                                    style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'215px'}}\r\n                                                                    size=\"large\"\r\n                                                                >\r\n                                                                <Button\r\n                                                                color=\"primary\"\r\n                                                                size=\"small\"\r\n                                                                aria-label=\"select merge strategy\"\r\n                                                                aria-haspopup=\"menu\"\r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                                >\r\n                                                                    <TiArrowForward />\r\n                                                                </Button>\r\n                                                                <Button \r\n                                                                style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                                                                >\r\n                                                                    <span style={{fontSize:'12px', color:'#fff', fontWeight:'bolder'}}>Enroll Patient</span>\r\n                                                                </Button>\r\n                                                                \r\n                                                                </ButtonGroup>\r\n                                                            </Link>\r\n                                                        </>\r\n                                                    )\r\n\r\n                                                }\r\n                                    </div>\r\n                                        })),\r\n                                    page: query.page,\r\n                                    totalCount: result.data.totalRecords,\r\n                                    \r\n                                })\r\n                            })\r\n                            \r\n                    )}\r\n                    options={{\r\n                        search: true,\r\n                        headerStyle: {\r\n                            backgroundColor: \"#014d88\",\r\n                            color: \"#fff\",\r\n                        },\r\n                        searchFieldStyle: {\r\n                            width : '200%',\r\n                            margingLeft: '250px',\r\n                        },\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        searchFieldAlignment: 'left',\r\n                        pageSizeOptions:[10,20,100],\r\n                        pageSize:10,\r\n                        debounceInterval: 400\r\n                    }}\r\n                    components={{\r\n                        Toolbar: props => (\r\n                        <div >\r\n                            <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                                <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"                       \r\n                                name=\"showPP!\"\r\n                                id=\"showPP\"\r\n                                value=\"showPP\"\r\n                                checked={showPPI===true? false : true}\r\n                                onChange={handleCheckBox}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                />\r\n                                <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"basic_checkbox_1\"\r\n                                >\r\n                                <b style={{color:'#014d88',fontWeight:'bold'}}>SHOW PII</b>\r\n                                </label>\r\n                            </div>\r\n                            <MTableToolbar {...props} />\r\n                        </div>\r\n                        ),\r\n                    }}\r\n            />\r\n       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Tb.js",["1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, } from \"@material-ui/core\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        },\n        \n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst TbScreening = (props) => {\n    const classes = useStyles();\n    const [contraindicationDisplay, setcontraindicationDisplay]=useState(false)\n    const [tbTreatmentType, setTbTreatmentType]= useState([])\n    const [tbTreatmentOutCome, setTbTreatmentOutCome]= useState([])\n    useEffect(() => {\n        //End of Eligible for TPT logic\n        if(props.tbObj.currentlyOnTuberculosis!==\"\" && props.tbObj.currentlyOnTuberculosis===\"No\"){\n            props.tbObj.eligibleForTPT=\"No\"\n        }else if(props.tbObj.currentlyOnTuberculosis!==\"\" && props.tbObj.currentlyOnTuberculosis===\"Yes\"){\n            //props.tbObj.eligibleForTPT=\"No\"\n            props.setTbObj({...props.tbObj, ['eligibleForTPT']: \"No\"})\n        }else{\n            props.tbObj.eligibleForTPT=\"\"\n        }\n        //End of Eligible for TPT logic\n        // Start of contraindications logic \n        if((props.tbObj.priorInh!==\"\" && props.tbObj.priorInh===true )\n         || (props.tbObj.highAlcohol!==\"\" && props.tbObj.highAlcohol===true) \n         || (props.tbObj.activeHepatitis!==\"\" && props.tbObj.activeHepatitis===true)\n         || (props.tbObj.age1year!==\"\" && props.tbObj.age1year===true)\n         || (props.tbObj.poorTreatmentAdherence!==\"\" && props.tbObj.poorTreatmentAdherence===true)\n         || (props.tbObj.abnormalChest!==\"\" && props.tbObj.abnormalChest===true)\n         || (props.tbObj.activeTb!==\"\" && props.tbObj.activeTb===true))\n         {\n            props.tbObj.contraindications=\"Yes\"\n            //props.setTbObj({...props.tbObj, ['contraindications']: \"Yes\"})\n        }else if((props.tbObj.priorInh!==\"\" && props.tbObj.priorInh===false )\n        && (props.tbObj.highAlcohol!==\"\" && props.tbObj.highAlcohol===false) \n        && (props.tbObj.activeHepatitis!==\"\" && props.tbObj.activeHepatitis===false)\n        && (props.tbObj.age1year!==\"\" && props.tbObj.age1year===false)\n        && (props.tbObj.poorTreatmentAdherence!==\"\" && props.tbObj.poorTreatmentAdherence===false)\n        && (props.tbObj.abnormalChest!==\"\" && props.tbObj.abnormalChest===false)\n        && (props.tbObj.activeTb!==\"\" && props.tbObj.activeTb===false)){\n            props.tbObj.contraindications=\"No\"\n            //props.setTbObj({...props.tbObj, ['contraindications']: \"No\"})\n        }\n        //End of contraindications logic\n\n        // Start of Outcome logic \n        if(   props.tbObj.coughing===\"Yes\" \n            || props.tbObj.fever===\"Yes\" \n            ||  props.tbObj.losingWeight===\"Yes\" \n            ||  props.tbObj.nightSweats===\"Yes\"\n            ||  props.tbObj.poorWeightGain===\"Yes\"\n            ||  props.tbObj.historyWithAdults===\"Yes\"\n          )\n         {\n            //props.tbObj.outcome=\"Presumptive TB case (TB suspect)\"\n            //props.tbObj.eligibleForTPT=\"No\"\n            setcontraindicationDisplay(false)\n            props.setTbObj({...props.tbObj, ['outcome']: \"Presumptive TB case (TB suspect)\"})\n            props.tbObj.eligibleForTPT=\"No\"\n            \n            //props.setTbObj({...props.tbObj, ['eligibleForTPT']: \"No\"})\n            //console.log(\"last yes\")\n        }else if(  props.tbObj.coughing===\"No\" \n                &&  props.tbObj.fever===\"No\"\n                &&  props.tbObj.losingWeight===\"No\"\n                &&  props.tbObj.nightSweats===\"No\"\n                &&  props.tbObj.poorWeightGain===\"No\"\n                &&  props.tbObj.historyWithAdults===\"No\"){\n                    //The logic \n                    //props.tbObj.outcome=\"No TB sign (not a suspect)\"\n                    setcontraindicationDisplay(true)\n                    props.setTbObj({...props.tbObj, ['outcome']: \"No TB sign (not a suspect)\"})\n                    //setcontraindicationDisplay(true)\n                    //props.tbObj.eligibleForTPT=\"No\"\n        }\n        if(\n                    props.tbObj.tbTreatment===\"No\"\n                &&  props.tbObj.currentlyOnTuberculosis===\"No\"\n\n                &&  props.tbObj.coughing===\"No\" \n                &&  props.tbObj.fever===\"No\"\n                &&  props.tbObj.losingWeight===\"No\"\n                &&  props.tbObj.nightSweats===\"No\"\n                &&  props.tbObj.poorWeightGain===\"No\"\n                &&  props.tbObj.historyWithAdults===\"No\"\n                \n                &&  props.tbObj.priorInh===false \n                &&  props.tbObj.highAlcohol===false\n                && props.tbObj.activeHepatitis===false\n                &&  props.tbObj.age1year===false\n                &&  props.tbObj.abnormalChest===false\n                &&  props.tbObj.abnormalChest===false\n                &&  props.tbObj.poorTreatmentAdherence===false\n\n                ){\n                props.setTbObj({...props.tbObj, ['eligibleForTPT']: \"Yes\"})\n                //props.tbObj.eligibleForTPT=\"Yes\"\n            }else if(props.tbObj.currentlyOnTuberculosis===\"No\" && props.tbObj.tbTreatment===\"Yes\"){\n                props.setTbObj({...props.tbObj, ['outcome']: \"TB/HIV co-infected\"})\n            }else{\n\n            }\n            //End of Outcome logic\n\n        }, [props.tbObj.priorInh,props.tbObj.highAlcohol,props.tbObj.activeHepatitis,props.tbObj.age1year,props.tbObj.poorTreatmentAdherence,props.tbObj.abnormalChest,props.tbObj.activeTb,props.tbObj.contraindications,\n            props.tbObj.coughing, \n            props.tbObj.fever, \n            props.tbObj.losingWeight, \n            props.tbObj.nightSweats, \n            props.tbObj.poorWeightGain, \n            props.tbObj.historyWithAdults,\n            props.tbObj.outcome,\n            props.tbObj.eligibleForTPT,\n            props.tbObj.currentlyOnTuberculosis\n    ]);\n    useEffect(() => {\n        TB_TREATMENT_OUTCOME();\n        TB_TREATMENT_TYPE();\n    }, []);\n    const TB_TREATMENT_TYPE =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/TB_TREATMENT_TYPE`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setTbTreatmentType(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const TB_TREATMENT_OUTCOME =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/TB_TREATMENT_OUTCOME`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setTbTreatmentOutCome(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n    }\n    const handleInputChange =e =>{\n        props.setTbObj({...props.tbObj, [e.target.name]: e.target.value})\n        \n        //making some fields to be empty once the selection logic is apply(skip logic) \n        if(e.target.name==='currentlyOnTuberculosis' && e.target.value==='Yes'){\n            props.tbObj.tbTreatment=\"\"\n            props.tbObj.tbTreatmentStartDate=\"\"\n            props.setTbObj({...props.tbObj, ['tbTreatment']: ''})\n            props.setTbObj({...props.tbObj, ['tbTreatmentStartDate']: ''})\n            props.setTbObj({...props.tbObj, [e.target.name]: e.target.value})\n        }\n        if(e.target.name==='currentlyOnTuberculosis' && e.target.value==='No'){\n            props.tbObj.coughing=\"\" \n            props.tbObj.fever=\"\"\n            props.tbObj.losingWeight=\"\"\n            props.tbObj.nightSweats=\"\"\n            props.tbObj.poorWeightGain=\"\"\n            props.tbObj.historyWithAdults=\"\"\n            props.setTbObj({...props.tbObj, ['coughing']: \"\"})\n            props.setTbObj({...props.tbObj, ['fever']: ''})\n            props.setTbObj({...props.tbObj, ['losingWeight']: ''})\n            props.setTbObj({...props.tbObj, ['nightSweats']: ''})\n            props.setTbObj({...props.tbObj, ['poorWeightGain']: ''})\n            props.setTbObj({...props.tbObj, ['historyWithAdults']: ''})\n            props.setTbObj({...props.tbObj, [e.target.name]: e.target.value})\n        }\n        if(e.target.name==='tbTreatment' && e.target.value==='Yes'){\n            props.tbObj.tbTreatmentStartDate=\"\"\n            setcontraindicationDisplay(true)\n            props.tbObj.coughing=\"\" \n            props.tbObj.fever=\"\"\n            props.tbObj.losingWeight=\"\"\n            props.tbObj.nightSweats=\"\"\n            props.tbObj.poorWeightGain=\"\"\n            props.tbObj.historyWithAdults=\"\"\n            props.setTbObj({...props.tbObj, ['coughing']: \"\"})\n            props.setTbObj({...props.tbObj, ['fever']: ''})\n            props.setTbObj({...props.tbObj, ['losingWeight']: ''})\n            props.setTbObj({...props.tbObj, ['nightSweats']: ''})\n            props.setTbObj({...props.tbObj, ['poorWeightGain']: ''})\n            props.setTbObj({...props.tbObj, ['historyWithAdults']: ''})\n            props.setTbObj({...props.tbObj, [e.target.name]: e.target.value})\n           \n        }\n        if(e.target.name==='tbTreatment' && e.target.value==='No'){\n\n            props.tbObj.tbTreatmentStartDate=\"\"\n            props.tbObj.treatementType=\"\" \n            props.tbObj.treatmentOutcome=\"\"\n            props.tbObj.completionDate=\"\"\n            props.setTbObj({...props.tbObj, ['tbTreatmentStartDate']: \"\"})\n            props.setTbObj({...props.tbObj, ['treatementType']: ''})\n            props.setTbObj({...props.tbObj, ['treatmentOutcome']: ''})\n            props.setTbObj({...props.tbObj, ['completionDate']: ''})\n            props.setTbObj({...props.tbObj, [e.target.name]: e.target.value})\n           \n        }\n        \n        \n    }\n\n    const handleInputChangeContrain =e =>{\n       if(e.target.checked){ \n        props.setTbObj({...props.tbObj, [e.target.name]: e.target.checked})\n        }else{\n            props.setTbObj({...props.tbObj, [e.target.name]: false})\n        }\n\n    }\n\n\n    return (\n        <>  \n        \n            <Card className={classes.root}>\n                <CardBody>   \n                <h2 style={{color:'#000'}}>TB & IPT Screening </h2>\n                <br/>\n                    <form >\n     \n                    <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Are you currently on Tuberculosis Preventive Therapy ( TPT )</Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"currentlyOnTuberculosis\"\n                                        id=\"currentlyOnTuberculosis\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.currentlyOnTuberculosis} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    \n                                    </Input>\n                                </InputGroup>                    \n                                </FormGroup>\n                        </div>\n                        {(props.tbObj.currentlyOnTuberculosis!=='' && props.tbObj.currentlyOnTuberculosis==='No' ) && (\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Are you currently on TB treatment?</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"select\"\n                                    name=\"tbTreatment\"\n                                    id=\"tbTreatment\"\n                                    onChange={handleInputChange} \n                                    value={props.tbObj.tbTreatment} \n\n                                >\n                                <option value=\"\">Select</option>\n                                <option value=\"Yes\">Yes</option>\n                                <option value=\"No\">No</option>\n                                </Input>\n                            </InputGroup>\n                            </FormGroup>\n                        </div> \n                        )}\n                        {(props.tbObj.tbTreatment!=='' && props.tbObj.tbTreatment==='Yes') && (\n                        <>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >TB treatment start date </Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"date\"\n                                    name=\"tbTreatmentStartDate\"\n                                    id=\"tbTreatmentStartDate\"\n                                    onChange={handleInputChange} \n                                    value={props.tbObj.tbTreatmentStartDate} \n                                    min={props.encounterDate}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                >\n                                \n                                </Input>\n                            </InputGroup>\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Treatment Type </Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"select\"\n                                    name=\"treatementType\"\n                                    id=\"treatementType\"\n                                    onChange={handleInputChange} \n                                    value={props.tbObj.treatementType} \n                                >\n                                    <option value=\"\">Select</option>\n                                    {tbTreatmentType.map((value) => (\n                                        <option key={value.id} value={value.display}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </Input>\n                            </InputGroup>\n                            </FormGroup>\n                        </div> \n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Treatment Outcome </Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"select\"\n                                    name=\"treatmentOutcome\"\n                                    id=\"treatmentOutcome\"\n                                    onChange={handleInputChange} \n                                    value={props.tbObj.treatmentOutcome} \n                                >\n                                    <option value=\"\">Select</option>\n                                    {tbTreatmentOutCome.map((value) => (\n                                        <option key={value.id} value={value.display}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </Input>\n                            </InputGroup>\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Completion Date </Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"date\"\n                                    name=\"completionDate\"\n                                    id=\"completionDate\"\n                                    onChange={handleInputChange} \n                                    value={props.tbObj.completionDate} \n                                    min={props.encounterDate}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                >\n                                \n                                </Input>\n                            </InputGroup>\n                            </FormGroup>\n                        </div>\n                        </>\n                         )}\n                        {(props.tbObj.currentlyOnTuberculosis==='Yes' || props.tbObj.tbTreatment==='No') && (\n                        <>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Are you coughing currently? </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"coughing\"\n                                        id=\"coughing\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.coughing} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Do you have fever for 2 weeks or more? (Unexplained fever) </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"fever\"\n                                        id=\"fever\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.fever} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Are you losing weight? (Unplanned weight loss)</Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"losingWeight\"\n                                        id=\"losingWeight\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.losingWeight} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Are you having night sweats? (drenching or excessive night sweats)</Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"nightSweats\"\n                                        id=\"nightSweats\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.nightSweats} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Poor weight gain (Paediatrics clients {\"<\"}12 months) </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"poorWeightGain\"\n                                        id=\"poorWeightGain\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.poorWeightGain} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >History of contacts with adults with TB (Paediatrics clients {\"<\"} months) </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"select\"\n                                        name=\"historyWithAdults\"\n                                        id=\"historyWithAdults\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.historyWithAdults} \n                                    >\n                                    <option value=\"\">Select</option>\n                                    <option value=\"Yes\">Yes</option>\n                                    <option value=\"No\">No</option>\n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div> \n                        </>)}\n                        <br/>\n                        { (contraindicationDisplay===true) && (<>\n                        <hr/>\n\n                        <h3>Contraindications for TPT</h3>\n                        {(props.tbObj.currentlyOnTuberculosis==='Yes' || props.tbObj.tbTreatment==='No') && (\n                        <>\n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"activeTb\"\n                                    id=\"activeTb\"\n                                    value={props.tbObj.activeTb}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    Active TB\n                                    </label>\n                                </div>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"abnormalChest\"\n                                    id=\"abnormalChest\"\n                                    value={props.tbObj.abnormalChest}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    Abnormal Chest X-Ray\n                                    </label>\n                                </div>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"poorTreatmentAdherence\"\n                                    id=\"poorTreatmentAdherence\"\n                                    value={props.tbObj.poorTreatmentAdherence}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    History of poor treatment adherence\n                                    </label>\n                                </div>\n                        </div> \n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"age1year\"\n                                    id=\"age1year\"\n                                    value={props.tbObj.age1year}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    Age  {\"<\"}1 year without history of close contact with TB patient \n                                    </label>\n                                </div>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"activeHepatitis\"\n                                    id=\"activeHepatitis\"\n                                    value={props.tbObj.activeHepatitis}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    Active hepatitis (clinical or lab)\n                                    </label>\n                                </div>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"highAlcohol\"\n                                    id=\"highAlcohol\"\n                                    value={props.tbObj.highAlcohol}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    High alcohol consumption\n                                    </label>\n                                </div>\n                        </div> \n                        <div className=\"form-group mb-3 col-md-12\">                                    \n                                <div className=\"form-check custom-checkbox ml-1 \">\n                                    <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"                           \n                                    name=\"priorInh\"\n                                    id=\"priorInh\"\n                                    value={props.tbObj.priorInh}\n                                    onChange={handleInputChangeContrain}\n                                    />\n                                    <label\n                                    className=\"form-check-label\"\n                                    htmlFor=\"basic_checkbox_1\"\n                                    >\n                                    Prior allergy to INH\n                                    </label>\n                                </div>\n                        </div>\n                        </>\n                        )}\n                            <h4>Result :{props.tbObj.contraindications} </h4>\n                        </>\n                         )}\n                        <hr/>\n                        <br/>\n                        <h2>Outcome :{props.tbObj.outcome}</h2>\n                        <br/>\n                        <h2>Eligible for IPT :{props.tbObj.eligibleForTPT}</h2>\n                        {props.tbObj.eligibleForTPT===\"Yes\" && (\n                        <>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Date TPT start </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"date\"\n                                        name=\"dateTPTStart\"\n                                        id=\"dateTPTStart\"\n                                        onChange={handleInputChange}\n                                        min={props.encounterDate}\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") } \n                                        value={props.tbObj.dateTPTStart} \n                                    >\n                                    \n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >Weight at start of TPT</Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"text\"\n                                        name=\"weightAtStartTPT\"\n                                        id=\"weightAtStartTPT\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.weightAtStartTPT} \n                                    >\n                                    \n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >INH daily dose  </Label>\n                                <InputGroup> \n                                    <Input \n                                        type=\"text\"\n                                        name=\"inhDailyDose\"\n                                        id=\"inhDailyDose\"\n                                        onChange={handleInputChange} \n                                        value={props.tbObj.inhDailyDose} \n                                    >\n                                    \n                                    </Input>\n                                </InputGroup>\n                                </FormGroup>\n                            </div>\n                        </>\n                        )}\n                    </div>\n                    \n                    \n                    </form>\n                    \n                </CardBody>\n            </Card> \n                                     \n        </>\n    );\n};\n\nexport default TbScreening","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\ChronicCare\\Tpt.js",["1595","1596","1597","1598","1599","1600"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form, InputGroup} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, } from \"@material-ui/core\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        },\n        \n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst TPT = (props) => {\n    const classes = useStyles();\n    //const [errors, setErrors] = useState({});\n    const [adherence, setAdherence] = useState([]);\n    useEffect(() => {\n        CLINIC_VISIT_LEVEL_OF_ADHERENCE();\n      }, []);\n        //Get list of CLINIC_VISIT_LEVEL_OF_ADHERENCE\n        const CLINIC_VISIT_LEVEL_OF_ADHERENCE =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/CLINIC_VISIT_LEVEL_OF_ADHERENCE`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setAdherence(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });\n        \n        }\n    //let temp = { ...errors }\n\n    //Handle CheckBox \n    const handleTpt =e =>{\n        props.setErrors({...props.errors, [e.target.name]: \"\"})            \n        props.setTpt({...props.tpt, [e.target.name]: e.target.value})\n        //making the field to be empty once the selection logic is apply(skip logic) \n        if(e.target.name==='outComeOfIpt' && e.target.value===''){\n            props.tpt.date=\" \"\n            props.setTpt({...props.tpt, ['date']: ''})\n            props.setTpt({...props.tpt, [e.target.name]: e.target.value})\n        }\n    }\n\n    return (\n        <>         \n            <Card className={classes.root}>\n            <CardBody>   \n            <h2 style={{color:'#000'}}>TPT Monitoring</h2>\n            <br/>\n                <form >\n    \n                <div className=\"row\">\n                    \n                    <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Weight</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"text\"\n                                    name=\"weight\"\n                                    id=\"weight\"\n                                    onChange={handleTpt} \n                                    value={props.tpt.weight} \n                                ></Input>\n                            </InputGroup>                    \n                            </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >TB Symptoms (cough, fever, night sweats, weight loss,contacts)</Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"tbSymptoms\"\n                                id=\"tbSymptoms\"\n                                onChange={handleTpt} \n                                value={props.tpt.pregnantStatus} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Uncertain\">Uncertain</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div>  \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Hepatitis Symptoms (Abdominal pain, nausea, vomiting, abnormal LFTs, Children: persistent irritability, yellowish\n                        urine and eyes)\n                        </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"hepatitisSymptoms\"\n                                id=\"hepatitisSymptoms\"\n                                onChange={handleTpt} \n                                value={props.tpt.hepatitisSymptoms} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Uncertain\">Uncertain</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div> \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Neurologic Symptoms (Numbness, tingling, paresthesias)\n                        </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"neurologicSymptoms\"\n                                id=\"neurologicSymptoms\"\n                                onChange={handleTpt} \n                                value={props.tpt.neurologicSymptoms} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Uncertain\">Uncertain</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div> \n                    \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Rash </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"rash\"\n                                id=\"rash\"\n                                onChange={handleTpt} \n                                value={props.tpt.rash} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Uncertain\">Uncertain</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Adherence\n                            ( {\">\"} 80% doses = Good\n                            {\"<\"} 80% doses = bad\n                            )\n                        </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"adherence\"\n                                id=\"adherence\"\n                                onChange={handleTpt} \n                                value={props.tpt.adherence} \n                            >\n                            <option value=\"\">Select</option>\n                            {adherence.map((value) => (\n                                    <option key={value.id} value={value.display}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Referred for further services</Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"referredForServices\"\n                                id=\"referredForServices\"\n                                onChange={handleTpt} \n                                value={props.tpt.referredForServices} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Uncertain\">Uncertain</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div> \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Outcome of IPT  \n                        </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"select\"\n                                name=\"outComeOfIpt\"\n                                id=\"outComeOfIpt\"\n                                onChange={handleTpt} \n                                value={props.tpt.outComeOfIpt} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"IPT Completed\">IPT Completed</option>\n                            <option value=\"Developed active TB\">Developed active TB</option>\n                            <option value=\"Died\">Died </option>\n                            <option value=\"Transferred out\">Transferred out </option>\n                            <option value=\"Stopped IPT\">Stopped IPT</option>\n                            <option value=\"Lost to follow up\">Lost to follow up </option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div>\n                    {props.tpt.outComeOfIpt!==\"\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label >Outcome Date </Label>\n                                <InputGroup> \n                                <Input\n                                type=\"date\"\n                                name=\"date\"\n                                id=\"date\"\n                                value={props.tpt.date}\n                                onChange={handleTpt}\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                min={props.encounterDate}\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                \n                                > \n                                \n                            </Input>\n                            \n                        </InputGroup>                                        \n                        </FormGroup> \n                        {props.errors.outcomeDate !==\"\" ? (\n                            <span className={classes.error}>{props.errors.outcomeDate}</span>\n                            ) : \"\" }   \n                    </div>\n                    )} \n                    {props.tpt.outComeOfIpt===\"Stopped IPT\" && (\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Reasons for stopping IPT  \n                        </Label>\n                        <InputGroup> \n                            <Input \n                                type=\"text\"\n                                name=\"resonForStoppingIpt\"\n                                id=\"resonForStoppingIpt\"\n                                onChange={handleTpt} \n                                value={props.tpt.resonForStoppingIpt} \n                            >\n                            <option value=\"\">Select</option>\n                            <option value=\"Developed symptoms of hepatitis\">Developed symptoms of hepatitis</option>\n                            </Input>\n                        </InputGroup>\n                        </FormGroup>\n                    </div>\n                    )} \n                </div>\n                \n                \n                </form>\n                \n            </CardBody>\n            </Card>                             \n        </>\n    );\n};\n\nexport default TPT","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\ServiceForm.js",["1601","1602","1603","1604","1605","1606"],"import React, { useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\n//import Button from \"@material-ui/core/Button\";\r\nimport { Spinner,Form,FormGroup, Label, InputGroup, Input } from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {FaPlus, FaAngleDown} from 'react-icons/fa'\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\nconst ServiceForm = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [saving, setSaving] = useState(false);\r\n    const classes = useStyles();\r\n    const [errors, setErrors] = useState({});\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    let temp = { ...errors }\r\n    const [showEligibility, setShowEligibility] = useState(false);\r\n    const [showNutrition, setShowNutrition] = useState(false);\r\n    const [showGenderBase, setShowGenderBase] = useState(false);\r\n    const [showChronicCondition, setShowChronicCondition] = useState(false);\r\n    const [showPositiveHealth, setShowPositiveHealth] = useState(false);\r\n    const [showReproductive, setShowReproductive] = useState(false);\r\n    const [showTb, setShowTb] = useState(false);//Tpt\r\n    const [showTpt, setShowTpt] = useState(false);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    //GenderBase Object\r\n    const [genderBase, setGenderBase] = useState({partnerEverPhysically:\"\", haveBeenBeaten:\"\", partnerLivelihood:\"\"});\r\n    //Eligibility Object\r\n    const [eligibility, setEligibility] = useState({typeOfClient:\"\", pregnantStatus:\"\", whoStaging:\"\", lastCd4Result:\"\",lastCd4ResultDate:\"\", lastViralLoadResult:\"\", lastViralLoadResultDate:\"\", eligibleForViralLoad:\"\"});\r\n    //Chronic Care Object\r\n    const [chronicConditions, setChronicConditions]= useState({\r\n            diastolic:\"\",\r\n            systolic:\"\",\r\n            pulse:\"\",\r\n            increaseFood:\"\",\r\n            increaseWater:\"\",\r\n            frequencyUrination:\"\",\r\n            hypertensive:\"\",\r\n            firstTimeDiabetic:\"\",\r\n            diabetic:\"\",\r\n            bp:\"\",\r\n            firstTimeHypertensive:\"\"\r\n    })\r\n    //Nutrition Object\r\n    const [nutrition, setNutrition]= useState({\r\n        height:\"\",\r\n        weight:\"\",\r\n        support:\"\",\r\n        education:\"\",\r\n    })\r\n    //Preventive Object\r\n    const [preventive, setPreventive]= useState({\r\n            lastAppointment:\"\",\r\n            medication:\"\",\r\n            cotrimoxazole:\"\",\r\n            parentStatus:\"\",\r\n            condoms:\"\",\r\n            condomCounseling:\"\",\r\n            preventDiseases:\"\",\r\n            alcohol:\"\",\r\n            nutrituional:\"\",\r\n            wash:\" \",\r\n            phdp:\"\"\r\n    })\r\n    //Reproductive Object\r\n    const [reproductive, setReproductive] = useState({cervicalCancer:\"\", pregnantWithinNextYear:\"\",contraceptive:\"\"});\r\n    //TPT object \r\n    const [tpt, setTpt] = useState({ date:null,weight:\"\", referredForServices:\"\", adherence:\"\", rash:\"\", neurologicSymptoms:\"\", hepatitisSymptoms:\"\",tbSymptoms:\"\",resonForStoppingIpt:\"\", outComeOfIpt:\"\"});\r\n    const [tbObj, setTbObj] = useState({//TB and IPT Screening Object\r\n            currentlyOnTuberculosis:\"\", \r\n            tbTreatment:\"\", \r\n            tbTreatmentStartDate:\"\",\r\n            coughing:\"\", \r\n            fever:\"\", \r\n            losingWeight:\"\", \r\n            nightSweats:\"\", \r\n            poorWeightGain:\"\", \r\n            historyWithAdults:\"\",\r\n            outcome:\"\",\r\n            priorInh:false,\r\n            highAlcohol:false,\r\n            activeHepatitis:false,\r\n            age1year:false,\r\n            poorTreatmentAdherence:false,\r\n            abnormalChest: false,\r\n            activeTb:false,\r\n            contraindications :\"\",\r\n            eligibleForTPT:\"\",\r\n            treatementOutcome:\"\",\r\n            treatementType:\"\",\r\n            completionDate:\"\"\r\n    });\r\n    const [observationObj, setObservationObj]=useState({//Predefine object for chronic care DTO \r\n            eligibility:\"\",\r\n            nutrition:\"\",\r\n            genderBase:\"\",\r\n            chronicCondition:\"\",\r\n            positiveHealth:\"\",\r\n            peproductive:\"\",\r\n            tbIptScreening:\"\",\r\n            tptMonitoring:\"\"\r\n    })\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Chronic Care\",\r\n        visitId: null\r\n    })\r\n    useEffect(() => {\r\n        GetChronicCare();\r\n        PatientCurrentObject();\r\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\r\n            setSisabledField(props.activeContent.actionType==='view'?true : false)\r\n        }\r\n    }, [props.activeContent.id]);\r\n    //GET  Patients\r\n    async function PatientCurrentObject() {\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setEnrollDate(response.data.enrollment.dateOfRegistration)\r\n                //setPatientObject(response.data);\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n    const GetChronicCare =()=>{//function to get chronic care data for edit \r\n        axios\r\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {  \r\n                observationObj.eligibility=response.data.eligibility\r\n                observationObj.nutrition=response.data\r\n                observationObj.genderBase=response.data.genderBase\r\n                observationObj.chronicCondition=response.data.chronicConditions\r\n                observationObj.positiveHealth=response.data.positiveHealth\r\n                observationObj.peproductive=response.data.peproductive \r\n                observationObj.tbIptScreening=response.data.tbIptScreening\r\n                observationObj.tptMonitoring=response.data.tptMonitoring\r\n                setObservation(response.data)\r\n                setObservationObj(response.data.data)\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n                setTbObj({...tbObj, ...response.data.data.tbIptScreening})\r\n                setEligibility({...eligibility, ...response.data.data.eligibility})\r\n                setGenderBase({...genderBase, ...response.data.data.genderBase})\r\n                setChronicConditions({...chronicConditions, ...response.data.data.chronicConditions})\r\n                setPreventive({...preventive, ...response.data.data.preventive})\r\n                setReproductive({...reproductive, ...response.data.data.reproductive})\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n           })\r\n           .catch((error) => {\r\n           //console.log(response.data.data);\r\n           });\r\n       \r\n    }\r\n    const handleInputChange = e => {//Handle input fields changes\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObservation ({...observation,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => { \r\n        temp.dateOfObservation = observation.dateOfObservation ? \"\" : \"This field is required\"\r\n        tpt.outComeOfIpt!==\"\" && (temp.outcomeDate = tpt.date ? \"\" : \"This field is required\")\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        setSaving(true);\r\n        observation.personId =patientObj.id\r\n        observationObj.eligibility=eligibility\r\n        observationObj.nutrition=\r\n        observationObj.genderBase=genderBase\r\n        observationObj.chronicCondition=chronicConditions\r\n        observationObj.positiveHealth=preventive\r\n        observationObj.peproductive=reproductive \r\n        observationObj.tbIptScreening=tbObj\r\n        observationObj.tptMonitoring=tpt\r\n        observation.data =observationObj        \r\n        if(validate()){\r\n            if(props.activeContent && props.activeContent.actionType===\"update\"){//Perform operation for updation action)\r\n                axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }else{\r\n                axios.post(`${baseUrl}observation`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }else{\r\n            toast.error(\"All fields are required\", {position: toast.POSITION.BOTTOM_CENTER})\r\n            setSaving(false); \r\n        }\r\n    }\r\n    \r\n    //console.log(eligibility)\r\n    const onClickEligibility =() =>{\r\n        setShowEligibility(!showEligibility)\r\n    }\r\n    const onClickTb =() =>{\r\n        setShowTb(!showTb)\r\n    }\r\n    const onClickNutrition =() =>{\r\n        setShowNutrition(!showNutrition)\r\n    }\r\n    const onClickGenderBase =() =>{\r\n        setShowGenderBase(!showGenderBase)\r\n    }\r\n    const onClickChronicCondition =() =>{\r\n        setShowChronicCondition(!showChronicCondition)\r\n    }\r\n    const onClickPositiveHealth =() =>{\r\n        setShowPositiveHealth(!showPositiveHealth)\r\n    }\r\n    const onClickReproductive =() =>{\r\n        setShowReproductive(!showReproductive)\r\n    }\r\n    const onClickTpt =() =>{\r\n        setShowTpt(!showTpt)\r\n    }\r\n\r\n    const handleCancel =()=>{\r\n        //history.push({ pathname: '/' });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h2> OTZ Service Form</h2></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    \r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Visit Date *</Label>\r\n                                     \r\n                                    <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                    </Input>                                   \r\n                                    </FormGroup>\r\n                                    {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                    ) : \"\" }   \r\n                                </div>\r\n                            </div>\r\n                            {/* Eligibility Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Eligibility Assessment</h5>\r\n                                    {showEligibility===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showEligibility && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Eligibility Assessment */}\r\n                            {/* TB & IPT  Screening  */}\r\n                            <div className=\"card\">\r\n                                \r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TB & IPT Screening </h5>\r\n                                    {showTb===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTb && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TB & IPT  Screening  */}\r\n                             {/* TPT MONITORING */}\r\n                             <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TPT Monitoring</h5>\r\n                                    {showTpt===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTpt && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TPT MONITORING */}\r\n                            {/* End Nutritional Status Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Nutritional Status Assessment</h5>\r\n                                    {showNutrition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showNutrition && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Nutritional Status Assessment */}\r\n                            {/* Gender Based Violence Screening */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Gender Based Violence Screening </h5>\r\n                                    {showGenderBase===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showGenderBase && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <>Form will be here</>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Gender Based Violence Screening */}\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Screening for Chronic Conditions</h5>\r\n                                    {showChronicCondition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showChronicCondition && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <ChronicConditions chronicConditions={chronicConditions} setChronicConditions={setChronicConditions} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            {/* Positive Health Dignity and Prevention */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Positive Health Dignity and Prevention(PHDP) </h5>\r\n                                    {showPositiveHealth===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showPositiveHealth && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <PositiveHealthDignity preventive={preventive} setPreventive={setPreventive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Positive Health Dignity and Prevention */} \r\n                            {/* Reproductive Intentions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Reproductive Intentions </h5>\r\n                                    {showReproductive===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showReproductive && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {/* <ReproductiveIntentions setReproductive={setReproductive} reproductive={reproductive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Reproductive Intentions */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n                            {props.activeContent && props.activeContent.actionType? (<>\r\n                                <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                hidden={disabledField}\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{backgroundColor:\"#014d88\"}}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                                >\r\n                                    {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                    ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                    )}\r\n                                </MatButton>\r\n                            </>):(<>\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    style={{backgroundColor:\"#014d88\"}}\r\n                                    onClick={handleSubmit}\r\n                                    disabled={saving}\r\n                                    >\r\n                                        {!saving ? (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                            </MatButton>\r\n                            </>)}\r\n                            \r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n \r\n        </>\r\n    );\r\n};\r\n\r\nexport default ServiceForm","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\PeadiatricDisclosureChecklist.js",["1607","1608","1609","1610","1611","1612"],"import React, { useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\n//import Button from \"@material-ui/core/Button\";\r\nimport { Spinner,Form,FormGroup, Label, InputGroup, Input } from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {FaPlus, FaAngleDown} from 'react-icons/fa'\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\nconst PeadiatricDisclosureChecklist = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [saving, setSaving] = useState(false);\r\n    const classes = useStyles();\r\n    const [errors, setErrors] = useState({});\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    let temp = { ...errors }\r\n    const [showEligibility, setShowEligibility] = useState(false);\r\n    const [showNutrition, setShowNutrition] = useState(false);\r\n    const [showGenderBase, setShowGenderBase] = useState(false);\r\n    const [showChronicCondition, setShowChronicCondition] = useState(false);\r\n    const [showPositiveHealth, setShowPositiveHealth] = useState(false);\r\n    const [showReproductive, setShowReproductive] = useState(false);\r\n    const [showTb, setShowTb] = useState(false);//Tpt\r\n    const [showTpt, setShowTpt] = useState(false);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    //GenderBase Object\r\n    const [genderBase, setGenderBase] = useState({partnerEverPhysically:\"\", haveBeenBeaten:\"\", partnerLivelihood:\"\"});\r\n    //Eligibility Object\r\n    const [eligibility, setEligibility] = useState({typeOfClient:\"\", pregnantStatus:\"\", whoStaging:\"\", lastCd4Result:\"\",lastCd4ResultDate:\"\", lastViralLoadResult:\"\", lastViralLoadResultDate:\"\", eligibleForViralLoad:\"\"});\r\n    //Chronic Care Object\r\n    const [chronicConditions, setChronicConditions]= useState({\r\n            diastolic:\"\",\r\n            systolic:\"\",\r\n            pulse:\"\",\r\n            increaseFood:\"\",\r\n            increaseWater:\"\",\r\n            frequencyUrination:\"\",\r\n            hypertensive:\"\",\r\n            firstTimeDiabetic:\"\",\r\n            diabetic:\"\",\r\n            bp:\"\",\r\n            firstTimeHypertensive:\"\"\r\n    })\r\n    //Nutrition Object\r\n    const [nutrition, setNutrition]= useState({\r\n        height:\"\",\r\n        weight:\"\",\r\n        support:\"\",\r\n        education:\"\",\r\n    })\r\n    //Preventive Object\r\n    const [preventive, setPreventive]= useState({\r\n            lastAppointment:\"\",\r\n            medication:\"\",\r\n            cotrimoxazole:\"\",\r\n            parentStatus:\"\",\r\n            condoms:\"\",\r\n            condomCounseling:\"\",\r\n            preventDiseases:\"\",\r\n            alcohol:\"\",\r\n            nutrituional:\"\",\r\n            wash:\" \",\r\n            phdp:\"\"\r\n    })\r\n    //Reproductive Object\r\n    const [reproductive, setReproductive] = useState({cervicalCancer:\"\", pregnantWithinNextYear:\"\",contraceptive:\"\"});\r\n    //TPT object \r\n    const [tpt, setTpt] = useState({ date:null,weight:\"\", referredForServices:\"\", adherence:\"\", rash:\"\", neurologicSymptoms:\"\", hepatitisSymptoms:\"\",tbSymptoms:\"\",resonForStoppingIpt:\"\", outComeOfIpt:\"\"});\r\n    const [tbObj, setTbObj] = useState({//TB and IPT Screening Object\r\n            currentlyOnTuberculosis:\"\", \r\n            tbTreatment:\"\", \r\n            tbTreatmentStartDate:\"\",\r\n            coughing:\"\", \r\n            fever:\"\", \r\n            losingWeight:\"\", \r\n            nightSweats:\"\", \r\n            poorWeightGain:\"\", \r\n            historyWithAdults:\"\",\r\n            outcome:\"\",\r\n            priorInh:false,\r\n            highAlcohol:false,\r\n            activeHepatitis:false,\r\n            age1year:false,\r\n            poorTreatmentAdherence:false,\r\n            abnormalChest: false,\r\n            activeTb:false,\r\n            contraindications :\"\",\r\n            eligibleForTPT:\"\",\r\n            treatementOutcome:\"\",\r\n            treatementType:\"\",\r\n            completionDate:\"\"\r\n    });\r\n    const [observationObj, setObservationObj]=useState({//Predefine object for chronic care DTO \r\n            eligibility:\"\",\r\n            nutrition:\"\",\r\n            genderBase:\"\",\r\n            chronicCondition:\"\",\r\n            positiveHealth:\"\",\r\n            peproductive:\"\",\r\n            tbIptScreening:\"\",\r\n            tptMonitoring:\"\"\r\n    })\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Chronic Care\",\r\n        visitId: null\r\n    })\r\n    useEffect(() => {\r\n        GetChronicCare();\r\n        PatientCurrentObject();\r\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\r\n            setSisabledField(props.activeContent.actionType==='view'?true : false)\r\n        }\r\n    }, [props.activeContent.id]);\r\n    //GET  Patients\r\n    async function PatientCurrentObject() {\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setEnrollDate(response.data.enrollment.dateOfRegistration)\r\n                //setPatientObject(response.data);\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n    const GetChronicCare =()=>{//function to get chronic care data for edit \r\n        axios\r\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {  \r\n                observationObj.eligibility=response.data.eligibility\r\n                observationObj.nutrition=response.data\r\n                observationObj.genderBase=response.data.genderBase\r\n                observationObj.chronicCondition=response.data.chronicConditions\r\n                observationObj.positiveHealth=response.data.positiveHealth\r\n                observationObj.peproductive=response.data.peproductive \r\n                observationObj.tbIptScreening=response.data.tbIptScreening\r\n                observationObj.tptMonitoring=response.data.tptMonitoring\r\n                setObservation(response.data)\r\n                setObservationObj(response.data.data)\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n                setTbObj({...tbObj, ...response.data.data.tbIptScreening})\r\n                setEligibility({...eligibility, ...response.data.data.eligibility})\r\n                setGenderBase({...genderBase, ...response.data.data.genderBase})\r\n                setChronicConditions({...chronicConditions, ...response.data.data.chronicConditions})\r\n                setPreventive({...preventive, ...response.data.data.preventive})\r\n                setReproductive({...reproductive, ...response.data.data.reproductive})\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n           })\r\n           .catch((error) => {\r\n           //console.log(response.data.data);\r\n           });\r\n       \r\n    }\r\n    const handleInputChange = e => {//Handle input fields changes\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObservation ({...observation,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => { \r\n        temp.dateOfObservation = observation.dateOfObservation ? \"\" : \"This field is required\"\r\n        tpt.outComeOfIpt!==\"\" && (temp.outcomeDate = tpt.date ? \"\" : \"This field is required\")\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        setSaving(true);\r\n        observation.personId =patientObj.id\r\n        observationObj.eligibility=eligibility\r\n        observationObj.nutrition=\r\n        observationObj.genderBase=genderBase\r\n        observationObj.chronicCondition=chronicConditions\r\n        observationObj.positiveHealth=preventive\r\n        observationObj.peproductive=reproductive \r\n        observationObj.tbIptScreening=tbObj\r\n        observationObj.tptMonitoring=tpt\r\n        observation.data =observationObj        \r\n        if(validate()){\r\n            if(props.activeContent && props.activeContent.actionType===\"update\"){//Perform operation for updation action)\r\n                axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }else{\r\n                axios.post(`${baseUrl}observation`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }else{\r\n            toast.error(\"All fields are required\", {position: toast.POSITION.BOTTOM_CENTER})\r\n            setSaving(false); \r\n        }\r\n    }\r\n    \r\n    //console.log(eligibility)\r\n    const onClickEligibility =() =>{\r\n        setShowEligibility(!showEligibility)\r\n    }\r\n    const onClickTb =() =>{\r\n        setShowTb(!showTb)\r\n    }\r\n    const onClickNutrition =() =>{\r\n        setShowNutrition(!showNutrition)\r\n    }\r\n    const onClickGenderBase =() =>{\r\n        setShowGenderBase(!showGenderBase)\r\n    }\r\n    const onClickChronicCondition =() =>{\r\n        setShowChronicCondition(!showChronicCondition)\r\n    }\r\n    const onClickPositiveHealth =() =>{\r\n        setShowPositiveHealth(!showPositiveHealth)\r\n    }\r\n    const onClickReproductive =() =>{\r\n        setShowReproductive(!showReproductive)\r\n    }\r\n    const onClickTpt =() =>{\r\n        setShowTpt(!showTpt)\r\n    }\r\n\r\n    const handleCancel =()=>{\r\n        //history.push({ pathname: '/' });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h2> OTZ Peadiatric Disclosure Checklist</h2></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    \r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Visit Date *</Label>\r\n                                     \r\n                                    <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                    </Input>                                   \r\n                                    </FormGroup>\r\n                                    {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                    ) : \"\" }   \r\n                                </div>\r\n                            </div>\r\n                            {/* Eligibility Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Eligibility Assessment</h5>\r\n                                    {showEligibility===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showEligibility && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Eligibility Assessment */}\r\n                            {/* TB & IPT  Screening  */}\r\n                            <div className=\"card\">\r\n                                \r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TB & IPT Screening </h5>\r\n                                    {showTb===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTb && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TB & IPT  Screening  */}\r\n                             {/* TPT MONITORING */}\r\n                             <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TPT Monitoring</h5>\r\n                                    {showTpt===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTpt && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TPT MONITORING */}\r\n                            {/* End Nutritional Status Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Nutritional Status Assessment</h5>\r\n                                    {showNutrition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showNutrition && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Nutritional Status Assessment */}\r\n                            {/* Gender Based Violence Screening */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Gender Based Violence Screening </h5>\r\n                                    {showGenderBase===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showGenderBase && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <>Form will be here</>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Gender Based Violence Screening */}\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Screening for Chronic Conditions</h5>\r\n                                    {showChronicCondition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showChronicCondition && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <ChronicConditions chronicConditions={chronicConditions} setChronicConditions={setChronicConditions} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            {/* Positive Health Dignity and Prevention */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Positive Health Dignity and Prevention(PHDP) </h5>\r\n                                    {showPositiveHealth===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showPositiveHealth && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <PositiveHealthDignity preventive={preventive} setPreventive={setPreventive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Positive Health Dignity and Prevention */} \r\n                            {/* Reproductive Intentions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Reproductive Intentions </h5>\r\n                                    {showReproductive===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showReproductive && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {/* <ReproductiveIntentions setReproductive={setReproductive} reproductive={reproductive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Reproductive Intentions */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n                            {props.activeContent && props.activeContent.actionType? (<>\r\n                                <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                hidden={disabledField}\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{backgroundColor:\"#014d88\"}}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                                >\r\n                                    {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                    ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                    )}\r\n                                </MatButton>\r\n                            </>):(<>\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    style={{backgroundColor:\"#014d88\"}}\r\n                                    onClick={handleSubmit}\r\n                                    disabled={saving}\r\n                                    >\r\n                                        {!saving ? (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                            </MatButton>\r\n                            </>)}\r\n                            \r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PeadiatricDisclosureChecklist","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Otz\\Register.js",["1613","1614","1615","1616","1617","1618"],"import React, { useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\n//import Button from \"@material-ui/core/Button\";\r\nimport { Spinner,Form,FormGroup, Label, InputGroup, Input } from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n//import AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {FaPlus, FaAngleDown} from 'react-icons/fa'\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}));\r\n\r\n\r\nconst OtzRegister = (props) => {\r\n    const patientObj = props.patientObj;\r\n    const [saving, setSaving] = useState(false);\r\n    const classes = useStyles();\r\n    const [errors, setErrors] = useState({});\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    let temp = { ...errors }\r\n    const [showEligibility, setShowEligibility] = useState(false);\r\n    const [showNutrition, setShowNutrition] = useState(false);\r\n    const [showGenderBase, setShowGenderBase] = useState(false);\r\n    const [showChronicCondition, setShowChronicCondition] = useState(false);\r\n    const [showPositiveHealth, setShowPositiveHealth] = useState(false);\r\n    const [showReproductive, setShowReproductive] = useState(false);\r\n    const [showTb, setShowTb] = useState(false);//Tpt\r\n    const [showTpt, setShowTpt] = useState(false);\r\n    const [enrollDate, setEnrollDate] = useState(\"\");\r\n    //GenderBase Object\r\n    const [genderBase, setGenderBase] = useState({partnerEverPhysically:\"\", haveBeenBeaten:\"\", partnerLivelihood:\"\"});\r\n    //Eligibility Object\r\n    const [eligibility, setEligibility] = useState({typeOfClient:\"\", pregnantStatus:\"\", whoStaging:\"\", lastCd4Result:\"\",lastCd4ResultDate:\"\", lastViralLoadResult:\"\", lastViralLoadResultDate:\"\", eligibleForViralLoad:\"\"});\r\n    //Chronic Care Object\r\n    const [chronicConditions, setChronicConditions]= useState({\r\n            diastolic:\"\",\r\n            systolic:\"\",\r\n            pulse:\"\",\r\n            increaseFood:\"\",\r\n            increaseWater:\"\",\r\n            frequencyUrination:\"\",\r\n            hypertensive:\"\",\r\n            firstTimeDiabetic:\"\",\r\n            diabetic:\"\",\r\n            bp:\"\",\r\n            firstTimeHypertensive:\"\"\r\n    })\r\n    //Nutrition Object\r\n    const [nutrition, setNutrition]= useState({\r\n        height:\"\",\r\n        weight:\"\",\r\n        support:\"\",\r\n        education:\"\",\r\n    })\r\n    //Preventive Object\r\n    const [preventive, setPreventive]= useState({\r\n            lastAppointment:\"\",\r\n            medication:\"\",\r\n            cotrimoxazole:\"\",\r\n            parentStatus:\"\",\r\n            condoms:\"\",\r\n            condomCounseling:\"\",\r\n            preventDiseases:\"\",\r\n            alcohol:\"\",\r\n            nutrituional:\"\",\r\n            wash:\" \",\r\n            phdp:\"\"\r\n    })\r\n    //Reproductive Object\r\n    const [reproductive, setReproductive] = useState({cervicalCancer:\"\", pregnantWithinNextYear:\"\",contraceptive:\"\"});\r\n    //TPT object \r\n    const [tpt, setTpt] = useState({ date:null,weight:\"\", referredForServices:\"\", adherence:\"\", rash:\"\", neurologicSymptoms:\"\", hepatitisSymptoms:\"\",tbSymptoms:\"\",resonForStoppingIpt:\"\", outComeOfIpt:\"\"});\r\n    const [tbObj, setTbObj] = useState({//TB and IPT Screening Object\r\n            currentlyOnTuberculosis:\"\", \r\n            tbTreatment:\"\", \r\n            tbTreatmentStartDate:\"\",\r\n            coughing:\"\", \r\n            fever:\"\", \r\n            losingWeight:\"\", \r\n            nightSweats:\"\", \r\n            poorWeightGain:\"\", \r\n            historyWithAdults:\"\",\r\n            outcome:\"\",\r\n            priorInh:false,\r\n            highAlcohol:false,\r\n            activeHepatitis:false,\r\n            age1year:false,\r\n            poorTreatmentAdherence:false,\r\n            abnormalChest: false,\r\n            activeTb:false,\r\n            contraindications :\"\",\r\n            eligibleForTPT:\"\",\r\n            treatementOutcome:\"\",\r\n            treatementType:\"\",\r\n            completionDate:\"\"\r\n    });\r\n    const [observationObj, setObservationObj]=useState({//Predefine object for chronic care DTO \r\n            eligibility:\"\",\r\n            nutrition:\"\",\r\n            genderBase:\"\",\r\n            chronicCondition:\"\",\r\n            positiveHealth:\"\",\r\n            peproductive:\"\",\r\n            tbIptScreening:\"\",\r\n            tptMonitoring:\"\"\r\n    })\r\n    const [observation, setObservation]=useState({\r\n        data: {},\r\n        dateOfObservation: \"\",\r\n        facilityId: null,\r\n        personId: 0,\r\n        type: \"Chronic Care\",\r\n        visitId: null\r\n    })\r\n    useEffect(() => {\r\n        GetChronicCare();\r\n        PatientCurrentObject();\r\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\r\n            setSisabledField(props.activeContent.actionType==='view'?true : false)\r\n        }\r\n    }, [props.activeContent.id]);\r\n    //GET  Patients\r\n    async function PatientCurrentObject() {\r\n        axios\r\n            .get(`${baseUrl}hiv/patient/${props.patientObj.id}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setEnrollDate(response.data.enrollment.dateOfRegistration)\r\n                //setPatientObject(response.data);\r\n            })\r\n            .catch((error) => {  \r\n            });        \r\n    }\r\n    const GetChronicCare =()=>{//function to get chronic care data for edit \r\n        axios\r\n           .get(`${baseUrl}observation/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {  \r\n                observationObj.eligibility=response.data.eligibility\r\n                observationObj.nutrition=response.data\r\n                observationObj.genderBase=response.data.genderBase\r\n                observationObj.chronicCondition=response.data.chronicConditions\r\n                observationObj.positiveHealth=response.data.positiveHealth\r\n                observationObj.peproductive=response.data.peproductive \r\n                observationObj.tbIptScreening=response.data.tbIptScreening\r\n                observationObj.tptMonitoring=response.data.tptMonitoring\r\n                setObservation(response.data)\r\n                setObservationObj(response.data.data)\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n                setTbObj({...tbObj, ...response.data.data.tbIptScreening})\r\n                setEligibility({...eligibility, ...response.data.data.eligibility})\r\n                setGenderBase({...genderBase, ...response.data.data.genderBase})\r\n                setChronicConditions({...chronicConditions, ...response.data.data.chronicConditions})\r\n                setPreventive({...preventive, ...response.data.data.preventive})\r\n                setReproductive({...reproductive, ...response.data.data.reproductive})\r\n                setTpt({...tpt, ...response.data.data.tptMonitoring})\r\n           })\r\n           .catch((error) => {\r\n           //console.log(response.data.data);\r\n           });\r\n       \r\n    }\r\n    const handleInputChange = e => {//Handle input fields changes\r\n        //console.log(e.target.value)\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setObservation ({...observation,  [e.target.name]: e.target.value});\r\n    }\r\n    //Validations of the forms\r\n    const validate = () => { \r\n        temp.dateOfObservation = observation.dateOfObservation ? \"\" : \"This field is required\"\r\n        tpt.outComeOfIpt!==\"\" && (temp.outcomeDate = tpt.date ? \"\" : \"This field is required\")\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        setSaving(true);\r\n        observation.personId =patientObj.id\r\n        observationObj.eligibility=eligibility\r\n        observationObj.nutrition=\r\n        observationObj.genderBase=genderBase\r\n        observationObj.chronicCondition=chronicConditions\r\n        observationObj.positiveHealth=preventive\r\n        observationObj.peproductive=reproductive \r\n        observationObj.tbIptScreening=tbObj\r\n        observationObj.tptMonitoring=tpt\r\n        observation.data =observationObj        \r\n        if(validate()){\r\n            if(props.activeContent && props.activeContent.actionType===\"update\"){//Perform operation for updation action)\r\n                axios.put(`${baseUrl}observation/${props.activeContent.id}`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }else{\r\n                axios.post(`${baseUrl}observation`,observation,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                )\r\n                .then(response => {\r\n                    setSaving(false);\r\n                    toast.success(\"Chronic Care Save successful\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                })\r\n                .catch(error => {\r\n                    setSaving(false);\r\n                    if(error.response && error.response.data){\r\n                        \r\n                        if(error.response.data.apierror && error.response.data.apierror.message!==\"\" ){\r\n                            toast.error(error.response.data.apierror.message, {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }else{\r\n                            toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }else{\r\n            toast.error(\"All fields are required\", {position: toast.POSITION.BOTTOM_CENTER})\r\n            setSaving(false); \r\n        }\r\n    }\r\n    \r\n    //console.log(eligibility)\r\n    const onClickEligibility =() =>{\r\n        setShowEligibility(!showEligibility)\r\n    }\r\n    const onClickTb =() =>{\r\n        setShowTb(!showTb)\r\n    }\r\n    const onClickNutrition =() =>{\r\n        setShowNutrition(!showNutrition)\r\n    }\r\n    const onClickGenderBase =() =>{\r\n        setShowGenderBase(!showGenderBase)\r\n    }\r\n    const onClickChronicCondition =() =>{\r\n        setShowChronicCondition(!showChronicCondition)\r\n    }\r\n    const onClickPositiveHealth =() =>{\r\n        setShowPositiveHealth(!showPositiveHealth)\r\n    }\r\n    const onClickReproductive =() =>{\r\n        setShowReproductive(!showReproductive)\r\n    }\r\n    const onClickTpt =() =>{\r\n        setShowTpt(!showTpt)\r\n    }\r\n\r\n    const handleCancel =()=>{\r\n        //history.push({ pathname: '/' });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n        <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h2> OTZ Register</h2></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    \r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                    <Label >Visit Date *</Label>\r\n                                     \r\n                                    <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateOfObservation\"\r\n                                    id=\"dateOfObservation\"\r\n                                    value={observation.dateOfObservation}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    min={enrollDate}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    \r\n                                    > \r\n                                    </Input>                                   \r\n                                    </FormGroup>\r\n                                    {errors.dateOfObservation !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfObservation}</span>\r\n                                    ) : \"\" }   \r\n                                </div>\r\n                            </div>\r\n                            {/* Eligibility Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Eligibility Assessment</h5>\r\n                                    {showEligibility===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickEligibility}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showEligibility && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Eligibility Assessment */}\r\n                            {/* TB & IPT  Screening  */}\r\n                            <div className=\"card\">\r\n                                \r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TB & IPT Screening </h5>\r\n                                    {showTb===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTb}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTb && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TB & IPT  Screening  */}\r\n                             {/* TPT MONITORING */}\r\n                             <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>TPT Monitoring</h5>\r\n                                    {showTpt===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickTpt}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showTpt && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End TPT MONITORING */}\r\n                            {/* End Nutritional Status Assessment */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Nutritional Status Assessment</h5>\r\n                                    {showNutrition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickNutrition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showNutrition && (\r\n                                    <>Form will be here</>\r\n                                )}\r\n                            </div>\r\n                            {/* End Nutritional Status Assessment */}\r\n                            {/* Gender Based Violence Screening */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Gender Based Violence Screening </h5>\r\n                                    {showGenderBase===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickGenderBase}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showGenderBase && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <>Form will be here</>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Gender Based Violence Screening */}\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Screening for Chronic Conditions</h5>\r\n                                    {showChronicCondition===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickChronicCondition}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showChronicCondition && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <ChronicConditions chronicConditions={chronicConditions} setChronicConditions={setChronicConditions} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Screening for Chronic Conditions */}\r\n                            {/* Positive Health Dignity and Prevention */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Positive Health Dignity and Prevention(PHDP) </h5>\r\n                                    {showPositiveHealth===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickPositiveHealth}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showPositiveHealth && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                       {/* <PositiveHealthDignity preventive={preventive} setPreventive={setPreventive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Positive Health Dignity and Prevention */} \r\n                            {/* Reproductive Intentions */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Reproductive Intentions </h5>\r\n                                    {showReproductive===false  ? (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaPlus /></span></>) :  (<><span className=\"float-end\" style={{cursor: \"pointer\"}} onClick={onClickReproductive}><FaAngleDown /></span> </>)}\r\n                                </div>\r\n                                {showReproductive && (\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {/* <ReproductiveIntentions setReproductive={setReproductive} reproductive={reproductive} setErrors={setErrors} errors={errors} encounterDate={observation.dateOfObservation} patientObj={patientObj}/> */}\r\n                                    </div>\r\n\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            {/* End Reproductive Intentions */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n                            {props.activeContent && props.activeContent.actionType? (<>\r\n                                <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                hidden={disabledField}\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{backgroundColor:\"#014d88\"}}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                                >\r\n                                    {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                    ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                    )}\r\n                                </MatButton>\r\n                            </>):(<>\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    style={{backgroundColor:\"#014d88\"}}\r\n                                    onClick={handleSubmit}\r\n                                    disabled={saving}\r\n                                    >\r\n                                        {!saving ? (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                        ) : (\r\n                                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                        )}\r\n                            </MatButton>\r\n                            </>)}\r\n                            \r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n \r\n        </>\r\n    );\r\n};\r\n\r\nexport default OtzRegister","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\Index.js",["1619","1620","1621","1622","1623","1624","1625"],"import React, { useEffect, useState } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport List from \"./List\";\r\nimport Patient from \"./Patient\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& a\": {\r\n      textDecoration: \"none !important\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\nfunction Index(props) {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [modal, setModal] = useState(false);\r\n  const [patient, setPatient] = useState(false);\r\n  const [enablePPI, setEnablePPI] = useState(true);\r\n  const toggle = (id) => {\r\n    const patient = patients.find((obj) => obj.id == id);\r\n    setPatient(patient);\r\n    setModal(!modal);\r\n  };\r\n  useEffect(() => {\r\n    userPermission();\r\n  }, []);\r\n  //Get list of Finger index\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${baseUrl}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const enablePPIColumns = () => {\r\n    setEnablePPI(!enablePPI);\r\n  };\r\n  const panes = [\r\n    {\r\n      menuItem: \"OVC Patients\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <Patient permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: \"Import / Export\",\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <List permissions={permissions} />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      {permissions.length > 0 && (\r\n        <Card>\r\n          <CardBody>\r\n            <div className=\"row mb-12 col-md-12\"></div>\r\n\r\n            <Tab panes={panes} />\r\n          </CardBody>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\List.js",["1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport IosShareIcon from \"@mui/icons-material/IosShare\";\r\nimport SystemUpdateAltIcon from \"@mui/icons-material/SystemUpdateAlt\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport { TiArrowForward } from \"react-icons/ti\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst List = (props) => {\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-right mr-1\"\r\n        startIcon={<IosShareIcon />}\r\n        style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        // onClick={syncDataBase}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Export </span>\r\n      </Button>{\" \"}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-right mr-1\"\r\n        startIcon={<SystemUpdateAltIcon />}\r\n        style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        // onClick={syncDataBase}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Import </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"OVC Import / Export Tracker\"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Date\",\r\n            field: \"date\",\r\n          },\r\n          { title: \"ID\", field: \"id\", filtering: false },\r\n          { title: \"File Name\", field: \"filename\", filtering: false },\r\n          { title: \"Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={[]}\r\n        options={{\r\n          search: true,\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","C:\\Users\\mathew.adegbite\\LAMISPLUS\\hiv-module\\src\\main\\webapp\\jsx\\components\\Ovc\\Patient.js",["1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport IosShareIcon from \"@mui/icons-material/IosShare\";\r\nimport SystemUpdateAltIcon from \"@mui/icons-material/SystemUpdateAlt\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport { TiArrowForward } from \"react-icons/ti\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst Patient = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-right mr-1\"\r\n        startIcon={<IosShareIcon />}\r\n        style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        // onClick={syncDataBase}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Export </span>\r\n      </Button>{\" \"}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-right mr-1\"\r\n        startIcon={<SystemUpdateAltIcon />}\r\n        style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        // onClick={syncDataBase}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Import </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"OVC Patients\"\r\n        columns={[\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          { title: \"Unique ID\", field: \"uniqueId\", filtering: false },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          { title: \"ART Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={[]}\r\n        options={{\r\n          search: true,\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patient;\r\n",{"ruleId":"1652","severity":1,"message":"1653","line":4,"column":41,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":47},{"ruleId":"1656","replacedBy":"1657"},{"ruleId":"1658","replacedBy":"1659"},{"ruleId":"1652","severity":1,"message":"1660","line":1,"column":16,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1661","line":10,"column":13,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1662","line":106,"column":19,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1663","line":109,"column":25,"nodeType":"1654","messageId":"1655","endLine":109,"endColumn":39},{"ruleId":"1652","severity":1,"message":"1664","line":112,"column":13,"nodeType":"1654","messageId":"1655","endLine":112,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1665","line":131,"column":13,"nodeType":"1654","messageId":"1655","endLine":131,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1666","line":135,"column":30,"nodeType":"1654","messageId":"1655","endLine":135,"endColumn":48},{"ruleId":"1667","severity":1,"message":"1668","line":157,"column":8,"nodeType":"1669","endLine":157,"endColumn":31,"suggestions":"1670"},{"ruleId":"1671","severity":1,"message":"1672","line":195,"column":13,"nodeType":"1673","messageId":"1674","endLine":195,"endColumn":151},{"ruleId":"1675","severity":1,"message":"1676","line":198,"column":49,"nodeType":"1677","messageId":"1678","endLine":198,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1679","line":384,"column":23,"nodeType":"1654","messageId":"1655","endLine":384,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1660","line":1,"column":16,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1662","line":105,"column":19,"nodeType":"1654","messageId":"1655","endLine":105,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1680","line":107,"column":12,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":32},{"ruleId":"1652","severity":1,"message":"1663","line":108,"column":25,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":39},{"ruleId":"1652","severity":1,"message":"1664","line":111,"column":13,"nodeType":"1654","messageId":"1655","endLine":111,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1665","line":130,"column":13,"nodeType":"1654","messageId":"1655","endLine":130,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1666","line":134,"column":30,"nodeType":"1654","messageId":"1655","endLine":134,"endColumn":48},{"ruleId":"1667","severity":1,"message":"1681","line":158,"column":8,"nodeType":"1669","endLine":158,"endColumn":31,"suggestions":"1682"},{"ruleId":"1671","severity":1,"message":"1672","line":210,"column":13,"nodeType":"1673","messageId":"1674","endLine":210,"endColumn":151},{"ruleId":"1675","severity":1,"message":"1676","line":212,"column":49,"nodeType":"1677","messageId":"1678","endLine":212,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1679","line":405,"column":23,"nodeType":"1654","messageId":"1655","endLine":405,"endColumn":31},{"ruleId":"1667","severity":1,"message":"1683","line":107,"column":8,"nodeType":"1669","endLine":107,"endColumn":10,"suggestions":"1684"},{"ruleId":"1652","severity":1,"message":"1685","line":21,"column":8,"nodeType":"1654","messageId":"1655","endLine":21,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1686","line":25,"column":18,"nodeType":"1654","messageId":"1655","endLine":25,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1687","line":26,"column":10,"nodeType":"1654","messageId":"1655","endLine":26,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1662","line":149,"column":19,"nodeType":"1654","messageId":"1655","endLine":149,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1688","line":152,"column":34,"nodeType":"1654","messageId":"1655","endLine":152,"endColumn":57},{"ruleId":"1652","severity":1,"message":"1689","line":165,"column":12,"nodeType":"1654","messageId":"1655","endLine":165,"endColumn":38},{"ruleId":"1652","severity":1,"message":"1690","line":166,"column":24,"nodeType":"1654","messageId":"1655","endLine":166,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1664","line":172,"column":13,"nodeType":"1654","messageId":"1655","endLine":172,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1691","line":173,"column":13,"nodeType":"1654","messageId":"1655","endLine":173,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1692","line":173,"column":27,"nodeType":"1654","messageId":"1655","endLine":173,"endColumn":42},{"ruleId":"1652","severity":1,"message":"1665","line":192,"column":13,"nodeType":"1654","messageId":"1655","endLine":192,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1693","line":192,"column":25,"nodeType":"1654","messageId":"1655","endLine":192,"endColumn":38},{"ruleId":"1652","severity":1,"message":"1666","line":196,"column":30,"nodeType":"1654","messageId":"1655","endLine":196,"endColumn":48},{"ruleId":"1652","severity":1,"message":"1694","line":199,"column":13,"nodeType":"1654","messageId":"1655","endLine":199,"endColumn":31},{"ruleId":"1667","severity":1,"message":"1695","line":226,"column":8,"nodeType":"1669","endLine":226,"endColumn":39,"suggestions":"1696"},{"ruleId":"1652","severity":1,"message":"1697","line":270,"column":11,"nodeType":"1654","messageId":"1655","endLine":270,"endColumn":42},{"ruleId":"1675","severity":1,"message":"1676","line":451,"column":49,"nodeType":"1677","messageId":"1678","endLine":451,"endColumn":51},{"ruleId":"1675","severity":1,"message":"1676","line":479,"column":69,"nodeType":"1677","messageId":"1678","endLine":479,"endColumn":71},{"ruleId":"1671","severity":1,"message":"1672","line":503,"column":13,"nodeType":"1673","messageId":"1674","endLine":503,"endColumn":149},{"ruleId":"1671","severity":1,"message":"1672","line":511,"column":13,"nodeType":"1673","messageId":"1674","endLine":511,"endColumn":151},{"ruleId":"1652","severity":1,"message":"1698","line":524,"column":19,"nodeType":"1654","messageId":"1655","endLine":524,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1700","line":524,"column":83,"nodeType":"1701","messageId":"1702","endLine":524,"endColumn":85},{"ruleId":"1675","severity":1,"message":"1676","line":582,"column":67,"nodeType":"1677","messageId":"1678","endLine":582,"endColumn":69},{"ruleId":"1652","severity":1,"message":"1679","line":607,"column":23,"nodeType":"1654","messageId":"1655","endLine":607,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1703","line":764,"column":15,"nodeType":"1654","messageId":"1655","endLine":764,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1704","line":5,"column":8,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1705","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1706","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":27,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":36},{"ruleId":"1652","severity":1,"message":"1708","line":19,"column":8,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1709","line":20,"column":17,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1710","line":20,"column":26,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":31},{"ruleId":"1675","severity":1,"message":"1676","line":107,"column":25,"nodeType":"1677","messageId":"1678","endLine":107,"endColumn":27},{"ruleId":"1667","severity":1,"message":"1711","line":19,"column":8,"nodeType":"1669","endLine":19,"endColumn":26,"suggestions":"1712"},{"ruleId":"1652","severity":1,"message":"1713","line":98,"column":11,"nodeType":"1654","messageId":"1655","endLine":98,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1714","line":110,"column":11,"nodeType":"1654","messageId":"1655","endLine":110,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1715","line":114,"column":11,"nodeType":"1654","messageId":"1655","endLine":114,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1716","line":118,"column":11,"nodeType":"1654","messageId":"1655","endLine":118,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1717","line":28,"column":9,"nodeType":"1654","messageId":"1655","endLine":28,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1718","line":31,"column":10,"nodeType":"1654","messageId":"1655","endLine":31,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1719","line":33,"column":10,"nodeType":"1654","messageId":"1655","endLine":33,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1720","line":37,"column":26,"nodeType":"1654","messageId":"1655","endLine":37,"endColumn":43},{"ruleId":"1667","severity":1,"message":"1721","line":55,"column":6,"nodeType":"1669","endLine":55,"endColumn":24,"suggestions":"1722"},{"ruleId":"1675","severity":1,"message":"1676","line":547,"column":59,"nodeType":"1677","messageId":"1678","endLine":547,"endColumn":61},{"ruleId":"1675","severity":1,"message":"1676","line":728,"column":51,"nodeType":"1677","messageId":"1678","endLine":728,"endColumn":53},{"ruleId":"1667","severity":1,"message":"1723","line":18,"column":8,"nodeType":"1669","endLine":18,"endColumn":32,"suggestions":"1724"},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"1729"},{"ruleId":"1652","severity":1,"message":"1730","line":86,"column":12,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":24},{"ruleId":"1667","severity":1,"message":"1731","line":139,"column":8,"nodeType":"1669","endLine":139,"endColumn":29,"suggestions":"1732"},{"ruleId":"1652","severity":1,"message":"1733","line":166,"column":22,"nodeType":"1654","messageId":"1655","endLine":166,"endColumn":32},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"1734"},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1736","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1737","line":24,"column":16,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1738","line":57,"column":7,"nodeType":"1654","messageId":"1655","endLine":57,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1739","line":106,"column":12,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":29},{"ruleId":"1667","severity":1,"message":"1740","line":110,"column":10,"nodeType":"1669","endLine":110,"endColumn":31,"suggestions":"1741"},{"ruleId":"1725","severity":1,"message":"1726","line":8,"column":10,"nodeType":"1727","messageId":"1728","endLine":8,"endColumn":24,"fix":"1742"},{"ruleId":"1667","severity":1,"message":"1743","line":23,"column":8,"nodeType":"1669","endLine":23,"endColumn":64,"suggestions":"1744"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"1746"},{"ruleId":"1652","severity":1,"message":"1687","line":14,"column":10,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":14,"column":15,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1748","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1749","line":16,"column":8,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1750","line":83,"column":12,"nodeType":"1654","messageId":"1655","endLine":83,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":83,"column":20,"nodeType":"1654","messageId":"1655","endLine":83,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":84,"column":12,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1752","line":84,"column":21,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":31},{"ruleId":"1667","severity":1,"message":"1731","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":50,"suggestions":"1753"},{"ruleId":"1652","severity":1,"message":"1754","line":218,"column":11,"nodeType":"1654","messageId":"1655","endLine":218,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1755","line":2,"column":10,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1756","line":2,"column":15,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1757","line":2,"column":60,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":70},{"ruleId":"1652","severity":1,"message":"1758","line":2,"column":71,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":85},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"1759"},{"ruleId":"1652","severity":1,"message":"1751","line":89,"column":20,"nodeType":"1654","messageId":"1655","endLine":89,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1760","line":114,"column":25,"nodeType":"1654","messageId":"1655","endLine":114,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1761","line":134,"column":8,"nodeType":"1669","endLine":134,"endColumn":10,"suggestions":"1762"},{"ruleId":"1763","severity":1,"message":"1764","line":269,"column":43,"nodeType":"1765","messageId":"1766","endLine":269,"endColumn":65,"fix":"1767"},{"ruleId":"1763","severity":1,"message":"1768","line":270,"column":43,"nodeType":"1765","messageId":"1766","endLine":270,"endColumn":68,"fix":"1769"},{"ruleId":"1763","severity":1,"message":"1770","line":276,"column":43,"nodeType":"1765","messageId":"1766","endLine":276,"endColumn":77,"fix":"1771"},{"ruleId":"1763","severity":1,"message":"1772","line":277,"column":43,"nodeType":"1765","messageId":"1766","endLine":277,"endColumn":93,"fix":"1773"},{"ruleId":"1667","severity":1,"message":"1723","line":15,"column":8,"nodeType":"1669","endLine":15,"endColumn":32,"suggestions":"1774"},{"ruleId":"1652","severity":1,"message":"1755","line":2,"column":10,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1756","line":2,"column":15,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":9,"column":10,"nodeType":"1727","messageId":"1728","endLine":9,"endColumn":24,"fix":"1775"},{"ruleId":"1652","severity":1,"message":"1776","line":86,"column":9,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1751","line":89,"column":20,"nodeType":"1654","messageId":"1655","endLine":89,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1760","line":114,"column":25,"nodeType":"1654","messageId":"1655","endLine":114,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1777","line":135,"column":8,"nodeType":"1669","endLine":135,"endColumn":32,"suggestions":"1778"},{"ruleId":"1763","severity":1,"message":"1764","line":286,"column":43,"nodeType":"1765","messageId":"1766","endLine":286,"endColumn":65,"fix":"1779"},{"ruleId":"1763","severity":1,"message":"1768","line":287,"column":43,"nodeType":"1765","messageId":"1766","endLine":287,"endColumn":68,"fix":"1780"},{"ruleId":"1652","severity":1,"message":"1719","line":16,"column":12,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1781","line":21,"column":8,"nodeType":"1669","endLine":21,"endColumn":63,"suggestions":"1782"},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"1783"},{"ruleId":"1652","severity":1,"message":"1751","line":78,"column":20,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":81,"column":12,"nodeType":"1654","messageId":"1655","endLine":81,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1784","line":120,"column":8,"nodeType":"1669","endLine":120,"endColumn":29,"suggestions":"1785"},{"ruleId":"1652","severity":1,"message":"1755","line":2,"column":10,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1756","line":2,"column":15,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1687","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":13,"column":15,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1786","line":84,"column":12,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":32},{"ruleId":"1652","severity":1,"message":"1787","line":86,"column":12,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1788","line":86,"column":20,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":29},{"ruleId":"1667","severity":1,"message":"1789","line":107,"column":10,"nodeType":"1669","endLine":107,"endColumn":12,"suggestions":"1790"},{"ruleId":"1675","severity":1,"message":"1676","line":166,"column":49,"nodeType":"1677","messageId":"1678","endLine":166,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1791","line":4,"column":10,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":15},{"ruleId":"1725","severity":1,"message":"1726","line":6,"column":10,"nodeType":"1727","messageId":"1728","endLine":6,"endColumn":24,"fix":"1792"},{"ruleId":"1652","severity":1,"message":"1717","line":49,"column":11,"nodeType":"1654","messageId":"1655","endLine":49,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1793","line":50,"column":12,"nodeType":"1654","messageId":"1655","endLine":50,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1794","line":51,"column":12,"nodeType":"1654","messageId":"1655","endLine":51,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1719","line":55,"column":12,"nodeType":"1654","messageId":"1655","endLine":55,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1795","line":59,"column":10,"nodeType":"1669","endLine":59,"endColumn":31,"suggestions":"1796"},{"ruleId":"1667","severity":1,"message":"1740","line":21,"column":8,"nodeType":"1669","endLine":21,"endColumn":63,"suggestions":"1797"},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":26,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":35},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1798","line":7,"column":10,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":15},{"ruleId":"1725","severity":1,"message":"1726","line":13,"column":10,"nodeType":"1727","messageId":"1728","endLine":13,"endColumn":24,"fix":"1799"},{"ruleId":"1652","severity":1,"message":"1687","line":17,"column":9,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1800","line":17,"column":15,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1686","line":17,"column":30,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":38},{"ruleId":"1652","severity":1,"message":"1801","line":85,"column":11,"nodeType":"1654","messageId":"1655","endLine":85,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1794","line":88,"column":12,"nodeType":"1654","messageId":"1655","endLine":88,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1802","line":88,"column":20,"nodeType":"1654","messageId":"1655","endLine":88,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1760","line":90,"column":25,"nodeType":"1654","messageId":"1655","endLine":90,"endColumn":39},{"ruleId":"1652","severity":1,"message":"1803","line":127,"column":11,"nodeType":"1654","messageId":"1655","endLine":127,"endColumn":35},{"ruleId":"1671","severity":1,"message":"1672","line":136,"column":5,"nodeType":"1673","messageId":"1674","endLine":136,"endColumn":111},{"ruleId":"1671","severity":1,"message":"1672","line":142,"column":5,"nodeType":"1673","messageId":"1674","endLine":142,"endColumn":150},{"ruleId":"1671","severity":1,"message":"1672","line":143,"column":5,"nodeType":"1673","messageId":"1674","endLine":143,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":144,"column":5,"nodeType":"1673","messageId":"1674","endLine":144,"endColumn":166},{"ruleId":"1671","severity":1,"message":"1672","line":145,"column":5,"nodeType":"1673","messageId":"1674","endLine":145,"endColumn":132},{"ruleId":"1671","severity":1,"message":"1672","line":148,"column":5,"nodeType":"1673","messageId":"1674","endLine":148,"endColumn":129},{"ruleId":"1671","severity":1,"message":"1672","line":149,"column":5,"nodeType":"1673","messageId":"1674","endLine":149,"endColumn":147},{"ruleId":"1671","severity":1,"message":"1672","line":150,"column":5,"nodeType":"1673","messageId":"1674","endLine":150,"endColumn":248},{"ruleId":"1804","severity":1,"message":"1805","line":150,"column":92,"nodeType":"1806","messageId":"1807","endLine":150,"endColumn":94},{"ruleId":"1804","severity":1,"message":"1805","line":150,"column":156,"nodeType":"1806","messageId":"1807","endLine":150,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":151,"column":5,"nodeType":"1673","messageId":"1674","endLine":151,"endColumn":166},{"ruleId":"1675","severity":1,"message":"1676","line":155,"column":45,"nodeType":"1677","messageId":"1678","endLine":155,"endColumn":47},{"ruleId":"1675","severity":1,"message":"1676","line":167,"column":45,"nodeType":"1677","messageId":"1678","endLine":167,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1808","line":169,"column":11,"nodeType":"1654","messageId":"1655","endLine":169,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1809","line":181,"column":11,"nodeType":"1654","messageId":"1655","endLine":181,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1810","line":1003,"column":10,"nodeType":"1654","messageId":"1655","endLine":1003,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":13,"column":10,"nodeType":"1727","messageId":"1728","endLine":13,"endColumn":24,"fix":"1811"},{"ruleId":"1667","severity":1,"message":"1761","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":10,"suggestions":"1812"},{"ruleId":"1652","severity":1,"message":"1798","line":3,"column":61,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":66},{"ruleId":"1652","severity":1,"message":"1813","line":61,"column":9,"nodeType":"1654","messageId":"1655","endLine":61,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1814","line":62,"column":11,"nodeType":"1654","messageId":"1655","endLine":62,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1815","line":68,"column":12,"nodeType":"1654","messageId":"1655","endLine":68,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1730","line":71,"column":12,"nodeType":"1654","messageId":"1655","endLine":71,"endColumn":24},{"ruleId":"1667","severity":1,"message":"1816","line":111,"column":8,"nodeType":"1669","endLine":111,"endColumn":54,"suggestions":"1817"},{"ruleId":"1699","severity":1,"message":"1700","line":167,"column":38,"nodeType":"1701","messageId":"1702","endLine":167,"endColumn":40},{"ruleId":"1699","severity":1,"message":"1700","line":168,"column":40,"nodeType":"1701","messageId":"1702","endLine":168,"endColumn":42},{"ruleId":"1671","severity":1,"message":"1672","line":221,"column":9,"nodeType":"1673","messageId":"1674","endLine":221,"endColumn":104},{"ruleId":"1671","severity":1,"message":"1672","line":222,"column":9,"nodeType":"1673","messageId":"1674","endLine":222,"endColumn":116},{"ruleId":"1675","severity":1,"message":"1676","line":226,"column":49,"nodeType":"1677","messageId":"1678","endLine":226,"endColumn":51},{"ruleId":"1804","severity":1,"message":"1805","line":494,"column":48,"nodeType":"1806","messageId":"1807","endLine":494,"endColumn":50},{"ruleId":"1804","severity":1,"message":"1805","line":494,"column":72,"nodeType":"1806","messageId":"1807","endLine":494,"endColumn":74},{"ruleId":"1667","severity":1,"message":"1740","line":21,"column":8,"nodeType":"1669","endLine":21,"endColumn":63,"suggestions":"1818"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":13,"column":10,"nodeType":"1727","messageId":"1728","endLine":13,"endColumn":24,"fix":"1819"},{"ruleId":"1652","severity":1,"message":"1814","line":84,"column":11,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":21},{"ruleId":"1667","severity":1,"message":"1820","line":119,"column":8,"nodeType":"1669","endLine":119,"endColumn":29,"suggestions":"1821"},{"ruleId":"1675","severity":1,"message":"1676","line":222,"column":45,"nodeType":"1677","messageId":"1678","endLine":222,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1757","line":5,"column":41,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1745","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":18},{"ruleId":"1667","severity":1,"message":"1822","line":204,"column":8,"nodeType":"1669","endLine":204,"endColumn":32,"suggestions":"1823"},{"ruleId":"1652","severity":1,"message":"1824","line":352,"column":11,"nodeType":"1654","messageId":"1655","endLine":352,"endColumn":23},{"ruleId":"1667","severity":1,"message":"1825","line":21,"column":8,"nodeType":"1669","endLine":21,"endColumn":63,"suggestions":"1826"},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"1827"},{"ruleId":"1652","severity":1,"message":"1738","line":64,"column":7,"nodeType":"1654","messageId":"1655","endLine":64,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1828","line":109,"column":12,"nodeType":"1654","messageId":"1655","endLine":109,"endColumn":23},{"ruleId":"1675","severity":1,"message":"1676","line":149,"column":76,"nodeType":"1677","messageId":"1678","endLine":149,"endColumn":78},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":26},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"1829"},{"ruleId":"1652","severity":1,"message":"1830","line":34,"column":8,"nodeType":"1654","messageId":"1655","endLine":34,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1738","line":66,"column":7,"nodeType":"1654","messageId":"1655","endLine":66,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1831","line":123,"column":11,"nodeType":"1654","messageId":"1655","endLine":123,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1798","line":3,"column":61,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":66},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1800","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1686","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1813","line":62,"column":9,"nodeType":"1654","messageId":"1655","endLine":62,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1832","line":68,"column":12,"nodeType":"1654","messageId":"1655","endLine":68,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1833","line":69,"column":12,"nodeType":"1654","messageId":"1655","endLine":69,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1834","line":74,"column":12,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1835","line":74,"column":29,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":47},{"ruleId":"1667","severity":1,"message":"1836","line":140,"column":8,"nodeType":"1669","endLine":140,"endColumn":54,"suggestions":"1837"},{"ruleId":"1652","severity":1,"message":"1838","line":143,"column":11,"nodeType":"1654","messageId":"1655","endLine":143,"endColumn":21},{"ruleId":"1675","severity":1,"message":"1676","line":261,"column":49,"nodeType":"1677","messageId":"1678","endLine":261,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1839","line":3,"column":10,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1840","line":3,"column":20,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1841","line":3,"column":25,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1842","line":5,"column":8,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1735","line":6,"column":10,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1843","line":11,"column":9,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":30},{"ruleId":"1656","replacedBy":"1844"},{"ruleId":"1658","replacedBy":"1845"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":13,"column":10,"nodeType":"1727","messageId":"1728","endLine":13,"endColumn":24,"fix":"1846"},{"ruleId":"1652","severity":1,"message":"1847","line":91,"column":12,"nodeType":"1654","messageId":"1655","endLine":91,"endColumn":32},{"ruleId":"1652","severity":1,"message":"1760","line":99,"column":25,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1761","line":162,"column":8,"nodeType":"1669","endLine":162,"endColumn":53,"suggestions":"1848"},{"ruleId":"1763","severity":1,"message":"1849","line":300,"column":43,"nodeType":"1765","messageId":"1766","endLine":300,"endColumn":60,"fix":"1850"},{"ruleId":"1763","severity":1,"message":"1851","line":308,"column":43,"nodeType":"1765","messageId":"1766","endLine":308,"endColumn":73,"fix":"1852"},{"ruleId":"1763","severity":1,"message":"1853","line":309,"column":43,"nodeType":"1765","messageId":"1766","endLine":309,"endColumn":68,"fix":"1854"},{"ruleId":"1763","severity":1,"message":"1855","line":310,"column":43,"nodeType":"1765","messageId":"1766","endLine":310,"endColumn":63,"fix":"1856"},{"ruleId":"1763","severity":1,"message":"1857","line":311,"column":43,"nodeType":"1765","messageId":"1766","endLine":311,"endColumn":77,"fix":"1858"},{"ruleId":"1763","severity":1,"message":"1859","line":317,"column":43,"nodeType":"1765","messageId":"1766","endLine":317,"endColumn":64,"fix":"1860"},{"ruleId":"1763","severity":1,"message":"1861","line":318,"column":43,"nodeType":"1765","messageId":"1766","endLine":318,"endColumn":70,"fix":"1862"},{"ruleId":"1763","severity":1,"message":"1863","line":324,"column":43,"nodeType":"1765","messageId":"1766","endLine":324,"endColumn":81,"fix":"1864"},{"ruleId":"1763","severity":1,"message":"1865","line":333,"column":43,"nodeType":"1765","messageId":"1766","endLine":333,"endColumn":75,"fix":"1866"},{"ruleId":"1763","severity":1,"message":"1861","line":334,"column":43,"nodeType":"1765","messageId":"1766","endLine":334,"endColumn":70,"fix":"1867"},{"ruleId":"1763","severity":1,"message":"1859","line":335,"column":43,"nodeType":"1765","messageId":"1766","endLine":335,"endColumn":64,"fix":"1868"},{"ruleId":"1763","severity":1,"message":"1851","line":336,"column":43,"nodeType":"1765","messageId":"1766","endLine":336,"endColumn":73,"fix":"1869"},{"ruleId":"1763","severity":1,"message":"1861","line":337,"column":43,"nodeType":"1765","messageId":"1766","endLine":337,"endColumn":70,"fix":"1870"},{"ruleId":"1763","severity":1,"message":"1853","line":344,"column":43,"nodeType":"1765","messageId":"1766","endLine":344,"endColumn":68,"fix":"1871"},{"ruleId":"1763","severity":1,"message":"1855","line":345,"column":43,"nodeType":"1765","messageId":"1766","endLine":345,"endColumn":63,"fix":"1872"},{"ruleId":"1763","severity":1,"message":"1873","line":346,"column":43,"nodeType":"1765","messageId":"1766","endLine":346,"endColumn":69,"fix":"1874"},{"ruleId":"1671","severity":1,"message":"1672","line":367,"column":5,"nodeType":"1673","messageId":"1674","endLine":367,"endColumn":111},{"ruleId":"1671","severity":1,"message":"1672","line":373,"column":5,"nodeType":"1673","messageId":"1674","endLine":373,"endColumn":150},{"ruleId":"1671","severity":1,"message":"1672","line":374,"column":5,"nodeType":"1673","messageId":"1674","endLine":374,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":375,"column":5,"nodeType":"1673","messageId":"1674","endLine":375,"endColumn":166},{"ruleId":"1671","severity":1,"message":"1672","line":376,"column":5,"nodeType":"1673","messageId":"1674","endLine":376,"endColumn":132},{"ruleId":"1671","severity":1,"message":"1672","line":379,"column":5,"nodeType":"1673","messageId":"1674","endLine":379,"endColumn":129},{"ruleId":"1671","severity":1,"message":"1672","line":380,"column":5,"nodeType":"1673","messageId":"1674","endLine":380,"endColumn":147},{"ruleId":"1671","severity":1,"message":"1672","line":381,"column":5,"nodeType":"1673","messageId":"1674","endLine":381,"endColumn":248},{"ruleId":"1804","severity":1,"message":"1805","line":381,"column":92,"nodeType":"1806","messageId":"1807","endLine":381,"endColumn":94},{"ruleId":"1804","severity":1,"message":"1805","line":381,"column":156,"nodeType":"1806","messageId":"1807","endLine":381,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":382,"column":5,"nodeType":"1673","messageId":"1674","endLine":382,"endColumn":166},{"ruleId":"1675","severity":1,"message":"1676","line":386,"column":45,"nodeType":"1677","messageId":"1678","endLine":386,"endColumn":47},{"ruleId":"1675","severity":1,"message":"1676","line":398,"column":45,"nodeType":"1677","messageId":"1678","endLine":398,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1875","line":1,"column":38,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":44},{"ruleId":"1652","severity":1,"message":"1876","line":2,"column":9,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1877","line":2,"column":15,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1878","line":2,"column":28,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1755","line":2,"column":38,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":42},{"ruleId":"1652","severity":1,"message":"1736","line":3,"column":15,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1737","line":3,"column":20,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1879","line":3,"column":44,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":54},{"ruleId":"1652","severity":1,"message":"1748","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1880","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1881","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1882","line":19,"column":17,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1883","line":20,"column":10,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1884","line":20,"column":18,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1885","line":20,"column":26,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1886","line":20,"column":33,"nodeType":"1654","messageId":"1655","endLine":20,"endColumn":40},{"ruleId":"1652","severity":1,"message":"1887","line":22,"column":8,"nodeType":"1654","messageId":"1655","endLine":22,"endColumn":11},{"ruleId":"1652","severity":1,"message":"1888","line":23,"column":8,"nodeType":"1654","messageId":"1655","endLine":23,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1747","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1889","line":25,"column":8,"nodeType":"1654","messageId":"1655","endLine":25,"endColumn":11},{"ruleId":"1652","severity":1,"message":"1890","line":26,"column":8,"nodeType":"1654","messageId":"1655","endLine":26,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1891","line":29,"column":8,"nodeType":"1654","messageId":"1655","endLine":29,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1892","line":38,"column":8,"nodeType":"1654","messageId":"1655","endLine":38,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1893","line":115,"column":11,"nodeType":"1654","messageId":"1655","endLine":115,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1894","line":119,"column":12,"nodeType":"1654","messageId":"1655","endLine":119,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1719","line":120,"column":12,"nodeType":"1654","messageId":"1655","endLine":120,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1895","line":123,"column":12,"nodeType":"1654","messageId":"1655","endLine":123,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1896","line":129,"column":12,"nodeType":"1654","messageId":"1655","endLine":129,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1897","line":131,"column":11,"nodeType":"1654","messageId":"1655","endLine":131,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1898","line":191,"column":8,"nodeType":"1669","endLine":191,"endColumn":10,"suggestions":"1899"},{"ruleId":"1652","severity":1,"message":"1900","line":222,"column":11,"nodeType":"1654","messageId":"1655","endLine":222,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1798","line":3,"column":61,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":66},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1800","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1686","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1901","line":14,"column":8,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1902","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1687","line":18,"column":10,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":18,"column":15,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1903","line":78,"column":12,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":28},{"ruleId":"1667","severity":1,"message":"1904","line":101,"column":12,"nodeType":"1669","endLine":101,"endColumn":58,"suggestions":"1905"},{"ruleId":"1652","severity":1,"message":"1906","line":188,"column":11,"nodeType":"1654","messageId":"1655","endLine":188,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1907","line":207,"column":11,"nodeType":"1654","messageId":"1655","endLine":207,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1908","line":214,"column":13,"nodeType":"1654","messageId":"1655","endLine":214,"endColumn":24},{"ruleId":"1675","severity":1,"message":"1676","line":231,"column":49,"nodeType":"1677","messageId":"1678","endLine":231,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1830","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1909","line":12,"column":10,"nodeType":"1654","messageId":"1655","endLine":12,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1751","line":54,"column":20,"nodeType":"1654","messageId":"1655","endLine":54,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":55,"column":12,"nodeType":"1654","messageId":"1655","endLine":55,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1910","line":69,"column":8,"nodeType":"1669","endLine":69,"endColumn":32,"suggestions":"1911"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1909","line":12,"column":10,"nodeType":"1654","messageId":"1655","endLine":12,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1751","line":55,"column":20,"nodeType":"1654","messageId":"1655","endLine":55,"endColumn":29},{"ruleId":"1667","severity":1,"message":"1912","line":69,"column":12,"nodeType":"1669","endLine":69,"endColumn":36,"suggestions":"1913"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1830","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1751","line":54,"column":20,"nodeType":"1654","messageId":"1655","endLine":54,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":55,"column":12,"nodeType":"1654","messageId":"1655","endLine":55,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1910","line":69,"column":8,"nodeType":"1669","endLine":69,"endColumn":32,"suggestions":"1914"},{"ruleId":"1652","severity":1,"message":"1915","line":62,"column":5,"nodeType":"1654","messageId":"1655","endLine":62,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1916","line":71,"column":31,"nodeType":"1654","messageId":"1655","endLine":71,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1917","line":72,"column":12,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1918","line":78,"column":12,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1919","line":79,"column":12,"nodeType":"1654","messageId":"1655","endLine":79,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1920","line":86,"column":12,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1921","line":95,"column":12,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1922","line":96,"column":12,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":22},{"ruleId":"1667","severity":1,"message":"1923","line":155,"column":8,"nodeType":"1669","endLine":155,"endColumn":81,"suggestions":"1924"},{"ruleId":"1652","severity":1,"message":"1925","line":276,"column":23,"nodeType":"1654","messageId":"1655","endLine":276,"endColumn":36},{"ruleId":"1699","severity":1,"message":"1926","line":414,"column":58,"nodeType":"1701","messageId":"1927","endLine":414,"endColumn":60},{"ruleId":"1675","severity":1,"message":"1676","line":415,"column":31,"nodeType":"1677","messageId":"1678","endLine":415,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1926","line":448,"column":60,"nodeType":"1701","messageId":"1927","endLine":448,"endColumn":62},{"ruleId":"1675","severity":1,"message":"1676","line":449,"column":31,"nodeType":"1677","messageId":"1678","endLine":449,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1926","line":482,"column":60,"nodeType":"1701","messageId":"1927","endLine":482,"endColumn":62},{"ruleId":"1675","severity":1,"message":"1676","line":483,"column":31,"nodeType":"1677","messageId":"1678","endLine":483,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1926","line":516,"column":63,"nodeType":"1701","messageId":"1927","endLine":516,"endColumn":65},{"ruleId":"1675","severity":1,"message":"1676","line":517,"column":31,"nodeType":"1677","messageId":"1678","endLine":517,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1928","line":657,"column":15,"nodeType":"1654","messageId":"1655","endLine":657,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1929","line":734,"column":11,"nodeType":"1654","messageId":"1655","endLine":734,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1745","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1930","line":99,"column":11,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1788","line":102,"column":20,"nodeType":"1654","messageId":"1655","endLine":102,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1931","line":107,"column":12,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1932","line":108,"column":12,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":23},{"ruleId":"1667","severity":1,"message":"1933","line":197,"column":17,"nodeType":"1934","endLine":197,"endColumn":116},{"ruleId":"1763","severity":1,"message":"1935","line":255,"column":37,"nodeType":"1765","messageId":"1766","endLine":255,"endColumn":83,"fix":"1936"},{"ruleId":"1763","severity":1,"message":"1937","line":385,"column":43,"nodeType":"1765","messageId":"1766","endLine":385,"endColumn":73,"fix":"1938"},{"ruleId":"1763","severity":1,"message":"1939","line":386,"column":43,"nodeType":"1765","messageId":"1766","endLine":386,"endColumn":79,"fix":"1940"},{"ruleId":"1652","severity":1,"message":"1941","line":465,"column":11,"nodeType":"1654","messageId":"1655","endLine":465,"endColumn":38},{"ruleId":"1942","severity":1,"message":"1943","line":511,"column":41,"nodeType":"1944","messageId":"1945","endLine":511,"endColumn":66},{"ruleId":"1725","severity":1,"message":"1726","line":9,"column":10,"nodeType":"1727","messageId":"1728","endLine":9,"endColumn":24,"fix":"1946"},{"ruleId":"1652","severity":1,"message":"1751","line":82,"column":20,"nodeType":"1654","messageId":"1655","endLine":82,"endColumn":29},{"ruleId":"1667","severity":1,"message":"1947","line":94,"column":8,"nodeType":"1669","endLine":94,"endColumn":32,"suggestions":"1948"},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"1949"},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1706","line":2,"column":28,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":36},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1757","line":4,"column":58,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":68},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1747","line":26,"column":10,"nodeType":"1654","messageId":"1655","endLine":26,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1738","line":30,"column":7,"nodeType":"1654","messageId":"1655","endLine":30,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1791","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1953","line":11,"column":10,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1707","line":2,"column":17,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1706","line":2,"column":28,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":36},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1757","line":4,"column":58,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":68},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1747","line":26,"column":10,"nodeType":"1654","messageId":"1655","endLine":26,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1738","line":30,"column":7,"nodeType":"1654","messageId":"1655","endLine":30,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1950","line":9,"column":15,"nodeType":"1654","messageId":"1655","endLine":9,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":13,"column":9,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":16,"column":10,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1747","line":24,"column":10,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1751","line":72,"column":20,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1954","line":187,"column":11,"nodeType":"1654","messageId":"1655","endLine":187,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1955","line":193,"column":11,"nodeType":"1654","messageId":"1655","endLine":193,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1707","line":2,"column":17,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1706","line":2,"column":28,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":36},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1757","line":4,"column":58,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":68},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1747","line":26,"column":10,"nodeType":"1654","messageId":"1655","endLine":26,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1738","line":30,"column":7,"nodeType":"1654","messageId":"1655","endLine":30,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1950","line":9,"column":15,"nodeType":"1654","messageId":"1655","endLine":9,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":13,"column":9,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":16,"column":10,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1710","line":18,"column":9,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":18,"column":23,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1747","line":24,"column":10,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1717","line":69,"column":11,"nodeType":"1654","messageId":"1655","endLine":69,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":71,"column":20,"nodeType":"1654","messageId":"1655","endLine":71,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":72,"column":9,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"1957"},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1736","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1737","line":24,"column":16,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":13,"column":10,"nodeType":"1727","messageId":"1728","endLine":13,"endColumn":24,"fix":"1958"},{"ruleId":"1652","severity":1,"message":"1847","line":92,"column":12,"nodeType":"1654","messageId":"1655","endLine":92,"endColumn":32},{"ruleId":"1652","severity":1,"message":"1760","line":107,"column":25,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1761","line":172,"column":8,"nodeType":"1669","endLine":172,"endColumn":10,"suggestions":"1959"},{"ruleId":"1763","severity":1,"message":"1849","line":391,"column":43,"nodeType":"1765","messageId":"1766","endLine":391,"endColumn":60,"fix":"1960"},{"ruleId":"1763","severity":1,"message":"1851","line":399,"column":43,"nodeType":"1765","messageId":"1766","endLine":399,"endColumn":73,"fix":"1961"},{"ruleId":"1763","severity":1,"message":"1853","line":400,"column":43,"nodeType":"1765","messageId":"1766","endLine":400,"endColumn":68,"fix":"1962"},{"ruleId":"1763","severity":1,"message":"1855","line":401,"column":43,"nodeType":"1765","messageId":"1766","endLine":401,"endColumn":63,"fix":"1963"},{"ruleId":"1763","severity":1,"message":"1857","line":402,"column":43,"nodeType":"1765","messageId":"1766","endLine":402,"endColumn":77,"fix":"1964"},{"ruleId":"1763","severity":1,"message":"1859","line":408,"column":43,"nodeType":"1765","messageId":"1766","endLine":408,"endColumn":64,"fix":"1965"},{"ruleId":"1763","severity":1,"message":"1861","line":409,"column":43,"nodeType":"1765","messageId":"1766","endLine":409,"endColumn":70,"fix":"1966"},{"ruleId":"1763","severity":1,"message":"1863","line":415,"column":43,"nodeType":"1765","messageId":"1766","endLine":415,"endColumn":81,"fix":"1967"},{"ruleId":"1763","severity":1,"message":"1865","line":424,"column":43,"nodeType":"1765","messageId":"1766","endLine":424,"endColumn":75,"fix":"1968"},{"ruleId":"1763","severity":1,"message":"1861","line":425,"column":43,"nodeType":"1765","messageId":"1766","endLine":425,"endColumn":70,"fix":"1969"},{"ruleId":"1763","severity":1,"message":"1859","line":426,"column":43,"nodeType":"1765","messageId":"1766","endLine":426,"endColumn":64,"fix":"1970"},{"ruleId":"1763","severity":1,"message":"1851","line":427,"column":43,"nodeType":"1765","messageId":"1766","endLine":427,"endColumn":73,"fix":"1971"},{"ruleId":"1763","severity":1,"message":"1861","line":428,"column":43,"nodeType":"1765","messageId":"1766","endLine":428,"endColumn":70,"fix":"1972"},{"ruleId":"1763","severity":1,"message":"1853","line":435,"column":43,"nodeType":"1765","messageId":"1766","endLine":435,"endColumn":68,"fix":"1973"},{"ruleId":"1763","severity":1,"message":"1855","line":436,"column":43,"nodeType":"1765","messageId":"1766","endLine":436,"endColumn":63,"fix":"1974"},{"ruleId":"1763","severity":1,"message":"1873","line":437,"column":43,"nodeType":"1765","messageId":"1766","endLine":437,"endColumn":69,"fix":"1975"},{"ruleId":"1671","severity":1,"message":"1672","line":460,"column":5,"nodeType":"1673","messageId":"1674","endLine":460,"endColumn":111},{"ruleId":"1671","severity":1,"message":"1672","line":466,"column":5,"nodeType":"1673","messageId":"1674","endLine":466,"endColumn":150},{"ruleId":"1671","severity":1,"message":"1672","line":467,"column":5,"nodeType":"1673","messageId":"1674","endLine":467,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":468,"column":5,"nodeType":"1673","messageId":"1674","endLine":468,"endColumn":166},{"ruleId":"1671","severity":1,"message":"1672","line":469,"column":5,"nodeType":"1673","messageId":"1674","endLine":469,"endColumn":132},{"ruleId":"1671","severity":1,"message":"1672","line":472,"column":5,"nodeType":"1673","messageId":"1674","endLine":472,"endColumn":129},{"ruleId":"1671","severity":1,"message":"1672","line":473,"column":5,"nodeType":"1673","messageId":"1674","endLine":473,"endColumn":147},{"ruleId":"1671","severity":1,"message":"1672","line":474,"column":5,"nodeType":"1673","messageId":"1674","endLine":474,"endColumn":248},{"ruleId":"1804","severity":1,"message":"1805","line":474,"column":92,"nodeType":"1806","messageId":"1807","endLine":474,"endColumn":94},{"ruleId":"1804","severity":1,"message":"1805","line":474,"column":156,"nodeType":"1806","messageId":"1807","endLine":474,"endColumn":158},{"ruleId":"1671","severity":1,"message":"1672","line":475,"column":5,"nodeType":"1673","messageId":"1674","endLine":475,"endColumn":166},{"ruleId":"1675","severity":1,"message":"1676","line":479,"column":45,"nodeType":"1677","messageId":"1678","endLine":479,"endColumn":47},{"ruleId":"1675","severity":1,"message":"1676","line":491,"column":45,"nodeType":"1677","messageId":"1678","endLine":491,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1755","line":3,"column":15,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1976","line":3,"column":35,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":44},{"ruleId":"1652","severity":1,"message":"1977","line":3,"column":46,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":54},{"ruleId":"1652","severity":1,"message":"1950","line":5,"column":16,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1843","line":9,"column":9,"nodeType":"1654","messageId":"1655","endLine":9,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1978","line":10,"column":9,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1979","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1717","line":35,"column":9,"nodeType":"1654","messageId":"1655","endLine":35,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1980","line":36,"column":10,"nodeType":"1654","messageId":"1655","endLine":36,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1981","line":39,"column":9,"nodeType":"1654","messageId":"1655","endLine":39,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1982","line":42,"column":9,"nodeType":"1654","messageId":"1655","endLine":42,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1983","line":43,"column":11,"nodeType":"1654","messageId":"1655","endLine":43,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1984","line":44,"column":9,"nodeType":"1654","messageId":"1655","endLine":44,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1985","line":51,"column":9,"nodeType":"1654","messageId":"1655","endLine":51,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1986","line":53,"column":9,"nodeType":"1654","messageId":"1655","endLine":53,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1987","line":57,"column":9,"nodeType":"1654","messageId":"1655","endLine":57,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1988","line":1,"column":8,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1989","line":2,"column":8,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1756","line":3,"column":34,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1757","line":3,"column":84,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":94},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1747","line":18,"column":15,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1990","line":73,"column":12,"nodeType":"1654","messageId":"1655","endLine":73,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1991","line":75,"column":12,"nodeType":"1654","messageId":"1655","endLine":75,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1903","line":79,"column":12,"nodeType":"1654","messageId":"1655","endLine":79,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1906","line":200,"column":11,"nodeType":"1654","messageId":"1655","endLine":200,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1992","line":215,"column":11,"nodeType":"1654","messageId":"1655","endLine":215,"endColumn":32},{"ruleId":"1675","severity":1,"message":"1676","line":264,"column":49,"nodeType":"1677","messageId":"1678","endLine":264,"endColumn":51},{"ruleId":"1675","severity":1,"message":"1676","line":574,"column":45,"nodeType":"1677","messageId":"1678","endLine":574,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1747","line":18,"column":15,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1991","line":75,"column":12,"nodeType":"1654","messageId":"1655","endLine":75,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1903","line":79,"column":12,"nodeType":"1654","messageId":"1655","endLine":79,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1906","line":201,"column":11,"nodeType":"1654","messageId":"1655","endLine":201,"endColumn":34},{"ruleId":"1675","severity":1,"message":"1676","line":265,"column":49,"nodeType":"1677","messageId":"1678","endLine":265,"endColumn":51},{"ruleId":"1675","severity":1,"message":"1676","line":873,"column":45,"nodeType":"1677","messageId":"1678","endLine":873,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1814","line":66,"column":11,"nodeType":"1654","messageId":"1655","endLine":66,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1833","line":73,"column":12,"nodeType":"1654","messageId":"1655","endLine":73,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1991","line":77,"column":12,"nodeType":"1654","messageId":"1655","endLine":77,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1730","line":78,"column":12,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1993","line":85,"column":12,"nodeType":"1654","messageId":"1655","endLine":85,"endColumn":26},{"ruleId":"1667","severity":1,"message":"1994","line":121,"column":8,"nodeType":"1669","endLine":121,"endColumn":46,"suggestions":"1995"},{"ruleId":"1699","severity":1,"message":"1700","line":174,"column":38,"nodeType":"1701","messageId":"1702","endLine":174,"endColumn":40},{"ruleId":"1699","severity":1,"message":"1700","line":175,"column":40,"nodeType":"1701","messageId":"1702","endLine":175,"endColumn":42},{"ruleId":"1671","severity":1,"message":"1672","line":338,"column":9,"nodeType":"1673","messageId":"1674","endLine":338,"endColumn":104},{"ruleId":"1671","severity":1,"message":"1672","line":339,"column":9,"nodeType":"1673","messageId":"1674","endLine":339,"endColumn":116},{"ruleId":"1675","severity":1,"message":"1676","line":344,"column":49,"nodeType":"1677","messageId":"1678","endLine":344,"endColumn":51},{"ruleId":"1675","severity":1,"message":"1676","line":804,"column":45,"nodeType":"1677","messageId":"1678","endLine":804,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1798","line":3,"column":61,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":66},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1800","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1686","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1813","line":64,"column":9,"nodeType":"1654","messageId":"1655","endLine":64,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1814","line":66,"column":11,"nodeType":"1654","messageId":"1655","endLine":66,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1833","line":73,"column":12,"nodeType":"1654","messageId":"1655","endLine":73,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1996","line":74,"column":23,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":35},{"ruleId":"1652","severity":1,"message":"1990","line":75,"column":12,"nodeType":"1654","messageId":"1655","endLine":75,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1997","line":76,"column":12,"nodeType":"1654","messageId":"1655","endLine":76,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1903","line":82,"column":12,"nodeType":"1654","messageId":"1655","endLine":82,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1730","line":84,"column":12,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":24},{"ruleId":"1667","severity":1,"message":"1998","line":125,"column":8,"nodeType":"1669","endLine":125,"endColumn":29,"suggestions":"1999"},{"ruleId":"1652","severity":1,"message":"2000","line":257,"column":11,"nodeType":"1654","messageId":"1655","endLine":257,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1906","line":267,"column":11,"nodeType":"1654","messageId":"1655","endLine":267,"endColumn":34},{"ruleId":"1652","severity":1,"message":"2001","line":294,"column":11,"nodeType":"1654","messageId":"1655","endLine":294,"endColumn":37},{"ruleId":"2002","severity":1,"message":"2003","line":295,"column":9,"nodeType":"1654","messageId":"2004","endLine":295,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1992","line":299,"column":11,"nodeType":"1654","messageId":"1655","endLine":299,"endColumn":32},{"ruleId":"1675","severity":1,"message":"1676","line":347,"column":49,"nodeType":"1677","messageId":"1678","endLine":347,"endColumn":51},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2005"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"2006"},{"ruleId":"1652","severity":1,"message":"1687","line":14,"column":10,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":14,"column":15,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2007","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":16},{"ruleId":"1652","severity":1,"message":"2008","line":16,"column":8,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1751","line":57,"column":20,"nodeType":"1654","messageId":"1655","endLine":57,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":58,"column":12,"nodeType":"1654","messageId":"1655","endLine":58,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1910","line":72,"column":8,"nodeType":"1669","endLine":72,"endColumn":29,"suggestions":"2009"},{"ruleId":"1652","severity":1,"message":"1798","line":3,"column":61,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":66},{"ruleId":"1652","severity":1,"message":"1758","line":3,"column":68,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":82},{"ruleId":"1652","severity":1,"message":"1757","line":3,"column":84,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":94},{"ruleId":"1652","severity":1,"message":"1745","line":7,"column":8,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1800","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1686","line":13,"column":25,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":33},{"ruleId":"1652","severity":1,"message":"2010","line":17,"column":9,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1687","line":18,"column":10,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":18,"column":15,"nodeType":"1654","messageId":"1655","endLine":18,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1814","line":65,"column":11,"nodeType":"1654","messageId":"1655","endLine":65,"endColumn":21},{"ruleId":"1652","severity":1,"message":"1833","line":71,"column":12,"nodeType":"1654","messageId":"1655","endLine":71,"endColumn":24},{"ruleId":"1652","severity":1,"message":"2011","line":72,"column":12,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2012","line":72,"column":23,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":32},{"ruleId":"1652","severity":1,"message":"1990","line":74,"column":12,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":16},{"ruleId":"1652","severity":1,"message":"2013","line":74,"column":18,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1997","line":75,"column":12,"nodeType":"1654","messageId":"1655","endLine":75,"endColumn":22},{"ruleId":"1652","severity":1,"message":"2014","line":75,"column":24,"nodeType":"1654","messageId":"1655","endLine":75,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1903","line":80,"column":12,"nodeType":"1654","messageId":"1655","endLine":80,"endColumn":28},{"ruleId":"1652","severity":1,"message":"2015","line":80,"column":30,"nodeType":"1654","messageId":"1655","endLine":80,"endColumn":49},{"ruleId":"1667","severity":1,"message":"2016","line":103,"column":12,"nodeType":"1669","endLine":103,"endColumn":33,"suggestions":"2017"},{"ruleId":"1652","severity":1,"message":"1906","line":174,"column":11,"nodeType":"1654","messageId":"1655","endLine":174,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1907","line":190,"column":11,"nodeType":"1654","messageId":"1655","endLine":190,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1908","line":199,"column":13,"nodeType":"1654","messageId":"1655","endLine":199,"endColumn":24},{"ruleId":"1675","severity":1,"message":"1676","line":217,"column":49,"nodeType":"1677","messageId":"1678","endLine":217,"endColumn":51},{"ruleId":"1652","severity":1,"message":"2018","line":447,"column":10,"nodeType":"1654","messageId":"1655","endLine":447,"endColumn":24},{"ruleId":"1675","severity":1,"message":"1676","line":462,"column":45,"nodeType":"1677","messageId":"1678","endLine":462,"endColumn":47},{"ruleId":"1656","replacedBy":"2019"},{"ruleId":"1658","replacedBy":"2020"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"2021"},{"ruleId":"1652","severity":1,"message":"1687","line":14,"column":10,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":14,"column":15,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2007","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":16},{"ruleId":"1652","severity":1,"message":"2008","line":16,"column":8,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1751","line":57,"column":20,"nodeType":"1654","messageId":"1655","endLine":57,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1719","line":58,"column":12,"nodeType":"1654","messageId":"1655","endLine":58,"endColumn":19},{"ruleId":"1667","severity":1,"message":"1910","line":72,"column":8,"nodeType":"1669","endLine":72,"endColumn":29,"suggestions":"2022"},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"2023"},{"ruleId":"1652","severity":1,"message":"1687","line":14,"column":10,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1747","line":14,"column":15,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2007","line":15,"column":8,"nodeType":"1654","messageId":"1655","endLine":15,"endColumn":16},{"ruleId":"1652","severity":1,"message":"2008","line":16,"column":8,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1794","line":58,"column":12,"nodeType":"1654","messageId":"1655","endLine":58,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":59,"column":20,"nodeType":"1654","messageId":"1655","endLine":59,"endColumn":29},{"ruleId":"1667","severity":1,"message":"1912","line":73,"column":12,"nodeType":"1669","endLine":73,"endColumn":14,"suggestions":"2024"},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2025"},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1736","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1737","line":24,"column":16,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1839","line":33,"column":10,"nodeType":"1654","messageId":"1655","endLine":33,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2026","line":33,"column":27,"nodeType":"1654","messageId":"1655","endLine":33,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1687","line":33,"column":33,"nodeType":"1654","messageId":"1655","endLine":33,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1738","line":55,"column":7,"nodeType":"1654","messageId":"1655","endLine":55,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1740","line":105,"column":10,"nodeType":"1669","endLine":105,"endColumn":31,"suggestions":"2027"},{"ruleId":"1652","severity":1,"message":"2028","line":128,"column":12,"nodeType":"1654","messageId":"1655","endLine":128,"endColumn":26},{"ruleId":"1725","severity":1,"message":"1726","line":6,"column":10,"nodeType":"1727","messageId":"1728","endLine":6,"endColumn":24,"fix":"2029"},{"ruleId":"1652","severity":1,"message":"1719","line":108,"column":10,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1990","line":122,"column":10,"nodeType":"1654","messageId":"1655","endLine":122,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1931","line":123,"column":10,"nodeType":"1654","messageId":"1655","endLine":123,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2030","line":127,"column":10,"nodeType":"1654","messageId":"1655","endLine":127,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1993","line":147,"column":10,"nodeType":"1654","messageId":"1655","endLine":147,"endColumn":24},{"ruleId":"2031","severity":1,"message":"2032","line":203,"column":5,"nodeType":"2033","messageId":"1678","endLine":203,"endColumn":17},{"ruleId":"1667","severity":1,"message":"2034","line":270,"column":6,"nodeType":"1669","endLine":270,"endColumn":24,"suggestions":"2035"},{"ruleId":"1699","severity":1,"message":"1700","line":451,"column":32,"nodeType":"1701","messageId":"1702","endLine":451,"endColumn":34},{"ruleId":"1699","severity":1,"message":"1700","line":452,"column":32,"nodeType":"1701","messageId":"1702","endLine":452,"endColumn":34},{"ruleId":"1652","severity":1,"message":"2036","line":585,"column":11,"nodeType":"1654","messageId":"1655","endLine":585,"endColumn":20},{"ruleId":"1675","severity":1,"message":"1676","line":628,"column":45,"nodeType":"1677","messageId":"1678","endLine":628,"endColumn":47},{"ruleId":"1675","severity":1,"message":"1676","line":639,"column":45,"nodeType":"1677","messageId":"1678","endLine":639,"endColumn":47},{"ruleId":"1671","severity":1,"message":"1672","line":784,"column":5,"nodeType":"1673","messageId":"1674","endLine":784,"endColumn":139},{"ruleId":"1675","severity":1,"message":"1676","line":802,"column":45,"nodeType":"1677","messageId":"1678","endLine":802,"endColumn":47},{"ruleId":"1652","severity":1,"message":"2000","line":804,"column":9,"nodeType":"1654","messageId":"1655","endLine":804,"endColumn":32},{"ruleId":"1675","severity":1,"message":"1676","line":2031,"column":43,"nodeType":"1677","messageId":"1678","endLine":2031,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1915","line":62,"column":5,"nodeType":"1654","messageId":"1655","endLine":62,"endColumn":22},{"ruleId":"1652","severity":1,"message":"2037","line":72,"column":28,"nodeType":"1654","messageId":"1655","endLine":72,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1916","line":73,"column":31,"nodeType":"1654","messageId":"1655","endLine":73,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1917","line":74,"column":12,"nodeType":"1654","messageId":"1655","endLine":74,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1921","line":78,"column":12,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1919","line":85,"column":12,"nodeType":"1654","messageId":"1655","endLine":85,"endColumn":19},{"ruleId":"1652","severity":1,"message":"2038","line":86,"column":12,"nodeType":"1654","messageId":"1655","endLine":86,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1920","line":93,"column":12,"nodeType":"1654","messageId":"1655","endLine":93,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1922","line":101,"column":12,"nodeType":"1654","messageId":"1655","endLine":101,"endColumn":22},{"ruleId":"1667","severity":1,"message":"2039","line":169,"column":8,"nodeType":"1669","endLine":169,"endColumn":70,"suggestions":"2040"},{"ruleId":"1667","severity":1,"message":"2041","line":169,"column":25,"nodeType":"1677","endLine":169,"endColumn":45},{"ruleId":"1699","severity":1,"message":"1926","line":466,"column":58,"nodeType":"1701","messageId":"1927","endLine":466,"endColumn":60},{"ruleId":"1675","severity":1,"message":"1676","line":467,"column":31,"nodeType":"1677","messageId":"1678","endLine":467,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1926","line":501,"column":64,"nodeType":"1701","messageId":"1927","endLine":501,"endColumn":66},{"ruleId":"1675","severity":1,"message":"1676","line":502,"column":35,"nodeType":"1677","messageId":"1678","endLine":502,"endColumn":37},{"ruleId":"1699","severity":1,"message":"1926","line":538,"column":60,"nodeType":"1701","messageId":"1927","endLine":538,"endColumn":62},{"ruleId":"1675","severity":1,"message":"1676","line":539,"column":31,"nodeType":"1677","messageId":"1678","endLine":539,"endColumn":33},{"ruleId":"1699","severity":1,"message":"1926","line":591,"column":63,"nodeType":"1701","messageId":"1927","endLine":591,"endColumn":65},{"ruleId":"1675","severity":1,"message":"1676","line":592,"column":31,"nodeType":"1677","messageId":"1678","endLine":592,"endColumn":33},{"ruleId":"1652","severity":1,"message":"1928","line":716,"column":15,"nodeType":"1654","messageId":"1655","endLine":716,"endColumn":34},{"ruleId":"1652","severity":1,"message":"1929","line":781,"column":11,"nodeType":"1654","messageId":"1655","endLine":781,"endColumn":25},{"ruleId":"1675","severity":1,"message":"1676","line":801,"column":49,"nodeType":"1677","messageId":"1678","endLine":801,"endColumn":51},{"ruleId":"1652","severity":1,"message":"2042","line":807,"column":19,"nodeType":"1654","messageId":"1655","endLine":807,"endColumn":26},{"ruleId":"1652","severity":1,"message":"2042","line":829,"column":16,"nodeType":"1654","messageId":"1655","endLine":829,"endColumn":23},{"ruleId":"1652","severity":1,"message":"2042","line":852,"column":16,"nodeType":"1654","messageId":"1655","endLine":852,"endColumn":23},{"ruleId":"1652","severity":1,"message":"2042","line":874,"column":16,"nodeType":"1654","messageId":"1655","endLine":874,"endColumn":23},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2043"},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1736","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1737","line":24,"column":16,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1738","line":56,"column":7,"nodeType":"1654","messageId":"1655","endLine":56,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1832","line":104,"column":12,"nodeType":"1654","messageId":"1655","endLine":104,"endColumn":24},{"ruleId":"1667","severity":1,"message":"1740","line":111,"column":10,"nodeType":"1669","endLine":111,"endColumn":31,"suggestions":"2044"},{"ruleId":"1652","severity":1,"message":"2045","line":148,"column":11,"nodeType":"1654","messageId":"1655","endLine":148,"endColumn":20},{"ruleId":"1652","severity":1,"message":"2046","line":4,"column":9,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":33},{"ruleId":"1652","severity":1,"message":"2047","line":5,"column":9,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1839","line":7,"column":9,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":17},{"ruleId":"1652","severity":1,"message":"2048","line":8,"column":9,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":23},{"ruleId":"1652","severity":1,"message":"2049","line":9,"column":9,"nodeType":"1654","messageId":"1655","endLine":9,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2050","line":10,"column":9,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2051","line":24,"column":10,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":24},{"ruleId":"1652","severity":1,"message":"2052","line":73,"column":9,"nodeType":"1654","messageId":"1655","endLine":73,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1930","line":77,"column":11,"nodeType":"1654","messageId":"1655","endLine":77,"endColumn":22},{"ruleId":"1652","severity":1,"message":"2053","line":78,"column":12,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":23},{"ruleId":"1652","severity":1,"message":"2054","line":78,"column":25,"nodeType":"1654","messageId":"1655","endLine":78,"endColumn":39},{"ruleId":"1652","severity":1,"message":"1787","line":82,"column":12,"nodeType":"1654","messageId":"1655","endLine":82,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1788","line":82,"column":20,"nodeType":"1654","messageId":"1655","endLine":82,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1931","line":87,"column":12,"nodeType":"1654","messageId":"1655","endLine":87,"endColumn":20},{"ruleId":"1667","severity":1,"message":"1933","line":138,"column":18,"nodeType":"1934","endLine":138,"endColumn":117},{"ruleId":"1675","severity":1,"message":"1676","line":318,"column":53,"nodeType":"1677","messageId":"1678","endLine":318,"endColumn":55},{"ruleId":"1675","severity":1,"message":"1676","line":110,"column":53,"nodeType":"1677","messageId":"1678","endLine":110,"endColumn":55},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2055"},{"ruleId":"1652","severity":1,"message":"1720","line":61,"column":28,"nodeType":"1654","messageId":"1655","endLine":61,"endColumn":45},{"ruleId":"1667","severity":1,"message":"2056","line":69,"column":8,"nodeType":"1669","endLine":69,"endColumn":29,"suggestions":"2057"},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1706","line":1,"column":28,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":36},{"ruleId":"1652","severity":1,"message":"2052","line":96,"column":9,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":15},{"ruleId":"1667","severity":1,"message":"1933","line":191,"column":18,"nodeType":"1934","endLine":191,"endColumn":117},{"ruleId":"1763","severity":1,"message":"1937","line":373,"column":47,"nodeType":"1765","messageId":"1766","endLine":373,"endColumn":77,"fix":"2058"},{"ruleId":"1763","severity":1,"message":"1939","line":374,"column":47,"nodeType":"1765","messageId":"1766","endLine":374,"endColumn":83,"fix":"2059"},{"ruleId":"1675","severity":1,"message":"1676","line":479,"column":49,"nodeType":"1677","messageId":"1678","endLine":479,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1755","line":2,"column":10,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1756","line":2,"column":15,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1745","line":6,"column":8,"nodeType":"1654","messageId":"1655","endLine":6,"endColumn":18},{"ruleId":"1725","severity":1,"message":"1726","line":10,"column":10,"nodeType":"1727","messageId":"1728","endLine":10,"endColumn":24,"fix":"2060"},{"ruleId":"1652","severity":1,"message":"1751","line":84,"column":20,"nodeType":"1654","messageId":"1655","endLine":84,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1760","line":85,"column":25,"nodeType":"1654","messageId":"1655","endLine":85,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1761","line":96,"column":8,"nodeType":"1669","endLine":96,"endColumn":10,"suggestions":"2061"},{"ruleId":"1652","severity":1,"message":"1660","line":1,"column":16,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1747","line":2,"column":10,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":5,"column":9,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":5,"column":25,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":9,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1953","line":8,"column":15,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":25},{"ruleId":"1652","severity":1,"message":"2062","line":12,"column":21,"nodeType":"1654","messageId":"1655","endLine":12,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1738","line":27,"column":7,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1667","severity":1,"message":"2063","line":91,"column":8,"nodeType":"1669","endLine":91,"endColumn":10,"suggestions":"2064"},{"ruleId":"1652","severity":1,"message":"2062","line":14,"column":22,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":28},{"ruleId":"1652","severity":1,"message":"1738","line":27,"column":7,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"2065","line":43,"column":11,"nodeType":"1654","messageId":"1655","endLine":43,"endColumn":24},{"ruleId":"1652","severity":1,"message":"2066","line":44,"column":12,"nodeType":"1654","messageId":"1655","endLine":44,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2067","line":44,"column":20,"nodeType":"1654","messageId":"1655","endLine":44,"endColumn":29},{"ruleId":"1667","severity":1,"message":"2068","line":86,"column":8,"nodeType":"1669","endLine":86,"endColumn":32,"suggestions":"2069"},{"ruleId":"1652","severity":1,"message":"1830","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":14},{"ruleId":"1675","severity":1,"message":"1676","line":60,"column":45,"nodeType":"1677","messageId":"1678","endLine":60,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1830","line":5,"column":8,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":14},{"ruleId":"1675","severity":1,"message":"1676","line":59,"column":45,"nodeType":"1677","messageId":"1678","endLine":59,"endColumn":47},{"ruleId":"1804","severity":1,"message":"2070","line":85,"column":38,"nodeType":"1806","messageId":"1807","endLine":85,"endColumn":40},{"ruleId":"1804","severity":1,"message":"2070","line":85,"column":72,"nodeType":"1806","messageId":"1807","endLine":85,"endColumn":74},{"ruleId":"1652","severity":1,"message":"1839","line":29,"column":9,"nodeType":"1654","messageId":"1655","endLine":29,"endColumn":17},{"ruleId":"1652","severity":1,"message":"2071","line":31,"column":5,"nodeType":"1654","messageId":"1655","endLine":31,"endColumn":22},{"ruleId":"1652","severity":1,"message":"1930","line":107,"column":9,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":20},{"ruleId":"1652","severity":1,"message":"2053","line":110,"column":10,"nodeType":"1654","messageId":"1655","endLine":110,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2054","line":110,"column":23,"nodeType":"1654","messageId":"1655","endLine":110,"endColumn":37},{"ruleId":"1652","severity":1,"message":"1718","line":113,"column":10,"nodeType":"1654","messageId":"1655","endLine":113,"endColumn":25},{"ruleId":"1652","severity":1,"message":"2072","line":113,"column":27,"nodeType":"1654","messageId":"1655","endLine":113,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1719","line":114,"column":10,"nodeType":"1654","messageId":"1655","endLine":114,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1752","line":114,"column":19,"nodeType":"1654","messageId":"1655","endLine":114,"endColumn":29},{"ruleId":"1652","severity":1,"message":"2030","line":125,"column":10,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1920","line":127,"column":10,"nodeType":"1654","messageId":"1655","endLine":127,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1990","line":135,"column":10,"nodeType":"1654","messageId":"1655","endLine":135,"endColumn":14},{"ruleId":"1652","severity":1,"message":"2073","line":146,"column":24,"nodeType":"1654","messageId":"1655","endLine":146,"endColumn":39},{"ruleId":"1652","severity":1,"message":"1993","line":148,"column":10,"nodeType":"1654","messageId":"1655","endLine":148,"endColumn":24},{"ruleId":"1652","severity":1,"message":"2074","line":149,"column":26,"nodeType":"1654","messageId":"1655","endLine":149,"endColumn":43},{"ruleId":"1652","severity":1,"message":"2075","line":150,"column":10,"nodeType":"1654","messageId":"1655","endLine":150,"endColumn":27},{"ruleId":"1652","severity":1,"message":"2076","line":150,"column":29,"nodeType":"1654","messageId":"1655","endLine":150,"endColumn":49},{"ruleId":"1652","severity":1,"message":"2077","line":151,"column":10,"nodeType":"1654","messageId":"1655","endLine":151,"endColumn":23},{"ruleId":"2031","severity":1,"message":"2032","line":220,"column":5,"nodeType":"2033","messageId":"1678","endLine":220,"endColumn":17},{"ruleId":"1942","severity":1,"message":"2078","line":281,"column":36,"nodeType":"1944","messageId":"1945","endLine":281,"endColumn":62},{"ruleId":"1667","severity":1,"message":"2079","line":284,"column":6,"nodeType":"1669","endLine":284,"endColumn":71,"suggestions":"2080"},{"ruleId":"1652","severity":1,"message":"1929","line":555,"column":11,"nodeType":"1654","messageId":"1655","endLine":555,"endColumn":25},{"ruleId":"1652","severity":1,"message":"2036","line":634,"column":13,"nodeType":"1654","messageId":"1655","endLine":634,"endColumn":22},{"ruleId":"1671","severity":1,"message":"1672","line":665,"column":7,"nodeType":"1673","messageId":"1674","endLine":665,"endColumn":141},{"ruleId":"1675","severity":1,"message":"1676","line":684,"column":47,"nodeType":"1677","messageId":"1678","endLine":684,"endColumn":49},{"ruleId":"1675","severity":1,"message":"1676","line":699,"column":47,"nodeType":"1677","messageId":"1678","endLine":699,"endColumn":49},{"ruleId":"1675","severity":1,"message":"1676","line":710,"column":45,"nodeType":"1677","messageId":"1678","endLine":710,"endColumn":47},{"ruleId":"1652","severity":1,"message":"2000","line":762,"column":9,"nodeType":"1654","messageId":"1655","endLine":762,"endColumn":32},{"ruleId":"1675","severity":1,"message":"1676","line":1925,"column":60,"nodeType":"1677","messageId":"1678","endLine":1925,"endColumn":62},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1830","line":5,"column":13,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":7,"column":15,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":8,"column":8,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":11,"column":9,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":11,"column":25,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":16,"column":9,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":16,"column":23,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":21,"column":8,"nodeType":"1654","messageId":"1655","endLine":21,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":95,"column":11,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":96,"column":20,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":97,"column":9,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1950","line":7,"column":15,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":8,"column":8,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1761","line":117,"column":8,"nodeType":"1669","endLine":117,"endColumn":50,"suggestions":"2081"},{"ruleId":"2031","severity":1,"message":"2082","line":195,"column":49,"nodeType":"2033","messageId":"1678","endLine":195,"endColumn":69},{"ruleId":"1675","severity":1,"message":"1676","line":250,"column":45,"nodeType":"1677","messageId":"1678","endLine":250,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1707","line":2,"column":17,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1876","line":25,"column":11,"nodeType":"1654","messageId":"1655","endLine":25,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":95,"column":11,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":96,"column":20,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":29},{"ruleId":"1652","severity":1,"message":"2066","line":97,"column":12,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2067","line":97,"column":20,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":98,"column":9,"nodeType":"1654","messageId":"1655","endLine":98,"endColumn":13},{"ruleId":"1652","severity":1,"message":"2083","line":99,"column":12,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":32},{"ruleId":"1652","severity":1,"message":"2084","line":99,"column":34,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":57},{"ruleId":"1652","severity":1,"message":"2085","line":100,"column":12,"nodeType":"1654","messageId":"1655","endLine":100,"endColumn":20},{"ruleId":"1652","severity":1,"message":"2086","line":100,"column":22,"nodeType":"1654","messageId":"1655","endLine":100,"endColumn":33},{"ruleId":"1652","severity":1,"message":"2087","line":101,"column":12,"nodeType":"1654","messageId":"1655","endLine":101,"endColumn":19},{"ruleId":"1652","severity":1,"message":"2088","line":101,"column":21,"nodeType":"1654","messageId":"1655","endLine":101,"endColumn":31},{"ruleId":"1652","severity":1,"message":"2089","line":102,"column":12,"nodeType":"1654","messageId":"1655","endLine":102,"endColumn":22},{"ruleId":"1652","severity":1,"message":"2090","line":102,"column":24,"nodeType":"1654","messageId":"1655","endLine":102,"endColumn":37},{"ruleId":"1652","severity":1,"message":"2091","line":103,"column":12,"nodeType":"1654","messageId":"1655","endLine":103,"endColumn":30},{"ruleId":"1652","severity":1,"message":"2092","line":103,"column":32,"nodeType":"1654","messageId":"1655","endLine":103,"endColumn":53},{"ruleId":"1652","severity":1,"message":"2093","line":104,"column":12,"nodeType":"1654","messageId":"1655","endLine":104,"endColumn":25},{"ruleId":"1652","severity":1,"message":"2094","line":104,"column":27,"nodeType":"1654","messageId":"1655","endLine":104,"endColumn":43},{"ruleId":"1652","severity":1,"message":"2095","line":105,"column":12,"nodeType":"1654","messageId":"1655","endLine":105,"endColumn":27},{"ruleId":"1652","severity":1,"message":"2096","line":105,"column":29,"nodeType":"1654","messageId":"1655","endLine":105,"endColumn":47},{"ruleId":"1652","severity":1,"message":"2097","line":106,"column":12,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":32},{"ruleId":"1652","severity":1,"message":"2098","line":106,"column":34,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":57},{"ruleId":"1652","severity":1,"message":"2099","line":107,"column":12,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":28},{"ruleId":"1652","severity":1,"message":"2100","line":107,"column":30,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":49},{"ruleId":"1652","severity":1,"message":"2101","line":108,"column":12,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":30},{"ruleId":"1652","severity":1,"message":"2102","line":108,"column":32,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":97,"column":11,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":18},{"ruleId":"1675","severity":1,"message":"1676","line":214,"column":49,"nodeType":"1677","messageId":"1678","endLine":214,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1804","severity":1,"message":"1805","line":196,"column":73,"nodeType":"1806","messageId":"1807","endLine":196,"endColumn":75},{"ruleId":"1804","severity":1,"message":"1805","line":196,"column":126,"nodeType":"1806","messageId":"1807","endLine":196,"endColumn":128},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1675","severity":1,"message":"1676","line":155,"column":49,"nodeType":"1677","messageId":"1678","endLine":155,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1950","line":7,"column":15,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":8,"column":8,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":11,"column":9,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":11,"column":25,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":21,"column":8,"nodeType":"1654","messageId":"1655","endLine":21,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":95,"column":11,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":18},{"ruleId":"1667","severity":1,"message":"2103","line":127,"column":8,"nodeType":"1669","endLine":127,"endColumn":50,"suggestions":"2104"},{"ruleId":"2031","severity":1,"message":"2082","line":203,"column":49,"nodeType":"2033","messageId":"1678","endLine":203,"endColumn":69},{"ruleId":"1675","severity":1,"message":"1676","line":256,"column":45,"nodeType":"1677","messageId":"1678","endLine":256,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1830","line":5,"column":13,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":7,"column":15,"nodeType":"1654","messageId":"1655","endLine":7,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":8,"column":8,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":11,"column":9,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":11,"column":25,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":16,"column":9,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":16,"column":23,"nodeType":"1654","messageId":"1655","endLine":16,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":21,"column":8,"nodeType":"1654","messageId":"1655","endLine":21,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":24,"column":11,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":95,"column":11,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":96,"column":20,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":97,"column":9,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1667","severity":1,"message":"2105","line":114,"column":8,"nodeType":"1669","endLine":114,"endColumn":64,"suggestions":"2106"},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":97,"column":11,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":18},{"ruleId":"1675","severity":1,"message":"1676","line":214,"column":49,"nodeType":"1677","messageId":"1678","endLine":214,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1876","line":25,"column":11,"nodeType":"1654","messageId":"1655","endLine":25,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":95,"column":11,"nodeType":"1654","messageId":"1655","endLine":95,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":96,"column":20,"nodeType":"1654","messageId":"1655","endLine":96,"endColumn":29},{"ruleId":"1652","severity":1,"message":"2066","line":97,"column":12,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2067","line":97,"column":20,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":98,"column":9,"nodeType":"1654","messageId":"1655","endLine":98,"endColumn":13},{"ruleId":"1652","severity":1,"message":"2083","line":99,"column":12,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":32},{"ruleId":"1652","severity":1,"message":"2084","line":99,"column":34,"nodeType":"1654","messageId":"1655","endLine":99,"endColumn":57},{"ruleId":"1652","severity":1,"message":"2085","line":100,"column":12,"nodeType":"1654","messageId":"1655","endLine":100,"endColumn":20},{"ruleId":"1652","severity":1,"message":"2086","line":100,"column":22,"nodeType":"1654","messageId":"1655","endLine":100,"endColumn":33},{"ruleId":"1652","severity":1,"message":"2087","line":101,"column":12,"nodeType":"1654","messageId":"1655","endLine":101,"endColumn":19},{"ruleId":"1652","severity":1,"message":"2088","line":101,"column":21,"nodeType":"1654","messageId":"1655","endLine":101,"endColumn":31},{"ruleId":"1652","severity":1,"message":"2089","line":102,"column":12,"nodeType":"1654","messageId":"1655","endLine":102,"endColumn":22},{"ruleId":"1652","severity":1,"message":"2090","line":102,"column":24,"nodeType":"1654","messageId":"1655","endLine":102,"endColumn":37},{"ruleId":"1652","severity":1,"message":"2091","line":103,"column":12,"nodeType":"1654","messageId":"1655","endLine":103,"endColumn":30},{"ruleId":"1652","severity":1,"message":"2092","line":103,"column":32,"nodeType":"1654","messageId":"1655","endLine":103,"endColumn":53},{"ruleId":"1652","severity":1,"message":"2093","line":104,"column":12,"nodeType":"1654","messageId":"1655","endLine":104,"endColumn":25},{"ruleId":"1652","severity":1,"message":"2094","line":104,"column":27,"nodeType":"1654","messageId":"1655","endLine":104,"endColumn":43},{"ruleId":"1652","severity":1,"message":"2095","line":105,"column":12,"nodeType":"1654","messageId":"1655","endLine":105,"endColumn":27},{"ruleId":"1652","severity":1,"message":"2096","line":105,"column":29,"nodeType":"1654","messageId":"1655","endLine":105,"endColumn":47},{"ruleId":"1652","severity":1,"message":"2097","line":106,"column":12,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":32},{"ruleId":"1652","severity":1,"message":"2098","line":106,"column":34,"nodeType":"1654","messageId":"1655","endLine":106,"endColumn":57},{"ruleId":"1652","severity":1,"message":"2099","line":107,"column":12,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":28},{"ruleId":"1652","severity":1,"message":"2100","line":107,"column":30,"nodeType":"1654","messageId":"1655","endLine":107,"endColumn":49},{"ruleId":"1652","severity":1,"message":"2101","line":108,"column":12,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":30},{"ruleId":"1652","severity":1,"message":"2102","line":108,"column":32,"nodeType":"1654","messageId":"1655","endLine":108,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":14,"column":25,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1710","line":19,"column":9,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1709","line":19,"column":23,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1776","line":97,"column":11,"nodeType":"1654","messageId":"1655","endLine":97,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1751","line":98,"column":20,"nodeType":"1654","messageId":"1655","endLine":98,"endColumn":29},{"ruleId":"1652","severity":1,"message":"1956","line":127,"column":9,"nodeType":"1654","messageId":"1655","endLine":127,"endColumn":13},{"ruleId":"1804","severity":1,"message":"1805","line":219,"column":73,"nodeType":"1806","messageId":"1807","endLine":219,"endColumn":75},{"ruleId":"1804","severity":1,"message":"1805","line":219,"column":126,"nodeType":"1806","messageId":"1807","endLine":219,"endColumn":128},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1950","line":8,"column":15,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1952","line":10,"column":9,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1791","line":10,"column":25,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":30},{"ruleId":"1652","severity":1,"message":"1953","line":13,"column":10,"nodeType":"1654","messageId":"1655","endLine":13,"endColumn":20},{"ruleId":"1675","severity":1,"message":"1676","line":152,"column":49,"nodeType":"1677","messageId":"1678","endLine":152,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1667","severity":1,"message":"2107","line":110,"column":8,"nodeType":"1669","endLine":110,"endColumn":32,"suggestions":"2108"},{"ruleId":"1652","severity":1,"message":"2109","line":123,"column":11,"nodeType":"1654","messageId":"1655","endLine":123,"endColumn":27},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1758","line":5,"column":5,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1830","line":8,"column":13,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":19},{"ruleId":"1652","severity":1,"message":"1950","line":10,"column":15,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1951","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1952","line":14,"column":9,"nodeType":"1654","messageId":"1655","endLine":14,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1953","line":17,"column":10,"nodeType":"1654","messageId":"1655","endLine":17,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1685","line":24,"column":8,"nodeType":"1654","messageId":"1655","endLine":24,"endColumn":18},{"ruleId":"1652","severity":1,"message":"1876","line":27,"column":11,"nodeType":"1654","messageId":"1655","endLine":27,"endColumn":16},{"ruleId":"1675","severity":1,"message":"1676","line":174,"column":49,"nodeType":"1677","messageId":"1678","endLine":174,"endColumn":51},{"ruleId":"2110","severity":1,"message":"2111","line":299,"column":209,"nodeType":"2112","messageId":"2113","endLine":299,"endColumn":226},{"ruleId":"1652","severity":1,"message":"1830","line":11,"column":8,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":14},{"ruleId":"1675","severity":1,"message":"1676","line":60,"column":45,"nodeType":"1677","messageId":"1678","endLine":60,"endColumn":47},{"ruleId":"1804","severity":1,"message":"2070","line":85,"column":38,"nodeType":"1806","messageId":"1807","endLine":85,"endColumn":40},{"ruleId":"1804","severity":1,"message":"2070","line":85,"column":72,"nodeType":"1806","messageId":"1807","endLine":85,"endColumn":74},{"ruleId":"1652","severity":1,"message":"1830","line":5,"column":8,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":14},{"ruleId":"1675","severity":1,"message":"1676","line":60,"column":45,"nodeType":"1677","messageId":"1678","endLine":60,"endColumn":47},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":26},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2114"},{"ruleId":"1652","severity":1,"message":"1830","line":34,"column":8,"nodeType":"1654","messageId":"1655","endLine":34,"endColumn":14},{"ruleId":"1652","severity":1,"message":"1738","line":64,"column":7,"nodeType":"1654","messageId":"1655","endLine":64,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1791","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1953","line":11,"column":10,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1747","line":19,"column":10,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":16},{"ruleId":"1763","severity":1,"message":"2115","line":99,"column":45,"nodeType":"1765","messageId":"1766","endLine":99,"endColumn":69,"fix":"2116"},{"ruleId":"1763","severity":1,"message":"2117","line":139,"column":45,"nodeType":"1765","messageId":"1766","endLine":139,"endColumn":92,"fix":"2118"},{"ruleId":"1763","severity":1,"message":"2117","line":153,"column":53,"nodeType":"1765","messageId":"1766","endLine":153,"endColumn":94,"fix":"2119"},{"ruleId":"1763","severity":1,"message":"2115","line":177,"column":49,"nodeType":"1765","messageId":"1766","endLine":177,"endColumn":74,"fix":"2120"},{"ruleId":"1763","severity":1,"message":"2117","line":180,"column":49,"nodeType":"1765","messageId":"1766","endLine":180,"endColumn":82,"fix":"2121"},{"ruleId":"1667","severity":1,"message":"2122","line":186,"column":12,"nodeType":"1669","endLine":196,"endColumn":6,"suggestions":"2123"},{"ruleId":"1763","severity":1,"message":"2124","line":236,"column":45,"nodeType":"1765","messageId":"1766","endLine":236,"endColumn":64,"fix":"2125"},{"ruleId":"1763","severity":1,"message":"2126","line":237,"column":45,"nodeType":"1765","messageId":"1766","endLine":237,"endColumn":73,"fix":"2127"},{"ruleId":"1763","severity":1,"message":"2128","line":247,"column":45,"nodeType":"1765","messageId":"1766","endLine":247,"endColumn":61,"fix":"2129"},{"ruleId":"1763","severity":1,"message":"2130","line":248,"column":45,"nodeType":"1765","messageId":"1766","endLine":248,"endColumn":58,"fix":"2131"},{"ruleId":"1763","severity":1,"message":"2132","line":249,"column":45,"nodeType":"1765","messageId":"1766","endLine":249,"endColumn":65,"fix":"2133"},{"ruleId":"1763","severity":1,"message":"2134","line":250,"column":45,"nodeType":"1765","messageId":"1766","endLine":250,"endColumn":64,"fix":"2135"},{"ruleId":"1763","severity":1,"message":"2136","line":251,"column":45,"nodeType":"1765","messageId":"1766","endLine":251,"endColumn":67,"fix":"2137"},{"ruleId":"1763","severity":1,"message":"2138","line":252,"column":45,"nodeType":"1765","messageId":"1766","endLine":252,"endColumn":70,"fix":"2139"},{"ruleId":"1763","severity":1,"message":"2128","line":264,"column":45,"nodeType":"1765","messageId":"1766","endLine":264,"endColumn":61,"fix":"2140"},{"ruleId":"1763","severity":1,"message":"2130","line":265,"column":45,"nodeType":"1765","messageId":"1766","endLine":265,"endColumn":58,"fix":"2141"},{"ruleId":"1763","severity":1,"message":"2132","line":266,"column":45,"nodeType":"1765","messageId":"1766","endLine":266,"endColumn":65,"fix":"2142"},{"ruleId":"1763","severity":1,"message":"2134","line":267,"column":45,"nodeType":"1765","messageId":"1766","endLine":267,"endColumn":64,"fix":"2143"},{"ruleId":"1763","severity":1,"message":"2136","line":268,"column":45,"nodeType":"1765","messageId":"1766","endLine":268,"endColumn":67,"fix":"2144"},{"ruleId":"1763","severity":1,"message":"2138","line":269,"column":45,"nodeType":"1765","messageId":"1766","endLine":269,"endColumn":70,"fix":"2145"},{"ruleId":"1763","severity":1,"message":"2126","line":279,"column":45,"nodeType":"1765","messageId":"1766","endLine":279,"endColumn":73,"fix":"2146"},{"ruleId":"1763","severity":1,"message":"2147","line":280,"column":45,"nodeType":"1765","messageId":"1766","endLine":280,"endColumn":67,"fix":"2148"},{"ruleId":"1763","severity":1,"message":"2149","line":281,"column":45,"nodeType":"1765","messageId":"1766","endLine":281,"endColumn":69,"fix":"2150"},{"ruleId":"1763","severity":1,"message":"2151","line":282,"column":45,"nodeType":"1765","messageId":"1766","endLine":282,"endColumn":67,"fix":"2152"},{"ruleId":"1652","severity":1,"message":"1909","line":4,"column":38,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":45},{"ruleId":"1652","severity":1,"message":"1755","line":4,"column":52,"nodeType":"1654","messageId":"1655","endLine":4,"endColumn":56},{"ruleId":"1652","severity":1,"message":"1791","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1953","line":11,"column":10,"nodeType":"1654","messageId":"1655","endLine":11,"endColumn":20},{"ruleId":"1652","severity":1,"message":"1747","line":19,"column":10,"nodeType":"1654","messageId":"1655","endLine":19,"endColumn":16},{"ruleId":"1763","severity":1,"message":"2153","line":119,"column":41,"nodeType":"1765","messageId":"1766","endLine":119,"endColumn":53,"fix":"2154"},{"ruleId":"1652","severity":1,"message":"1757","line":5,"column":41,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1745","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2155","line":125,"column":12,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2156","line":125,"column":23,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":35},{"ruleId":"1667","severity":1,"message":"1822","line":197,"column":8,"nodeType":"1669","endLine":197,"endColumn":32,"suggestions":"2157"},{"ruleId":"1652","severity":1,"message":"1824","line":345,"column":11,"nodeType":"1654","messageId":"1655","endLine":345,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1757","line":5,"column":41,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1745","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2155","line":125,"column":12,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2156","line":125,"column":23,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":35},{"ruleId":"1667","severity":1,"message":"1822","line":197,"column":8,"nodeType":"1669","endLine":197,"endColumn":32,"suggestions":"2158"},{"ruleId":"1652","severity":1,"message":"1824","line":345,"column":11,"nodeType":"1654","messageId":"1655","endLine":345,"endColumn":23},{"ruleId":"1652","severity":1,"message":"1757","line":5,"column":41,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":51},{"ruleId":"1652","severity":1,"message":"1745","line":10,"column":8,"nodeType":"1654","messageId":"1655","endLine":10,"endColumn":18},{"ruleId":"1652","severity":1,"message":"2155","line":125,"column":12,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2156","line":125,"column":23,"nodeType":"1654","messageId":"1655","endLine":125,"endColumn":35},{"ruleId":"1667","severity":1,"message":"1822","line":197,"column":8,"nodeType":"1669","endLine":197,"endColumn":32,"suggestions":"2159"},{"ruleId":"1652","severity":1,"message":"1824","line":345,"column":11,"nodeType":"1654","messageId":"1655","endLine":345,"endColumn":23},{"ruleId":"1652","severity":1,"message":"2160","line":58,"column":20,"nodeType":"1654","messageId":"1655","endLine":58,"endColumn":31},{"ruleId":"1652","severity":1,"message":"1719","line":60,"column":10,"nodeType":"1654","messageId":"1655","endLine":60,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1752","line":60,"column":19,"nodeType":"1654","messageId":"1655","endLine":60,"endColumn":29},{"ruleId":"1652","severity":1,"message":"2161","line":62,"column":10,"nodeType":"1654","messageId":"1655","endLine":62,"endColumn":17},{"ruleId":"1652","severity":1,"message":"1981","line":64,"column":9,"nodeType":"1654","messageId":"1655","endLine":64,"endColumn":15},{"ruleId":"1675","severity":1,"message":"1676","line":65,"column":51,"nodeType":"1677","messageId":"1678","endLine":65,"endColumn":53},{"ruleId":"1652","severity":1,"message":"2162","line":83,"column":9,"nodeType":"1654","messageId":"1655","endLine":83,"endColumn":25},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1706","line":1,"column":28,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":36},{"ruleId":"1652","severity":1,"message":"2163","line":2,"column":25,"nodeType":"1654","messageId":"1655","endLine":2,"endColumn":38},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2164"},{"ruleId":"1652","severity":1,"message":"1710","line":5,"column":19,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1709","line":5,"column":33,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":40},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"2165","line":28,"column":8,"nodeType":"1654","messageId":"1655","endLine":28,"endColumn":19},{"ruleId":"1652","severity":1,"message":"2166","line":29,"column":10,"nodeType":"1654","messageId":"1655","endLine":29,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2167","line":31,"column":10,"nodeType":"1654","messageId":"1655","endLine":31,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1830","line":36,"column":8,"nodeType":"1654","messageId":"1655","endLine":36,"endColumn":14},{"ruleId":"1652","severity":1,"message":"2168","line":38,"column":10,"nodeType":"1654","messageId":"1655","endLine":38,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1738","line":68,"column":7,"nodeType":"1654","messageId":"1655","endLine":68,"endColumn":16},{"ruleId":"1652","severity":1,"message":"1707","line":1,"column":17,"nodeType":"1654","messageId":"1655","endLine":1,"endColumn":26},{"ruleId":"1652","severity":1,"message":"1708","line":3,"column":8,"nodeType":"1654","messageId":"1655","endLine":3,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":5,"column":10,"nodeType":"1727","messageId":"1728","endLine":5,"endColumn":24,"fix":"2169"},{"ruleId":"1652","severity":1,"message":"1710","line":5,"column":19,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1709","line":5,"column":33,"nodeType":"1654","messageId":"1655","endLine":5,"endColumn":40},{"ruleId":"1652","severity":1,"message":"1735","line":8,"column":10,"nodeType":"1654","messageId":"1655","endLine":8,"endColumn":14},{"ruleId":"1652","severity":1,"message":"2165","line":28,"column":8,"nodeType":"1654","messageId":"1655","endLine":28,"endColumn":19},{"ruleId":"1652","severity":1,"message":"2166","line":29,"column":10,"nodeType":"1654","messageId":"1655","endLine":29,"endColumn":21},{"ruleId":"1652","severity":1,"message":"2167","line":31,"column":10,"nodeType":"1654","messageId":"1655","endLine":31,"endColumn":15},{"ruleId":"1652","severity":1,"message":"1830","line":36,"column":8,"nodeType":"1654","messageId":"1655","endLine":36,"endColumn":14},{"ruleId":"1652","severity":1,"message":"2168","line":38,"column":10,"nodeType":"1654","messageId":"1655","endLine":38,"endColumn":24},{"ruleId":"1652","severity":1,"message":"1738","line":68,"column":7,"nodeType":"1654","messageId":"1655","endLine":68,"endColumn":16},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["2170"],"no-negated-in-lhs",["2171"],"'useCallback' is defined but never used.","'yup' is defined but never used.","'setToday' is assigned a value but never used.","'setAgeDisabled' is assigned a value but never used.","'femaleStatus' is assigned a value but never used.","'transferIn' is assigned a value but never used.","'setHideTargetGroup' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'basicInfo.dateOfRegistration' and 'basicInfo.dob'. Either include them or remove the dependency array.","ArrayExpression",["2172"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'disabledAgeBaseOnAge' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PatientCurrentObject', 'basicInfo.dateOfRegistration', and 'basicInfo.dob'. Either include them or remove the dependency array.",["2173"],"React Hook useEffect has a missing dependency: 'PatientCurrentObject'. Either include it or remove the dependency array.",["2174"],"'PhoneInput' is defined but never used.","'LabelSui' is defined but never used.","'Icon' is defined but never used.","'setDisabledAgeBaseOnAge' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'dateValidate' is assigned a value but never used.","'setDateValidate' is assigned a value but never used.","'setTransferIn' is assigned a value but never used.","'hospitalNumStatus2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'basicInfo.dob', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.",["2175"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'actualcontacts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'limit' is assigned a value but never used.","'LostToFollowUp' is defined but never used.","'Index' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'baseUrl' is defined but never used.","'token' is defined but never used.","React Hook useEffect has a missing dependency: 'Observation'. Either include it or remove the dependency array.",["2176"],"'loadTransferForm' is assigned a value but never used.","'loadOtzServiceForm' is assigned a value but never used.","'loadOtzCheckList' is assigned a value but never used.","'loadOtzRegister' is assigned a value but never used.","'classes' is assigned a value but never used.","'clinicVisitList' is assigned a value but never used.","'loading' is assigned a value but never used.","'setNotToBeUpdated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClinicVisitList', 'LaboratoryHistory', 'PharmacyList', and 'RecentActivities'. Either include them or remove the dependency array.",["2177"],"React Hook useEffect has a missing dependency: 'props.activeContent.activeTab'. Either include it or remove the dependency array. If 'setKey' needs the current value of 'props.activeContent.activeTab', you can also switch to useReducer instead of useState and read 'props.activeContent.activeTab' in the reducer.",["2178"],"no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"2179","text":"2180"},"'eacStatusObj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus' and 'GetPatientDTOObj'. Either include them or remove the dependency array.",["2181"],"'patientDTO' is assigned a value but never used.",{"range":"2182","text":"2180"},"'Link' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'useStyles' is assigned a value but never used.","'showOutComeButton' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LabOrders'. Either include it or remove the dependency array.",["2183"],{"range":"2184","text":"2180"},"React Hook useEffect has a missing dependency: 'PharmacyList'. Either include it or remove the dependency array.",["2185"],"'CancelIcon' is defined but never used.",{"range":"2186","text":"2180"},"'Button' is defined but never used.","'Select' is defined but never used.","'ButtonMui' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["2187"],"'BackToSession' is assigned a value but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupText' is defined but never used.",{"range":"2188","text":"2180"},"'setObservation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetPatientDTOObj'. Either include it or remove the dependency array.",["2189"],"no-useless-computed-key","Unnecessarily computed property [\"screeningArea\"] found.","Property","unnecessarilyComputedProperty",{"range":"2190","text":"2191"},"Unnecessarily computed property [\"screeningVisible\"] found.",{"range":"2192","text":"2193"},"Unnecessarily computed property [\"screenTreatmentMethodDate\"] found.",{"range":"2194","text":"2195"},"Unnecessarily computed property [\"screescreenTreatmentMethodDateningVisible\"] found.",{"range":"2196","text":"2197"},["2198"],{"range":"2199","text":"2180"},"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetDetail' and 'GetPatientDTOObj'. Either include them or remove the dependency array.",["2200"],{"range":"2201","text":"2191"},{"range":"2202","text":"2193"},"React Hook useEffect has a missing dependency: 'ClinicVisitListHistory'. Either include it or remove the dependency array.",["2203"],{"range":"2204","text":"2180"},"React Hook useEffect has missing dependencies: 'CurrentLabResult' and 'CurrentRegimen'. Either include them or remove the dependency array.",["2205"],"'reasonForInteruption' is assigned a value but never used.","'values' is assigned a value but never used.","'setValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'HIVStatus'. Either include it or remove the dependency array.",["2206"],"'toast' is defined but never used.",{"range":"2207","text":"2180"},"'eacList' is assigned a value but never used.","'eacObj' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'EAC'. Either include it or remove the dependency array.",["2208"],["2209"],"'Table' is defined but never used.",{"range":"2210","text":"2180"},"'List' is defined but never used.","'enrollDate' is assigned a value but never used.","'setEacObj' is assigned a value but never used.","'handleInputChangeAttempt' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'addAttempt' is assigned a value but never used.","'removeAttempt' is assigned a value but never used.","'AttemptedLists' is defined but never used.",{"range":"2211","text":"2180"},["2212"],"'visitId' is assigned a value but never used.","'patientObj' is assigned a value but never used.","'testGroup' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus', 'GetPatientDTOObj', 'TestGroup', and 'tests'. Either include them or remove the dependency array.",["2213"],["2214"],{"range":"2215","text":"2180"},"React Hook useEffect has missing dependencies: 'GetFormDetail' and 'GetPatientDTOObj'. Either include them or remove the dependency array.",["2216"],"React Hook useEffect has missing dependencies: 'GetChronicCare', 'PatientCurrentObject', and 'props.activeContent.actionType'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["2217"],"'handleCancel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'TrackingDetails'. Either include it or remove the dependency array.",["2218"],{"range":"2219","text":"2180"},"'patientList' is assigned a value but never used.",{"range":"2220","text":"2180"},"'moment' is defined but never used.","'dateParts' is assigned a value but never used.","'buttonHidden' is assigned a value but never used.","'moduleStatus' is assigned a value but never used.","'labNumberOption' is assigned a value but never used.","'setLabNumberOption' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.activeContent', 'showObj', and 'tests'. Either include them or remove the dependency array.",["2221"],"'LabNumbers' is assigned a value but never used.","'Dropdown' is defined but never used.","'Nav' is defined but never used.","'Tab' is defined but never used.","'PerfectScrollbar' is defined but never used.","'NewlyEnrolledArtBySex' is defined but never used.",["2170"],["2171"],{"range":"2222","text":"2180"},"'reasonLostToFollowUp' is assigned a value but never used.",["2223"],"Unnecessarily computed property [\"dsdModel\"] found.",{"range":"2224","text":"2225"},"Unnecessarily computed property [\"dateOfDiscontinuation\"] found.",{"range":"2226","text":"2227"},"Unnecessarily computed property [\"dateReturnToCare\"] found.",{"range":"2228","text":"2229"},"Unnecessarily computed property [\"referredFor\"] found.",{"range":"2230","text":"2231"},"Unnecessarily computed property [\"reasonForDiscountinuation\"] found.",{"range":"2232","text":"2233"},"Unnecessarily computed property [\"causeOfDeath\"] found.",{"range":"2234","text":"2235"},"Unnecessarily computed property [\"causeOfDeathOthers\"] found.",{"range":"2236","text":"2237"},"Unnecessarily computed property [\"reasonForLossToFollowUpOthers\"] found.",{"range":"2238","text":"2239"},"Unnecessarily computed property [\"reasonForLossToFollowUp\"] found.",{"range":"2240","text":"2241"},{"range":"2242","text":"2237"},{"range":"2243","text":"2235"},{"range":"2244","text":"2227"},{"range":"2245","text":"2237"},{"range":"2246","text":"2229"},{"range":"2247","text":"2231"},"Unnecessarily computed property [\"referredForOthers\"] found.",{"range":"2248","text":"2249"},"'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'CardHeader' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'Segment' is defined but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'Typography' is defined but never used.","'UpgradeIcon' is defined but never used.","'permissions' is assigned a value but never used.","'devices' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["2250"],"'biometricFingers' is assigned a value but never used.","'IconButton' is defined but never used.","'DeleteIcon' is defined but never used.","'showVLIndication' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PatientVisit' and 'TestGroup'. Either include them or remove the dependency array.",["2251"],"'handleInputChangeObject' is assigned a value but never used.","'addOrder' is assigned a value but never used.","'removeOrder' is assigned a value but never used.","'Spinner' is defined but never used.","React Hook useEffect has a missing dependency: 'EACHistory'. Either include it or remove the dependency array.",["2252"],"React Hook useEffect has a missing dependency: 'EACStatus'. Either include it or remove the dependency array.",["2253"],["2254"],"'refillPeriodValue' is assigned a value but never used.","'setSelectedOptionAdr' is assigned a value but never used.","'prepSideEffect' is assigned a value but never used.","'showRegimen' is assigned a value but never used.","'regimen' is assigned a value but never used.","'showCurrentVitalSigns' is assigned a value but never used.","'showIptType' is assigned a value but never used.","'childrenOI' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus', 'GetIptEligibilty', 'PharmacyRefillDetail', 'VitalSigns', and 'props.activeContent'. Either include them or remove the dependency array.",["2255"],"'othersRegimen' is assigned a value but never used.","Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd","'originalCombination' is assigned a value but never used.","'handleCheckBox' is assigned a value but never used.","'toggleSplit' is assigned a value but never used.","'tbStatus' is assigned a value but never used.","'regimenLine' is assigned a value but never used.","Assignments to the 'gender' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ConditionalExpression","Unnecessarily computed property ['whoStagingId'] found.",{"range":"2256","text":"2257"},"Unnecessarily computed property [\"viralLoadAtStartOfArt\"] found.",{"range":"2258","text":"2259"},"Unnecessarily computed property [\"dateOfViralLoadAtStartOfArt\"] found.",{"range":"2260","text":"2261"},"'handleInputChangeVitalStart' is assigned a value but never used.","no-self-assign","'objValues.pregnancyStatus' is assigned to itself.","MemberExpression","selfAssignment",{"range":"2262","text":"2180"},"React Hook useEffect has missing dependencies: 'GetMHSDetail' and 'GetPatientDTOObj'. Either include them or remove the dependency array.",["2263"],{"range":"2264","text":"2180"},"'CardContent' is defined but never used.","'SaveIcon' is defined but never used.","'ToastContainer' is defined but never used.","'useHistory' is defined but never used.","'options1' is assigned a value but never used.","'options2' is assigned a value but never used.","'temp' is assigned a value but never used.",{"range":"2265","text":"2180"},{"range":"2266","text":"2180"},["2267"],{"range":"2268","text":"2225"},{"range":"2269","text":"2227"},{"range":"2270","text":"2229"},{"range":"2271","text":"2231"},{"range":"2272","text":"2233"},{"range":"2273","text":"2235"},{"range":"2274","text":"2237"},{"range":"2275","text":"2239"},{"range":"2276","text":"2241"},{"range":"2277","text":"2237"},{"range":"2278","text":"2235"},{"range":"2279","text":"2227"},{"range":"2280","text":"2237"},{"range":"2281","text":"2229"},{"range":"2282","text":"2231"},{"range":"2283","text":"2249"},"'CardTitle' is defined but never used.","'CardText' is defined but never used.","'NewlyEnrolledArtByAge' is defined but never used.","'Progress' is defined but never used.","'chartValue' is assigned a value but never used.","'toggle' is assigned a value but never used.","'handleItemClick' is assigned a value but never used.","'activeItem' is assigned a value but never used.","'chartPage' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'Highcharts' is defined but never used.","'HighchartsReact' is defined but never used.","'test' is assigned a value but never used.","'priority' is assigned a value but never used.","'handleInputChangeTest' is assigned a value but never used.","'selectedOption' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus', 'GetPatientDTOObj', and 'TestGroup'. Either include them or remove the dependency array.",["2284"],"'setTestGroup' is assigned a value but never used.","'vlRequired' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus', 'GetPatientDTOObj', and 'LabTestDetail'. Either include them or remove the dependency array.",["2285"],"'handleSelectedTestGroup' is assigned a value but never used.","'handleInputChangeLabNumber' is assigned a value but never used.","no-const-assign","'labNumberOption' is constant.","const",{"range":"2286","text":"2180"},{"range":"2287","text":"2180"},"'FirstEAC' is defined but never used.","'ContinueEAC' is defined but never used.",["2288"],"'Alert' is defined but never used.","'labNumber' is assigned a value but never used.","'setLabNum' is assigned a value but never used.","'setTest' is assigned a value but never used.","'setVlRequired' is assigned a value but never used.","'setShowVLIndication' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj' and 'LabTestDetail'. Either include them or remove the dependency array.",["2289"],"'TestOrdersList' is defined but never used.",["2170"],["2171"],{"range":"2290","text":"2180"},["2291"],{"range":"2292","text":"2180"},["2293"],{"range":"2294","text":"2180"},"'Menu' is defined but never used.",["2295"],"'LoadDeletePage' is assigned a value but never used.",{"range":"2296","text":"2180"},"'TBForms' is assigned a value but never used.","no-dupe-keys","Duplicate key 'tbPrevention'.","ObjectExpression","React Hook useEffect has missing dependencies: 'ClinicVisitList', 'GetPatientDTOObj', 'PatientCurrentRegimen', 'PatientDetailId', 'TestGroup', and 'VitalSigns'. Either include them or remove the dependency array.",["2297"],"'regimenId' is assigned a value but never used.","'setSelectedOption' is assigned a value but never used.","'regimenList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckEACStatus', 'ChronicCare', 'GetIptEligibilty', 'GetPatientDTOObj', 'PatientCurrentRegimen', and 'VitalSigns'. Either include them or remove the dependency array.",["2298"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","'drugObj' is assigned a value but never used.",{"range":"2299","text":"2180"},["2300"],"'labStatus' is assigned a value but never used.","'InputGroupButtonDropdown' is defined but never used.","'InputGroupAddon' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'DateTimePicker' is defined but never used.","'gender' is assigned a value but never used.","'heightValue' is assigned a value but never used.","'setHeightValue' is assigned a value but never used.",{"range":"2301","text":"2180"},"React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["2302"],{"range":"2303","text":"2259"},{"range":"2304","text":"2261"},{"range":"2305","text":"2180"},["2306"],"'Sticky' is defined but never used.","React Hook useEffect has a missing dependency: 'locationState'. Either include it or remove the dependency array.",["2307"],"'locationState' is assigned a value but never used.","'saving' is assigned a value but never used.","'setSaving' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetInitialEvaluation'. Either include it or remove the dependency array.",["2308"],"Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'adherenceLevelObj' is assigned a value but never used.","'setClinicVisitList' is assigned a value but never used.","'setVLIndication' is assigned a value but never used.","'setLabTestOptions' is assigned a value but never used.","'loadClinicHistory' is assigned a value but never used.","'setLoadClinicHistory' is assigned a value but never used.","'disabledField' is assigned a value but never used.","'objValues.levelOfAdherence' is assigned to itself.","React Hook useEffect has missing dependencies: 'GetPatientObj', 'GetVisitById', 'VitalSigns', 'objValues', and 'props.activeContent'. Either include them or remove the dependency array.",["2309"],["2310"],"Duplicate key 'immunisationComplete'.","'hideGeneralApperance' is assigned a value but never used.","'setHideGeneralApperance' is assigned a value but never used.","'hideSkin' is assigned a value but never used.","'setHideSkin' is assigned a value but never used.","'hideEye' is assigned a value but never used.","'setHideEye' is assigned a value but never used.","'hideBreast' is assigned a value but never used.","'setHideBreast' is assigned a value but never used.","'hideCardiovascular' is assigned a value but never used.","'setHideCardiovascular' is assigned a value but never used.","'hideGenitalia' is assigned a value but never used.","'setHideGenitalia' is assigned a value but never used.","'hideRespiratory' is assigned a value but never used.","'setHideRespiratory' is assigned a value but never used.","'hideGastrointestinal' is assigned a value but never used.","'setHideGastrointestinal' is assigned a value but never used.","'hideNeurological' is assigned a value but never used.","'setHideNeurological' is assigned a value but never used.","'handlementalstatus' is assigned a value but never used.","'setHideMentalStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'props.observation.dateOfObservation', and 'visit'. Either include them or remove the dependency array.",["2311"],"React Hook useEffect has missing dependencies: 'objValues' and 'regimenObj'. Either include them or remove the dependency array.",["2312"],"React Hook useEffect has a missing dependency: 'objValues'. Either include it or remove the dependency array.",["2313"],"'AdultRegimenLine' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",{"range":"2314","text":"2180"},"Unnecessarily computed property ['eligibleForTPT'] found.",{"range":"2315","text":"2316"},"Unnecessarily computed property ['outcome'] found.",{"range":"2317","text":"2318"},{"range":"2319","text":"2318"},{"range":"2320","text":"2316"},{"range":"2321","text":"2318"},"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2322"],"Unnecessarily computed property ['tbTreatment'] found.",{"range":"2323","text":"2324"},"Unnecessarily computed property ['tbTreatmentStartDate'] found.",{"range":"2325","text":"2326"},"Unnecessarily computed property ['coughing'] found.",{"range":"2327","text":"2328"},"Unnecessarily computed property ['fever'] found.",{"range":"2329","text":"2330"},"Unnecessarily computed property ['losingWeight'] found.",{"range":"2331","text":"2332"},"Unnecessarily computed property ['nightSweats'] found.",{"range":"2333","text":"2334"},"Unnecessarily computed property ['poorWeightGain'] found.",{"range":"2335","text":"2336"},"Unnecessarily computed property ['historyWithAdults'] found.",{"range":"2337","text":"2338"},{"range":"2339","text":"2328"},{"range":"2340","text":"2330"},{"range":"2341","text":"2332"},{"range":"2342","text":"2334"},{"range":"2343","text":"2336"},{"range":"2344","text":"2338"},{"range":"2345","text":"2326"},"Unnecessarily computed property ['treatementType'] found.",{"range":"2346","text":"2347"},"Unnecessarily computed property ['treatmentOutcome'] found.",{"range":"2348","text":"2349"},"Unnecessarily computed property ['completionDate'] found.",{"range":"2350","text":"2351"},"Unnecessarily computed property ['date'] found.",{"range":"2352","text":"2353"},"'nutrition' is assigned a value but never used.","'setNutrition' is assigned a value but never used.",["2354"],["2355"],["2356"],"'setPatients' is assigned a value but never used.","'patient' is assigned a value but never used.","'enablePPIColumns' is assigned a value but never used.","'MTableToolbar' is defined but never used.",{"range":"2357","text":"2180"},"'ButtonGroup' is defined but never used.","'MdDashboard' is defined but never used.","'Label' is defined but never used.","'TiArrowForward' is defined but never used.",{"range":"2358","text":"2180"},"no-global-assign","no-unsafe-negation",{"desc":"2359","fix":"2360"},{"desc":"2361","fix":"2362"},{"desc":"2363","fix":"2364"},{"desc":"2365","fix":"2366"},{"desc":"2367","fix":"2368"},{"desc":"2369","fix":"2370"},{"desc":"2371","fix":"2372"},[452,466],"token",{"desc":"2373","fix":"2374"},[136,150],{"desc":"2375","fix":"2376"},[380,394],{"desc":"2377","fix":"2378"},[450,464],{"desc":"2379","fix":"2380"},[487,501],{"desc":"2381","fix":"2382"},[9100,9117],"\"screeningArea\"",[9170,9190],"\"screeningVisible\"",[9507,9536],"\"screenTreatmentMethodDate\"",[9589,9634],"\"screescreenTreatmentMethodDateningVisible\"",{"desc":"2371","fix":"2383"},[410,424],{"desc":"2384","fix":"2385"},[9784,9801],[9854,9874],{"desc":"2386","fix":"2387"},[449,463],{"desc":"2388","fix":"2389"},{"desc":"2390","fix":"2391"},[231,245],{"desc":"2392","fix":"2393"},{"desc":"2394","fix":"2395"},[600,614],[600,614],{"desc":"2381","fix":"2396"},{"desc":"2397","fix":"2398"},{"desc":"2394","fix":"2399"},[600,614],{"desc":"2400","fix":"2401"},{"desc":"2402","fix":"2403"},{"desc":"2404","fix":"2405"},[156,170],[156,170],{"desc":"2406","fix":"2407"},[600,614],{"desc":"2408","fix":"2409"},[10485,10497],"\"dsdModel\"",[10903,10928],"\"dateOfDiscontinuation\"",[10981,11001],"\"dateReturnToCare\"",[11054,11069],"\"referredFor\"",[11122,11151],"\"reasonForDiscountinuation\"",[11463,11479],"\"causeOfDeath\"",[11532,11554],"\"causeOfDeathOthers\"",[11908,11941],"\"reasonForLossToFollowUpOthers\"",[12362,12389],"\"reasonForLossToFollowUp\"",[12442,12464],[12517,12533],[12586,12611],[12664,12686],[13039,13059],[13112,13127],[13180,13201],"\"referredForOthers\"",{"desc":"2410","fix":"2411"},{"desc":"2412","fix":"2413"},{"desc":"2414","fix":"2415"},{"desc":"2416","fix":"2417"},{"desc":"2414","fix":"2418"},{"desc":"2419","fix":"2420"},[10453,10469],"'whoStagingId'",[14595,14620],"\"viralLoadAtStartOfArt\"",[14673,14704],"\"dateOfViralLoadAtStartOfArt\"",[401,415],{"desc":"2421","fix":"2422"},[136,150],[136,150],[600,614],{"desc":"2381","fix":"2423"},[14192,14204],[14610,14635],[14688,14708],[14761,14776],[14829,14858],[15170,15186],[15239,15261],[15615,15648],[16069,16096],[16149,16171],[16224,16240],[16293,16318],[16371,16393],[16746,16766],[16819,16834],[16887,16908],{"desc":"2424","fix":"2425"},{"desc":"2426","fix":"2427"},[136,150],[450,464],{"desc":"2428","fix":"2429"},{"desc":"2430","fix":"2431"},[450,464],{"desc":"2428","fix":"2432"},[452,466],{"desc":"2433","fix":"2434"},[192,206],{"desc":"2435","fix":"2436"},[226,240],{"desc":"2437","fix":"2438"},{"desc":"2439","fix":"2440"},[136,150],{"desc":"2435","fix":"2441"},[184,198],{"desc":"2442","fix":"2443"},[14989,15014],[15071,15102],[462,476],{"desc":"2381","fix":"2444"},{"desc":"2445","fix":"2446"},{"desc":"2447","fix":"2448"},{"desc":"2449","fix":"2450"},{"desc":"2451","fix":"2452"},{"desc":"2453","fix":"2454"},{"desc":"2455","fix":"2456"},{"desc":"2457","fix":"2458"},[156,170],[2961,2979],"'eligibleForTPT'",[5125,5136],"'outcome'",[5861,5872],[6921,6939],[7149,7160],{"desc":"2459","fix":"2460"},[9243,9258],"'tbTreatment'",[9309,9333],"'tbTreatmentStartDate'",[9788,9800],"'coughing'",[9851,9860],"'fever'",[9911,9927],"'losingWeight'",[9978,9993],"'nightSweats'",[10044,10062],"'poorWeightGain'",[10113,10134],"'historyWithAdults'",[10671,10683],[10734,10743],[10794,10810],[10861,10876],[10927,10945],[10996,11017],[11414,11438],[11489,11507],"'treatementType'",[11558,11578],"'treatmentOutcome'",[11629,11647],"'completionDate'",[3500,3508],"'date'",{"desc":"2402","fix":"2461"},{"desc":"2402","fix":"2462"},{"desc":"2402","fix":"2463"},[156,170],[156,170],"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, basicInfo.dob]",{"range":"2464","text":"2465"},"Update the dependencies array to be: [patientObj, patientId, PatientCurrentObject, basicInfo.dateOfRegistration, basicInfo.dob]",{"range":"2466","text":"2467"},"Update the dependencies array to be: [PatientCurrentObject]",{"range":"2468","text":"2469"},"Update the dependencies array to be: [basicInfo.dateOfRegistration, basicInfo.dob, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",{"range":"2470","text":"2471"},"Update the dependencies array to be: [Observation, props.patientObj]",{"range":"2472","text":"2473"},"Update the dependencies array to be: [ClinicVisitList, LaboratoryHistory, PharmacyList, RecentActivities, props.patientObj]",{"range":"2474","text":"2475"},"Update the dependencies array to be: [props.activeContent.activeTab, props.activeContent.id]",{"range":"2476","text":"2477"},"Update the dependencies array to be: [CheckEACStatus, GetPatientDTOObj, props.activeContent]",{"range":"2478","text":"2479"},"Update the dependencies array to be: [LabOrders, props.activeContent]",{"range":"2480","text":"2481"},"Update the dependencies array to be: [props.activeContent.id, props.activeContent.activeTab, PharmacyList]",{"range":"2482","text":"2483"},"Update the dependencies array to be: [CheckEACStatus, GetPatientDTOObj, props.activeContent, props.patientObj.id]",{"range":"2484","text":"2485"},"Update the dependencies array to be: [GetPatientDTOObj]",{"range":"2486","text":"2487"},{"range":"2488","text":"2477"},"Update the dependencies array to be: [GetDetail, GetPatientDTOObj, props.activeContent.id]",{"range":"2489","text":"2490"},"Update the dependencies array to be: [props.activeContent.id, props.activeContent.activeTab, ClinicVisitListHistory]",{"range":"2491","text":"2492"},"Update the dependencies array to be: [CurrentLabResult, CurrentRegimen, props.patientObj.id]",{"range":"2493","text":"2494"},"Update the dependencies array to be: [HIVStatus]",{"range":"2495","text":"2496"},"Update the dependencies array to be: [EAC, props.patientObj.id]",{"range":"2497","text":"2498"},"Update the dependencies array to be: [props.activeContent.id, props.activeContent.activeTab, LabOrders]",{"range":"2499","text":"2500"},{"range":"2501","text":"2487"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.obj, TestGroup, CheckEACStatus, GetPatientDTOObj, tests]",{"range":"2502","text":"2503"},{"range":"2504","text":"2500"},"Update the dependencies array to be: [GetFormDetail, GetPatientDTOObj, props.patientObj.id]",{"range":"2505","text":"2506"},"Update the dependencies array to be: [GetChronicCare, PatientCurrentObject, props.activeContent.actionType, props.activeContent.id]",{"range":"2507","text":"2508"},"Update the dependencies array to be: [props.activeContent.id, props.activeContent.activeTab, TrackingDetails]",{"range":"2509","text":"2510"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.obj, props.activeContent, tests, showObj]",{"range":"2511","text":"2512"},"Update the dependencies array to be: [GetPatientDTOObj, props.activeContent, props.activeContent.id]",{"range":"2513","text":"2514"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"2515","text":"2516"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.obj, TestGroup, PatientVisit]",{"range":"2517","text":"2518"},"Update the dependencies array to be: [EACHistory, props.activeContent.id]",{"range":"2519","text":"2520"},"Update the dependencies array to be: [EACStatus, props.activeContent.id]",{"range":"2521","text":"2522"},{"range":"2523","text":"2520"},"Update the dependencies array to be: [props.activeContent.obj, props.activeContent.id, objValues.dsdModelType, VitalSigns, PharmacyRefillDetail, CheckEACStatus, GetIptEligibilty, props.activeContent]",{"range":"2524","text":"2525"},"Update the dependencies array to be: [GetMHSDetail, GetPatientDTOObj, props.activeContent.id]",{"range":"2526","text":"2527"},{"range":"2528","text":"2487"},"Update the dependencies array to be: [CheckEACStatus, GetPatientDTOObj, TestGroup, props.patientObj.id, tests.labTestId]",{"range":"2529","text":"2530"},"Update the dependencies array to be: [CheckEACStatus, GetPatientDTOObj, LabTestDetail, props.patientObj.id]",{"range":"2531","text":"2532"},"Update the dependencies array to be: [EACHistory, props.patientObj.id]",{"range":"2533","text":"2534"},"Update the dependencies array to be: [GetPatientDTOObj, LabTestDetail, props.patientObj.id]",{"range":"2535","text":"2536"},{"range":"2537","text":"2534"},"Update the dependencies array to be: [EACStatus]",{"range":"2538","text":"2539"},"Update the dependencies array to be: [LabOrders, props.patientObj.id]",{"range":"2540","text":"2541"},"Update the dependencies array to be: [ClinicVisitList, GetPatientDTOObj, PatientCurrentRegimen, PatientDetailId, TestGroup, VitalSigns, props.patientObj]",{"range":"2542","text":"2543"},"Update the dependencies array to be: [selectedOption, objValues.refillPeriod, VitalSigns, PatientCurrentRegimen, CheckEACStatus, ChronicCare, GetPatientDTOObj, GetIptEligibilty]",{"range":"2544","text":"2545"},{"range":"2546","text":"2541"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"2547","text":"2548"},{"range":"2549","text":"2487"},"Update the dependencies array to be: [locationState]",{"range":"2550","text":"2551"},"Update the dependencies array to be: [GetInitialEvaluation, props.activeContent.id]",{"range":"2552","text":"2553"},"Update the dependencies array to be: [patientObj.id, props.activeContent.id, objValues.adherenceLevel, VitalSigns, props.activeContent, objValues, GetPatientObj, GetVisitById]",{"range":"2554","text":"2555"},"Update the dependencies array to be: [GetPatientDTOObj, props.observation.data, props.patientObj]",{"range":"2556","text":"2557"},"Update the dependencies array to be: [GetPatientDTOObj, props.observation.data, props.observation.dateOfObservation, props.patientObj, visit]",{"range":"2558","text":"2559"},"Update the dependencies array to be: [objValues, props.observation.data, props.observation.data.regimen, regimenObj]",{"range":"2560","text":"2561"},"Update the dependencies array to be: [objValues, props.observation.data]",{"range":"2562","text":"2563"},"Update the dependencies array to be: [props.tbObj.priorInh, props.tbObj.highAlcohol, props.tbObj.activeHepatitis, props.tbObj.age1year, props.tbObj.poorTreatmentAdherence, props.tbObj.abnormalChest, props.tbObj.activeTb, props.tbObj.contraindications, props.tbObj.coughing, props.tbObj.fever, props.tbObj.losingWeight, props.tbObj.nightSweats, props.tbObj.poorWeightGain, props.tbObj.historyWithAdults, props.tbObj.outcome, props.tbObj.eligibleForTPT, props.tbObj.currentlyOnTuberculosis, props]",{"range":"2564","text":"2565"},{"range":"2566","text":"2508"},{"range":"2567","text":"2508"},{"range":"2568","text":"2508"},[5909,5932],"[patientObj, patientId, basicInfo.dateOfRegistration, basicInfo.dob]",[5988,6011],"[patientObj, patientId, PatientCurrentObject, basicInfo.dateOfRegistration, basicInfo.dob]",[4926,4928],"[PatientCurrentObject]",[8287,8318],"[basicInfo.dateOfRegistration, basicInfo.dob, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",[751,769],"[Observation, props.patientObj]",[2007,2025],"[ClinicVisitList, LaboratoryHistory, PharmacyList, RecentActivities, props.patientObj]",[593,617],"[props.activeContent.activeTab, props.activeContent.id]",[6107,6128],"[CheckEACStatus, GetPatientDTOObj, props.activeContent]",[4221,4242],"[LabOrders, props.activeContent]",[832,888],"[props.activeContent.id, props.activeContent.activeTab, PharmacyList]",[6422,6464],"[CheckEACStatus, GetPatientDTOObj, props.activeContent, props.patientObj.id]",[4563,4565],"[GetPatientDTOObj]",[443,467],[4553,4577],"[GetDetail, GetPatientDTOObj, props.activeContent.id]",[727,782],"[props.activeContent.id, props.activeContent.activeTab, ClinicVisitListHistory]",[3991,4012],"[CurrentLabResult, CurrentRegimen, props.patientObj.id]",[3669,3671],"[HIVStatus]",[1589,1610],"[EAC, props.patientObj.id]",[737,792],"[props.activeContent.id, props.activeContent.activeTab, LabOrders]",[3570,3572],[4288,4334],"[props.patientObj.id, props.activeContent.obj, TestGroup, CheckEACStatus, GetPatientDTOObj, tests]",[713,768],[3605,3626],"[GetFormDetail, GetPatientDTOObj, props.patientObj.id]",[6864,6888],"[GetChronicCare, PatientCurrentObject, props.activeContent.actionType, props.activeContent.id]",[698,753],"[props.activeContent.id, props.activeContent.activeTab, TrackingDetails]",[5158,5204],"[props.patientObj.id, props.activeContent.obj, props.activeContent, tests, showObj]",[5409,5454],"[GetPatientDTOObj, props.activeContent, props.activeContent.id]",[6965,6967],"[clear_storelist, getPersonBiometrics]",[3675,3721],"[props.patientObj.id, props.activeContent.obj, TestGroup, PatientVisit]",[2252,2276],"[EACHistory, props.activeContent.id]",[2319,2343],"[EACStatus, props.activeContent.id]",[2252,2276],[5620,5693],"[props.activeContent.obj, props.activeContent.id, objValues.dsdModelType, VitalSigns, PharmacyRefillDetail, CheckEACStatus, GetIptEligibilty, props.activeContent]",[2969,2993],"[GetMHSDetail, GetPatientDTOObj, props.activeContent.id]",[6137,6139],[4607,4645],"[CheckEACStatus, GetPatientDTOObj, TestGroup, props.patientObj.id, tests.labTestId]",[4310,4331],"[CheckEACStatus, GetPatientDTOObj, LabTestDetail, props.patientObj.id]",[2431,2452],"[EACHistory, props.patientObj.id]",[3809,3830],"[GetPatientDTOObj, LabTestDetail, props.patientObj.id]",[2431,2452],[2549,2551],"[EACStatus]",[3972,3993],"[LabOrders, props.patientObj.id]",[8360,8378],"[ClinicVisitList, GetPatientDTOObj, PatientCurrentRegimen, PatientDetailId, TestGroup, VitalSigns, props.patientObj]",[6287,6349],"[selectedOption, objValues.refillPeriod, VitalSigns, PatientCurrentRegimen, CheckEACStatus, ChronicCare, GetPatientDTOObj, GetIptEligibilty]",[4106,4127],[3440,3461],"[PatientHistory, props.patientObj.id]",[3014,3016],[3130,3132],"[locationState]",[2999,3023],"[GetInitialEvaluation, props.activeContent.id]",[8974,9039],"[patientObj.id, props.activeContent.id, objValues.adherenceLevel, VitalSigns, props.activeContent, objValues, GetPatientObj, GetVisitById]",[3453,3495],"[GetPatientDTOObj, props.observation.data, props.patientObj]",[3915,3957],"[GetPatientDTOObj, props.observation.data, props.observation.dateOfObservation, props.patientObj, visit]",[3701,3757],"[objValues, props.observation.data, props.observation.data.regimen, regimenObj]",[3437,3461],"[objValues, props.observation.data]",[7266,7828],"[props.tbObj.priorInh, props.tbObj.highAlcohol, props.tbObj.activeHepatitis, props.tbObj.age1year, props.tbObj.poorTreatmentAdherence, props.tbObj.abnormalChest, props.tbObj.activeTb, props.tbObj.contraindications, props.tbObj.coughing, props.tbObj.fever, props.tbObj.losingWeight, props.tbObj.nightSweats, props.tbObj.poorWeightGain, props.tbObj.historyWithAdults, props.tbObj.outcome, props.tbObj.eligibleForTPT, props.tbObj.currentlyOnTuberculosis, props]",[6705,6729],[6723,6747],[6705,6729]]